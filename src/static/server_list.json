{
  "attio": {
    "name": "Attio guMCP Server",
    "icon": "assets/icon.png",
    "description": "Interact with Attio CRM data and records",
    "resources": [
      {
        "name": "companies",
        "description": "Company records in Attio CRM, including their details and relationships.",
        "required_scopes": [
          "read",
          "write"
        ]
      },
      {
        "name": "people",
        "description": "Contact records in Attio CRM, including their personal and professional information.",
        "required_scopes": [
          "read",
          "write"
        ]
      },
      {
        "name": "lists",
        "description": "Lists of records in Attio CRM, used for organizing companies and contacts.",
        "required_scopes": [
          "read",
          "write"
        ]
      }
    ],
    "tools": [
      {
        "name": "search_companies",
        "description": "Search for companies in Attio",
        "required_scopes": [
          "read"
        ]
      },
      {
        "name": "read_company",
        "description": "Read a specific company by ID",
        "required_scopes": [
          "read"
        ]
      },
      {
        "name": "create_company",
        "description": "Create a new company in Attio",
        "required_scopes": [
          "write"
        ]
      },
      {
        "name": "update_company",
        "description": "Update an existing company in Attio",
        "required_scopes": [
          "write"
        ]
      },
      {
        "name": "search_contacts",
        "description": "Search for contacts in Attio",
        "required_scopes": [
          "read"
        ]
      },
      {
        "name": "read_contact",
        "description": "Read a specific contact by ID",
        "required_scopes": [
          "read"
        ]
      },
      {
        "name": "create_contact",
        "description": "Create a new contact in Attio",
        "required_scopes": [
          "write"
        ]
      },
      {
        "name": "update_contact",
        "description": "Update an existing contact in Attio",
        "required_scopes": [
          "write"
        ]
      },
      {
        "name": "list_lists",
        "description": "List available lists in Attio",
        "required_scopes": [
          "read"
        ]
      },
      {
        "name": "read_list",
        "description": "Read a specific list by ID",
        "required_scopes": [
          "read"
        ]
      },
      {
        "name": "add_to_list",
        "description": "Add a record to a list in Attio",
        "required_scopes": [
          "write"
        ]
      }
    ],
    "server_id": "attio",
    "documentation": "attio/README.md",
    "readme_content": "# Attio Server\n\nguMCP server implementation for interacting with Attio.\n\n### Prerequisites\n\n- Python 3.11+\n- An Attio account and API access\n- An Attio OAuth App key with appropriate permissions for (see [Attio API documentation](https://developers.attio.com/docs/integrations)):\n  - Reading companies and contacts\n  - Writing companies and contacts\n  - Managing lists\n\n### Local Authentication\n\nLocal authentication uses an API key configuration JSON file:\n\n```\nlocal_auth/oauth_configs/attio/oauth.json\n```\n\nCreate the following file with the relevant attributes for your app:\n\n```json\n{\n  \"client_id\": \"xxxxxxxxxxxxxxxxxxxxx\",\n  \"client_secret\": \"xxxxxxxxxxxxxxxxxxxxx\",\n  \"redirect_uri\": \"http://xxxxxxxxxxxxx\"\n}\n```\n\nTo set up and verify authentication, run:\n\n```bash\npython src/servers/attio/main.py auth\n```\n\n### Run\n\n#### Local Development\n\n```bash\npython src/servers/local.py --server attio --user-id local\n```\n"
  },
  "webflow": {
    "name": "Webflow guMCP Server",
    "icon": "assets/icon.png",
    "description": "Interact with Webflow sites, forms, collections, and users",
    "tools": [
      {
        "name": "get_authorized_user",
        "description": "Get information about the authorized Webflow user"
      },
      {
        "name": "list_sites",
        "description": "List all sites the provided access token is able to access"
      },
      {
        "name": "get_site",
        "description": "Get details of a specific site by its ID"
      },
      {
        "name": "get_custom_domains",
        "description": "Get a list of all custom domains related to a site"
      },
      {
        "name": "list_forms",
        "description": "List forms for a given site"
      },
      {
        "name": "list_form_submissions",
        "description": "List form submissions for a given form"
      },
      {
        "name": "get_form_submission",
        "description": "Get information about a specific form submission"
      },
      {
        "name": "list_form_submissions_by_site",
        "description": "List form submissions for a given site"
      },
      {
        "name": "delete_form_submission",
        "description": "Delete a form submission"
      },
      {
        "name": "list_pages",
        "description": "List all pages for a site"
      },
      {
        "name": "get_page_metadata",
        "description": "Get metadata information for a single page"
      },
      {
        "name": "get_page_content",
        "description": "Get content from a static page"
      },
      {
        "name": "list_collections",
        "description": "List all Collections within a Site"
      },
      {
        "name": "get_collection",
        "description": "Get the full details of a collection from its ID"
      },
      {
        "name": "delete_collection",
        "description": "Delete a collection using its ID"
      },
      {
        "name": "create_collection",
        "description": "Create a Collection for a site"
      },
      {
        "name": "list_collection_items_staging",
        "description": "List all Items within a Collection"
      },
      {
        "name": "get_collection_item_staging",
        "description": "Get details of a selected Collection Item"
      },
      {
        "name": "update_collection_item_staging",
        "description": "Update a selected Item in a Collection"
      },
      {
        "name": "update_collection_items_staging",
        "description": "Update a single item or multiple items in a Collection"
      },
      {
        "name": "create_collection_item_staging",
        "description": "Create Item in a Collection"
      },
      {
        "name": "delete_collection_item_staging",
        "description": "Delete an item from a collection"
      },
      {
        "name": "delete_collection_items_staging",
        "description": "Delete Items from a Collection"
      },
      {
        "name": "list_users",
        "description": "Get a list of users for a site"
      },
      {
        "name": "get_user",
        "description": "Get a User by ID"
      },
      {
        "name": "delete_user",
        "description": "Delete a User by ID"
      },
      {
        "name": "invite_user",
        "description": "Create and invite a user with an email address"
      }
    ],
    "server_id": "webflow",
    "documentation": "webflow/README.md",
    "readme_content": "# Webflow Server\n\nguMCP server implementation for interacting with Webflow sites and content management.\n\n### Prerequisites\n\n- Python 3.11+\n- A Webflow account and application ([Webflow OAuth Authentication](https://webflow.com/dashboard/workspace))\n\n\n### OAuth Setup\n\n1. Log into your Webflow dashboard and click on **Integrations**\n2. Click **Create an App** and fill in the necessary information\n3. Navigate to **Building Blocks** > **Data Client** and enable the following scopes:\n   - `authorized_user:read`\n   - `sites:read`\n   - `forms:read`\n   - `forms:write`\n   - `pages:read`\n   - `cms:read`\n   - `cms:write`\n   - `users:read`\n   - `users:write`\n4. Add your redirect URI (e.g., `http://localhost:8000/callback`) and create your app\n5. Save your Client ID and Client Secret for local authentication\n\n### Local Authentication\n\nLocal authentication uses an OAuth Configuration JSON file:\n\n```json\nlocal_auth/oauth_configs/webflow/oauth.json\n```\n\nCreate the following file with the relevant attributes from your Webflow app:\n\n```json\n{\n  \"client_id\": \"xxxxxxxxxxxxxxxxxxxxx\",\n  \"client_secret\": \"xxxxxxxxxxxxxxxxxxxxx\",\n  \"redirect_uri\": \"xxxxxxxxxxxxxxxxxxxxx\"\n}\n```\n\nWhen authorizing users, the server will automatically:\n\n1. Redirect to Webflow's authorization URL with your configured credentials\n2. Exchange the received code for an access token using Webflow's OAuth endpoints\n\nFor local development, you can authenticate using:\n\n```bash\npython src/servers/webflow/main.py auth\n```\n\nThis will launch a browser-based authentication flow to obtain and save credentials."
  },
  "monday": {
    "name": "Monday.com guMCP Server",
    "icon": "assets/icon.png",
    "description": "Interact with Monday.com boards, items, groups, and columns using the Monday.com API",
    "tools": [
      {
        "name": "get_me",
        "description": "Get the current user's information including name and email"
      },
      {
        "name": "get_boards",
        "description": "Get all boards accessible to the user"
      },
      {
        "name": "get_board",
        "description": "Get a specific board by ID"
      },
      {
        "name": "get_workspaces",
        "description": "Get all workspaces accessible to the user"
      },
      {
        "name": "create_board",
        "description": "Create a new board within a workspace"
      },
      {
        "name": "create_item",
        "description": "Create a new item in a board"
      },
      {
        "name": "get_group",
        "description": "Get a specific group within a board"
      },
      {
        "name": "get_item",
        "description": "Get a specific item by its ID"
      },
      {
        "name": "delete_item",
        "description": "Delete a specific item by its ID"
      },
      {
        "name": "delete_group",
        "description": "Delete a specific group from a board"
      },
      {
        "name": "change_column_value",
        "description": "Change the value of a column for a specific item"
      },
      {
        "name": "create_column",
        "description": "Create a new column in a board"
      },
      {
        "name": "create_group",
        "description": "Create a new group in a board"
      },
      {
        "name": "create_subitem",
        "description": "Create a new sub-item under a parent item"
      },
      {
        "name": "delete_subitem",
        "description": "Delete a sub-item by its ID"
      },
      {
        "name": "get_subitems",
        "description": "Get all subitems of a specific item"
      },
      {
        "name": "archive_item",
        "description": "Archive a specific item by its ID"
      },
      {
        "name": "archive_group",
        "description": "Archive a specific group in a board"
      },
      {
        "name": "archive_board",
        "description": "Archive a specific board by its ID"
      }
    ],
    "server_id": "monday",
    "documentation": "monday/README.md",
    "readme_content": "GuMCP server implementation for interacting with the Monday.com API using OAuth authentication.\n\n---\n\n### \ud83d\udce6 Prerequisites\n\n- Python 3.11+\n- A Monday.com account\n- OAuth credentials configured for your application\n\n---\n\n### \ud83d\udee0\ufe0f Step 1: Create a Monday.com Developer Account and Get API Credentials\n\n1. Go to [Monday.com](https://monday.com)\n2. Click on \"Get Started\"\n3. Create an account by:\n   - Continuing with Google or\n   - Entering your email\n4. Complete the account setup:\n   - Enter your full name\n   - Create a password\n   - Set your account name\n   - Answer profession-related questions\n5. After logging in:\n   - You can add team members or click \"Remind me later\"\n   - Create your first project\n6. Once in the main dashboard:\n   - Click on your profile icon in the top right corner\n   - Select \"Developers\" from the menu\n   - Go to \"My Apps\" on the left sidebar\n   - Scroll down on the right side\n   - Click \"Build App\"\n7. Configure your app:\n   - Enter an app name\n   - Choose a color\n   - Add a short description\n8. Copy your Client ID and Client Secret\n9. Configure OAuth permissions:\n   - Click on \"Build\" in the left sidebar\n   - Select \"OAuth Permissions\"\n   - Add your redirect URI (e.g., `http://localhost:8080`)\n   - Enable the following scopes:\n     - `me:read` - Read current user information\n     - `boards:read` - Read boards and their content\n     - `workspaces:read` - Read workspaces\n     - `boards:write` - Create and modify boards and their content\n     - `workspaces:write` - Create and modify workspaces\n   - Save the changes\n\n---\n\n### \ud83d\udee0\ufe0f Step 2: Configure OAuth Settings\n\n1. Create a new folder called `local_auth` in your project directory\n2. Inside that, create a folder called `oauth_configs`\n3. Inside that, create a folder called `monday`\n4. Create a new file called `oauth.json` in the `monday` folder\n5. Copy and paste this into the file, replacing the placeholders with your actual values:\n\n```json\n{\n  \"client_id\": \"your-client-id-here\",\n  \"client_secret\": \"your-client-secret-here\",\n  \"redirect_uri\": \"your-redirect-uri-here\" e.g. `http://localhost:8080`\n}\n```\n\n> \u26a0\ufe0f **IMPORTANT**: Never share or commit this file to version control. Add it to your `.gitignore`.\n---\n\n### \ud83d\udd10 Step 3: Authenticate Your App\n\n1. Open your terminal\n2. Run this command:\n   ```bash\n   python src/servers/monday/main.py auth\n   ```\n3. Log in to your Monday.com account\n4. Click **\"Allow\"** to authorize the app\n5. You're now authenticated! \ud83c\udf89\n\n> You only need to do this authentication step once, unless your token expires.\n---\n\n### \ud83d\udee0\ufe0f Supported Tools\n\nThis server exposes the following tools for interacting with Monday.com:\n\n#### User Information\n- `get_me` \u2013 Get the current user's information including name and email\n\n#### Board Management\n- `get_boards` \u2013 Get all boards accessible to the user\n- `get_board` \u2013 Get a specific board by ID\n- `create_board` \u2013 Create a new board within a workspace\n- `archive_board` \u2013 Archive a specific board by its ID\n\n#### Item Management\n- `get_item` \u2013 Get a specific item by its ID\n- `create_item` \u2013 Create a new item in a board\n- `delete_item` \u2013 Delete a specific item by its ID\n- `archive_item` \u2013 Archive a specific item by its ID\n- `get_subitems` \u2013 Get all subitems of a specific item\n- `create_subitem` \u2013 Create a new sub-item under a parent item\n- `delete_subitem` \u2013 Delete a sub-item by its ID\n\n#### Group Management\n- `get_group` \u2013 Get a specific group within a board\n- `create_group` \u2013 Create a new group in a board\n- `delete_group` \u2013 Delete a specific group from a board\n- `archive_group` \u2013 Archive a specific group in a board\n\n#### Column Management\n- `create_column` \u2013 Create a new column in a board\n- `change_column_value` \u2013 Change the value of a column for a specific item\n\n#### Workspace Management\n- `get_workspaces` \u2013 Get all workspaces accessible to the user\n\n---\n\n### \u25b6\ufe0f Running the Server\n\n#### Local Development\n\n1. Start the server:\n   ```bash\n   ./start_sse_dev_server.sh\n   ```\n\n2. In a new terminal, start the test client:\n   ```bash\n   python RemoteMCPTestClient.py --endpoint http://localhost:8000/monday/local\n   ```\n\n---\n\n### \ud83d\udcce Important Notes\n\n- Ensure your Monday.com application is properly configured in the developer portal\n- The server uses Monday.com's production environment by default\n- Make sure your `.env` file contains the appropriate API keys if you're using external LLM services\n- The server implements rate limiting and proper error handling for API requests\n- All API calls are authenticated using the stored OAuth tokens\n\n---\n\n### \ud83d\udcda Need Help?\n\n- [Monday.com Developer Portal](https://developer.monday.com/)\n- [Monday.com API Documentation](https://developer.monday.com/api-reference/docs)\n- [Monday.com OAuth Guide](https://developer.monday.com/api-reference/docs/authentication)\n"
  },
  "hackernews": {
    "name": "Hacker News MCP Server",
    "icon": "assets/icon.png",
    "description": "Interact with Hacker News using the Hacker News API",
    "tools": [
      {
        "name": "get_top_stories",
        "description": "Get the top stories from Hacker News"
      },
      {
        "name": "get_latest_posts",
        "description": "Get the latest stories from Hacker News with optional limit"
      },
      {
        "name": "get_story_details",
        "description": "Get the details of a specific story from Hacker News using the story id."
      },
      {
        "name": "get_comments",
        "description": "Get the comments of a specific story from Hacker News using the story id."
      },
      {
        "name": "get_user",
        "description": "Get the details of a specific user from Hacker News using the username."
      },
      {
        "name": "get_stories_by_type",
        "description": "Get stories by type (top, new, best, ask, show, job)"
      }
    ],
    "server_id": "hackernews",
    "documentation": "hackernews/README.md",
    "readme_content": "# Hacker News Server\n\nguMCP server implementation for interacting with the **Hacker News API**.\n\n---\n\n### \ud83d\udce6 Prerequisites\n\n- Python 3.11+\n- No authentication required - Hacker News API is public and free to use\n\n---\n\n### \ud83d\udee0\ufe0f Supported Tools\n\nThis server exposes the following tools for interacting with Hacker News:\n\n- `get_top_stories` \u2013 Get top stories from Hacker News with optional limit\n- `get_latest_stories` - Get latest stories from Hacker News with optional limit\n- `get_story_details` \u2013 Get detailed content about a specific Hacker News story\n- `get_comments` \u2013 Get comments for a specific Hacker News story\n- `get_user` \u2013 Get information about a Hacker News user\n- `get_stories_by_type` \u2013 Get stories by type (top, new, best, ask, show, job)\n\n---\n\n### \u25b6\ufe0f Run\n\n#### Local Development\n\nYou can launch the server for local development using:\n\n```bash\n./start_sse_dev_server.sh\n```\n\nThis will start the Hacker News MCP server and make it available for integration and testing.\n\nYou can also start the local client using the following:\n\n```bash\npython RemoteMCPTestClient.py --endpoint http://localhost:8000/hackernews/local\n```\n\n---\n\n### \ud83d\udcce Notes\n\n- The Hacker News API is public and free to use\n- Rate limiting may apply for frequent requests\n- Make sure your `.env` file contains the appropriate API keys if you're using external LLM services like Anthropic.\n\n---\n\n### \ud83d\udcda Resources\n\n- [Hacker News API Documentation](https://github.com/HackerNews/API)\n"
  },
  "ahrefs": {
    "name": "Ahrefs guMCP Server",
    "icon": "assets/icon.png",
    "description": "Access Ahrefs SEO and backlink analytics data",
    "tools": [
      {
        "name": "domain_rating",
        "description": "Get domain rating for a domain"
      },
      {
        "name": "backlinks_stats",
        "description": "Get backlinks statistics for a domain or URL"
      },
      {
        "name": "outlinks_stats",
        "description": "Get outlinks statistics for a domain or URL"
      },
      {
        "name": "metrics",
        "description": "Get comprehensive metrics for a domain or URL"
      },
      {
        "name": "domain_rating_history",
        "description": "Get domain rating history for a domain"
      },
      {
        "name": "url_rating_history",
        "description": "Get URL rating history for a URL"
      },
      {
        "name": "refdomains_history",
        "description": "Get referring domains history for a domain or URL"
      },
      {
        "name": "pages_history",
        "description": "Get pages history for a domain or URL"
      },
      {
        "name": "metrics_history",
        "description": "Get metrics history for a domain or URL"
      },
      {
        "name": "keywords_history",
        "description": "Get keywords history for a domain or URL"
      },
      {
        "name": "total_search_volume_history",
        "description": "Get total search volume history for a domain or URL"
      },
      {
        "name": "backlinks",
        "description": "Get backlinks for a domain or URL"
      },
      {
        "name": "broken_backlinks",
        "description": "Get broken backlinks for a domain or URL"
      },
      {
        "name": "refdomains",
        "description": "Get referring domains for a domain or URL"
      },
      {
        "name": "anchors",
        "description": "Get anchor text for a domain or URL"
      },
      {
        "name": "organic_keywords",
        "description": "Get organic keywords for a domain or URL"
      },
      {
        "name": "organic_competitors",
        "description": "Get organic competitors for a domain or URL"
      },
      {
        "name": "top_pages",
        "description": "Get top organic pages for a domain"
      },
      {
        "name": "paid_pages",
        "description": "Get paid pages for a domain or URL"
      },
      {
        "name": "best_by_external_links",
        "description": "Get pages with the most external links"
      },
      {
        "name": "best_by_internal_links",
        "description": "Get pages with the most internal links"
      },
      {
        "name": "linked_domains",
        "description": "Get domains that are linked from the target"
      },
      {
        "name": "outgoing_external_anchors",
        "description": "Get external anchor texts used in outgoing links"
      },
      {
        "name": "outgoing_internal_anchors",
        "description": "Get internal anchor texts used in outgoing links"
      },
      {
        "name": "keywords_overview",
        "description": "Get metrics for keywords from Keywords Explorer"
      },
      {
        "name": "volume_history",
        "description": "Get search volume history for a keyword"
      },
      {
        "name": "volume_by_country",
        "description": "Get search volume by country for a keyword"
      },
      {
        "name": "matching_terms",
        "description": "Get matching terms for keywords"
      },
      {
        "name": "related_terms",
        "description": "Get related terms for keywords"
      },
      {
        "name": "search_suggestions",
        "description": "Get search suggestions for keywords"
      }
    ],
    "server_id": "ahrefs",
    "documentation": "ahrefs/README.md",
    "readme_content": "# Ahrefs Server\n\nguMCP server implementation for accessing Ahrefs SEO and backlink analytics data.\n\n## Prerequisites\n\n- Python 3.11+\n- An Ahrefs API key (obtain from [Ahrefs API](https://ahrefs.com/api/))\n- Active Ahrefs subscription\n\n## Local Authentication\n\nTo set up and verify authentication, run:\n\n```bash\npython src/servers/ahrefs/main.py auth\n```\n\nYou will be prompted to enter your Ahrefs API key."
  },
  "docusign": {
    "name": "DocuSign guMCP Server",
    "icon": "assets/icon.png",
    "description": "Interact with DocuSign for electronic signatures, document management, and user administration",
    "tools": [
      {
        "name": "list_templates",
        "description": "List all templates in your DocuSign account with optional filtering",
        "required_scopes": [
          "signature",
          "impersonation"
        ]
      },
      {
        "name": "get_template",
        "description": "Get detailed information about a specific template",
        "required_scopes": [
          "signature",
          "impersonation"
        ]
      },
      {
        "name": "create_template",
        "description": "Create a new template in your DocuSign account",
        "required_scopes": [
          "signature",
          "impersonation"
        ]
      },
      {
        "name": "create_envelope",
        "description": "Create a new envelope in DocuSign from a template or with documents",
        "required_scopes": [
          "signature",
          "impersonation"
        ]
      },
      {
        "name": "get_envelope",
        "description": "Get detailed information about a specific envelope",
        "required_scopes": [
          "signature",
          "impersonation"
        ]
      },
      {
        "name": "send_envelope",
        "description": "Send a draft envelope to recipients for signing",
        "required_scopes": [
          "signature",
          "impersonation"
        ]
      },
      {
        "name": "get_envelope_status_bulk",
        "description": "Get status information for multiple envelopes at once",
        "required_scopes": [
          "signature",
          "impersonation"
        ]
      },
      {
        "name": "create_user",
        "description": "Create new users in your DocuSign account",
        "required_scopes": [
          "signature",
          "impersonation"
        ]
      },
      {
        "name": "list_users",
        "description": "List all users in your DocuSign account with optional filtering",
        "required_scopes": [
          "signature",
          "impersonation"
        ]
      },
      {
        "name": "get_user",
        "description": "Get detailed information about a specific user",
        "required_scopes": [
          "signature",
          "impersonation"
        ]
      }
    ],
    "server_id": "docusign",
    "documentation": "docusign/README.md",
    "readme_content": "# DocuSign Server\n\nguMCP server implementation for interacting with DocuSign for electronic signatures, document management, and user administration.\n\n---\n\n### \ud83d\ude80 Prerequisites\n\n- Python 3.11+\n- A **DocuSign Developer Account** \u2013 [Sign up for free here](https://www.docusign.com/)\n\n---\n\n### \ud83d\udd10 DocuSign OAuth App Setup (First-time Setup)\n\n1. **Log in to the [DocuSign Developer Portal](https://admindemo.docusign.com/)**\n2. Go to **Settings** \u2192 **Apps and Keys** (in the left sidebar)\n3. Click on **\"Add App & Integration Key\"**\n4. Fill out:\n   - **App Name**: e.g., `guMCP Integration`\n   - Click **\"Create App\"**\n5. After the app is created:\n   - Copy the **Integration Key** (this is your `client_id`)\n   - Under **Authentication**, click **\"Add Secret Key\"** and copy it (this is your `client_secret`)\n   - Under **Redirect URIs**, click **\"Add URI\"** and add your redirect uri, e.g.:\n     ```\n     http://localhost:8080/\n     ```\n\n- **Note: Make sure to use a _trailing slash_ in the redirect URI**\n\n6. Save all values securely.\n\n---\n\n### \ud83d\udcc4 Local OAuth Credentials\n\nCreate a file named `oauth.json` in your directory (local_auth/oauth_configs/docusign/) with the following content:\n\n```json\n{\n  \"client_id\": \"your-client-id\",\n  \"client_secret\": \"your-client-secret\",\n  \"redirect_uri\": \"your-redirect-uri\"\n}\n```\n\n---\n\n### \ud83d\udd13 Authenticate with DocuSign\n\nRun the following command to initiate the OAuth login:\n\n```bash\npython src/servers/docusign/main.py auth\n```\n\nThis will open your browser and prompt you to log in to DocuSign. After successful authentication, the access credentials will be saved locally to:\n\n```\nlocal_auth/credentials/docusign/local_credentials.json\n```\n\n---\n\n### \ud83d\udee0 Features\n\nThis server exposes tools grouped into the following categories:\n\n#### \ud83d\udcd1 Template Management\n\n- `list_templates` \u2013 List templates in your account\n- `get_template` \u2013 Get details of a specific template\n- `create_template` \u2013 Create a new reusable template\n\n#### \u2709\ufe0f Envelope Management\n\n- `create_envelope` \u2013 Create envelope from templates or files\n- `get_envelope` \u2013 Retrieve envelope details\n- `send_envelope` \u2013 Send envelope to recipients\n- `get_envelope_status_bulk` \u2013 Get statuses for multiple envelopes\n\n#### \ud83d\udc64 User Management\n\n- `create_user` \u2013 Add users to your account\n- `list_users` \u2013 List users with filtering\n- `get_user` \u2013 Get information on a specific user\n\n---\n\n### \u25b6\ufe0f Running the Server and Client\n\n#### 1. Start the Server\n\n```bash\npython src/servers/main.py\n```\n\nMake sure you\u2019ve already authenticated using the `auth` command.\n\n#### 2. Run the Client\n\n```bash\npython tests/clients/RemoteMCPTestClient.py --endpoint=http://localhost:8000/docusign/local\n```\n\n---\n\n### \ud83d\udccc Notes on DocuSign API Usage\n\n- Most operations require your **account ID**, which is fetched automatically after auth.\n- Documents should be base64 encoded.\n- Signature fields (\"tabs\") must be configured in envelopes/templates before sending.\n- All endpoints are RESTful and return JSON.\n"
  },
  "mailerlite": {
    "name": "MailerLite guMCP Server",
    "icon": "assets/icon.png",
    "description": "Interact with MailerLite for email marketing automation, including subscriber management, campaign creation, and webhook integration.",
    "tools": [
      {
        "name": "list_all_subscribers",
        "description": "List all subscribers in the MailerLite account with optional filtering and pagination."
      },
      {
        "name": "create_subscriber",
        "description": "Create a new subscriber with email and optional custom fields."
      },
      {
        "name": "update_subscriber",
        "description": "Update an existing subscriber's information and custom fields."
      },
      {
        "name": "get_subscriber",
        "description": "Get detailed information about a specific subscriber."
      },
      {
        "name": "delete_subscriber",
        "description": "Delete a subscriber from the MailerLite account."
      },
      {
        "name": "list_groups",
        "description": "List all groups in the MailerLite account with optional filtering and sorting."
      },
      {
        "name": "create_group",
        "description": "Create a new group for organizing subscribers."
      },
      {
        "name": "update_group",
        "description": "Update an existing group's name."
      },
      {
        "name": "delete_group",
        "description": "Delete a group from the MailerLite account."
      },
      {
        "name": "get_group_subscribers",
        "description": "Get subscribers belonging to a specific group."
      },
      {
        "name": "assign_subscriber_to_group",
        "description": "Assign a subscriber to a specific group."
      },
      {
        "name": "unassign_subscriber_from_group",
        "description": "Remove a subscriber from a specific group."
      },
      {
        "name": "list_fields",
        "description": "List all custom fields in the MailerLite account."
      },
      {
        "name": "create_field",
        "description": "Create a new custom field for subscribers."
      },
      {
        "name": "update_field",
        "description": "Update an existing custom field's properties."
      },
      {
        "name": "delete_field",
        "description": "Delete a custom field from the MailerLite account."
      },
      {
        "name": "list_campaigns",
        "description": "List all campaigns with optional filtering by status and type."
      },
      {
        "name": "get_campaign",
        "description": "Get detailed information about a specific campaign."
      },
      {
        "name": "create_campaign",
        "description": "Create a new email campaign with content and settings."
      },
      {
        "name": "update_campaign",
        "description": "Update an existing campaign's content and settings."
      },
      {
        "name": "schedule_campaign",
        "description": "Schedule a campaign for delivery at a specific date and time."
      },
      {
        "name": "cancel_campaign",
        "description": "Cancel a scheduled campaign."
      },
      {
        "name": "delete_campaign",
        "description": "Delete a campaign from the MailerLite account."
      },
      {
        "name": "list_campaign_languages",
        "description": "Get a list of available languages for campaigns."
      },
      {
        "name": "list_forms",
        "description": "List all forms with optional filtering by type and name."
      },
      {
        "name": "get_form",
        "description": "Get detailed information about a specific form."
      },
      {
        "name": "update_form",
        "description": "Update an existing form's properties."
      },
      {
        "name": "delete_form",
        "description": "Delete a form from the MailerLite account."
      },
      {
        "name": "list_webhooks",
        "description": "List all webhooks configured in the MailerLite account."
      },
      {
        "name": "get_webhook",
        "description": "Get detailed information about a specific webhook."
      },
      {
        "name": "create_webhook",
        "description": "Create a new webhook for event notifications."
      },
      {
        "name": "update_webhook",
        "description": "Update an existing webhook's configuration."
      },
      {
        "name": "delete_webhook",
        "description": "Delete a webhook from the MailerLite account."
      }
    ],
    "server_id": "mailerlite",
    "documentation": "mailerlite/README.md",
    "readme_content": "# MailerLite Server\n\nguMCP server implementation for interacting with the MailerLite API, supporting subscriber management, campaign automation, form creation, and email marketing features.\n\n---\n\n### Prerequisites\n\n- Python 3.11+\n- A MailerLite account with API access\n- MailerLite API key with appropriate permissions\n\n---\n\n#### How to Get Your MailerLite API Key\n\n1. Log in to your MailerLite account at [MailerLite](https://app.mailerlite.com)\n2. Click on **Integrations** option in the left side bar once logged in [Integrations](https://dashboard.mailerlite.com/integrations)\n3. Click on **API** under the MailerLite API section and click on Use\n4. Click the **Generate new token** button\n5. Give your API key a descriptive name (e.g., \"guMCP Integration\")\n6. Choose IP Restriction to \"All\" if you want to allow all IPs to access the API, else choose \"Enable IP Allowlist\" and enter the IP address of the server you want to allow.\n7. Copy the generated API key and keep it secure. You will be prompted to enter this during the authentication step.\n\n### Local Authentication\n\nLocal authentication uses your MailerLite API key. The credentials will be stored securely at:\n\n```\nlocal_auth/credentials/mailerlite/\n```\n\nTo authenticate and save credentials for local testing, run:\n\n```bash\npython src/servers/mailerlite/main.py auth\n```\n\nThis will prompt you to enter your MailerLite API key. After successful authentication, your credentials will be stored securely for reuse.\n\n---\n\n### Supported Tools\n\nThis server exposes the following tools for interacting with MailerLite:\n\n#### Subscriber Management\n\n- `list_all_subscribers` \u2013 List all subscribers with optional filtering and pagination\n- `create_subscriber` \u2013 Add a new subscriber with custom fields\n- `update_subscriber` \u2013 Update an existing subscriber's information\n- `get_subscriber` \u2013 Retrieve details of a specific subscriber\n- `delete_subscriber` \u2013 Remove a subscriber from your list\n\n#### Group Management\n\n- `list_groups` \u2013 List all groups with optional filtering and sorting\n- `create_group` \u2013 Create a new subscriber group\n- `update_group` \u2013 Update an existing group's name\n- `delete_group` \u2013 Remove a group\n- `get_group_subscribers` \u2013 Get subscribers belonging to a specific group\n- `assign_subscriber_to_group` \u2013 Add a subscriber to a group\n- `unassign_subscriber_from_group` \u2013 Remove a subscriber from a group\n\n#### Field Management\n\n- `list_fields` \u2013 List all custom fields\n- `create_field` \u2013 Create a new custom field\n- `update_field` \u2013 Update an existing field\n- `delete_field` \u2013 Remove a custom field\n\n#### Campaign Management\n\n- `list_campaigns` \u2013 List all campaigns with optional filtering\n- `get_campaign` \u2013 Get details of a specific campaign\n- `create_campaign` \u2013 Create a new email campaign\n- `update_campaign` \u2013 Update an existing campaign\n- `schedule_campaign` \u2013 Schedule a campaign for delivery\n- `cancel_campaign` \u2013 Cancel a scheduled campaign\n- `delete_campaign` \u2013 Delete a campaign\n- `list_campaign_languages` \u2013 Get available languages for campaigns\n\n#### Form Management\n\n- `list_forms` \u2013 List all forms with optional filtering and pagination\n- `get_form` \u2013 Get details of a specific form\n- `update_form` \u2013 Update a form's name\n- `delete_form` \u2013 Delete a form\n\n#### Webhook Management\n\n- `list_webhooks` \u2013 List all webhooks\n- `get_webhook` \u2013 Get details of a specific webhook\n- `create_webhook` \u2013 Create a new webhook\n- `update_webhook` \u2013 Update an existing webhook\n- `delete_webhook` \u2013 Delete a webhook\n\n---\n\n### Run\n\n#### Local Development\n\nYou can launch the server for local development using:\n\n```bash\n./start_sse_dev_server.sh\n```\n\nThis will start the MCP server and make it available for integration and testing.\n\nYou can also start the local client using:\n\n```bash\npython RemoteMCPTestClient.py --endpoint http://localhost:8000/mailerlite/local\n```\n\n---\n\n### Notes\n\n- Ensure your MailerLite API key has the necessary permissions for the operations you want to perform\n- All API calls include proper error handling and response validation\n- This server is designed to integrate with guMCP agents for tool-based LLM workflows\n\n---\n\n### Resources\n\n- [MailerLite API Documentation](https://developers.mailerlite.com/)\n- [MailerLite Help Center](https://www.mailerlite.com/help)\n- [MailerLite Dashboard](https://app.mailerlite.com)\n"
  },
  "sendgrid": {
    "name": "SendGrid guMCP Server",
    "icon": "assets/icon.png",
    "description": "Interact with SendGrid email API for sending emails, managing templates, contacts, and more",
    "tools": [
      {
        "name": "send_email",
        "description": "Send an email using SendGrid"
      },
      {
        "name": "get_email_stats",
        "description": "Get email statistics from SendGrid"
      },
      {
        "name": "create_template",
        "description": "Create a new email template"
      },
      {
        "name": "list_templates",
        "description": "List all email templates"
      },
      {
        "name": "add_contact",
        "description": "Add a contact to SendGrid"
      },
      {
        "name": "manage_suppression",
        "description": "Add or remove email from suppression list"
      }
    ],
    "server_id": "sendgrid",
    "documentation": "sendgrid/README.md",
    "readme_content": "# SendGrid Server\n\nguMCP server implementation for interacting with SendGrid's email API.\n\n### Prerequisites\n\n- Python 3.11+\n- A SendGrid API key (obtain from [SendGrid Dashboard](https://app.sendgrid.com/settings/api_keys))\n\n### Features\n\n- Send emails with customizable content and sender information\n- Use email templates with dynamic variables\n- Schedule email sending for future delivery\n- Retrieve email statistics and performance metrics\n- Manage contacts in your SendGrid marketing lists\n- Control email suppression lists (bounces, blocks, spam reports, unsubscribes)\n\n### Local Authentication\n\nTo set up and verify authentication, run:\n\n```bash\npython src/servers/sendgrid/main.py auth\n```\n\nYou will be prompted to enter your SendGrid API key.\n"
  },
  "instacart": {
    "name": "Instacart guMCP Server",
    "icon": "assets/icon.png",
    "description": "Create shopping lists and recipes on Instacart",
    "tools": [
      {
        "name": "create_shopping_list",
        "description": "Create a shopping list page on Instacart"
      },
      {
        "name": "create_recipe",
        "description": "Create a recipe page on Instacart"
      }
    ],
    "server_id": "instacart",
    "documentation": "instacart/README.md",
    "readme_content": "# Instacart Server\n\nguMCP server implementation for interacting with Instacart's API.\n\n### Prerequisites\n\n- Python 3.11+\n- An Instacart API key (obtain from [Instacart Developer Platform](https://docs.instacart.com/developer_platform_api/))\n\n### Features\n\n- Create shopping lists with:\n  - Custom titles and instructions\n  - Product items with quantities and units\n  - Custom display text for items\n  - Partner linkback URLs\n- Create recipes with:\n  - Ingredients and measurements\n  - Cooking instructions\n  - Author information\n  - Cooking time and servings\n  - Pantry items integration\n\n### Local Authentication\n\nTo set up and verify authentication, run:\n\n```bash\npython src/servers/instacart/main.py auth\n```\n\nYou will be prompted to enter in your Instacart API key\n\n### Run\n\n#### Local Development\n\n```bash\npython src/servers/local.py --server instacart --user-id local\n```\n"
  },
  "firecrawl": {
    "name": "Firecrawl guMCP Server",
    "icon": "assets/icon.png",
    "description": "Web scraping, crawling, and data extraction using Firecrawl API",
    "tools": [
      {
        "name": "scrape_url",
        "description": "Scrape a single URL with Firecrawl"
      },
      {
        "name": "batch_scrape",
        "description": "Scrape multiple URLs in a batch with Firecrawl"
      },
      {
        "name": "get_batch_status",
        "description": "Check the status of a batch scrape job"
      },
      {
        "name": "get_batch_error",
        "description": "Get errors from a batch scrape job"
      },
      {
        "name": "crawl_website",
        "description": "Crawl a website starting from a base URL"
      },
      {
        "name": "get_crawl_status",
        "description": "Check the status of a crawl job"
      },
      {
        "name": "cancel_crawl",
        "description": "Cancel an ongoing crawl job"
      },
      {
        "name": "map_website",
        "description": "Map all URLs on a website"
      },
      {
        "name": "extract_data",
        "description": "Extract structured data from URLs"
      },
      {
        "name": "get_extract_status",
        "description": "Check the status of an extract job"
      },
      {
        "name": "search",
        "description": "Search the web and get full page content for search results"
      },
      {
        "name": "check_credit_usage",
        "description": "Check your Firecrawl credit usage"
      }
    ],
    "server_id": "firecrawl",
    "documentation": "firecrawl/README.md",
    "readme_content": "# Firecrawl Server\n\nguMCP server implementation for interacting with Firecrawl's API for web scraping, crawling, and data extraction.\n\n### Prerequisites\n\n- Python 3.11+\n- A Firecrawl API token (obtain from [Firecrawl](https://firecrawl.dev/))\n\n### Local Authentication\n\nTo set up and verify authentication, run:\n\n```bash\npython src/servers/firecrawl/main.py auth\n```\n\nYou will be prompted to enter your Firecrawl API token.\n"
  },
  "onedrive": {
    "name": "OneDrive guMCP Server",
    "icon": "assets/icon.png",
    "description": "Manage files and folders in Microsoft OneDrive",
    "tools": [
      {
        "name": "list_files",
        "description": "Lists files and folders in a OneDrive directory"
      },
      {
        "name": "upload_file",
        "description": "Uploads a file to OneDrive"
      },
      {
        "name": "download_file",
        "description": "Downloads a file from OneDrive"
      },
      {
        "name": "create_folder",
        "description": "Creates a new folder in OneDrive"
      },
      {
        "name": "delete_item",
        "description": "Deletes a file or folder from OneDrive"
      },
      {
        "name": "search_files",
        "description": "Searches for files in OneDrive"
      },
      {
        "name": "get_file_sharing_link",
        "description": "Gets sharing link for a OneDrive file"
      }
    ],
    "server_id": "onedrive",
    "documentation": "onedrive/README.md",
    "readme_content": "# OneDrive Server\n\nguMCP server implementation for interacting with Microsoft OneDrive.\n\n### Prerequisites\n\n- Python 3.11+\n- A Microsoft Entra ID (formerly Azure AD) application registration\n- OAuth 2.0 credentials with the following scopes:\n  - https://graph.microsoft.com/.default\n  - offline_access\n\n### Features\n\n- List files and folders in OneDrive\n- Upload files to OneDrive\n- Download files from OneDrive\n- Create new folders\n- Delete files and folders\n- Search for files\n- Generate sharing links (view-only or edit access)\n\n### Local Authentication\n\n1. [Register a new application in Microsoft Entra ID](https://learn.microsoft.com/en-us/entra/identity-platform/quickstart-register-app?tabs=certificate%2Cexpose-a-web-api)\n2. Add the required Microsoft Graph API permissions. Add it as a \"Delegated\" permission. (Files.ReadWrite.All)\n3. Configure a redirect URI for your application (e.g., http://localhost:8080)\n4. Get your application's client ID and client secret\n5. Create an `oauth.json` file:\n\n```\nlocal_auth/oauth_configs/onedrive/oauth.json\n```\n\nCreate the following file with the relevant attributes for your app:\n\n```json\n{\n  \"client_id\": \"your-client-id\",\n  \"client_secret\": \"your-client-secret\",\n  \"redirect_uri\": \"your-redirect-uri\" e.g. `http://localhost:8080`\n}\n```\n\n6. To set up and verify authentication, run:\n\n```bash\npython src/servers/onedrive/main.py auth\n```\n\n### Run\n\n#### Local Development\n\n```bash\npython src/servers/local.py --server onedrive --user-id local\n```\n\n### Available Tools\n\n1. `list_files`\n\n   - Lists files and folders in a specified OneDrive directory\n   - Default path is root \"/\"\n\n2. `upload_file`\n\n   - Uploads a local file to OneDrive\n   - Requires local file path and destination path\n\n3. `download_file`\n\n   - Downloads a file from OneDrive to local storage\n   - Requires OneDrive file path and local destination path\n\n4. `create_folder`\n\n   - Creates a new folder in OneDrive\n   - Requires parent folder path and new folder name\n\n5. `delete_item`\n\n   - Deletes a file or folder from OneDrive\n   - Requires path to the item to delete\n\n6. `search_files`\n\n   - Searches for files in OneDrive\n   - Requires search term\n\n7. `get_file_sharing_link`\n   - Generates a sharing link for a file\n   - Can create view-only or edit links\n   - Requires file path\n\n### \ud83d\udcce Notes\n\n- Ensure your Microsoft Entra ID application has the correct API permissions (Files.ReadWrite.All) configured.\n- The OAuth configuration file should be kept secure and not committed to version control.\n- Make sure your redirect URI matches exactly what's configured in your Microsoft Entra ID application.\n\n### \ud83d\udcda Resources\n\n- [Microsoft Graph API Documentation](https://learn.microsoft.com/en-us/graph/overview)\n- [OneDrive API Reference](https://learn.microsoft.com/en-us/onedrive/developer/rest-api/)\n"
  },
  "pagerduty": {
    "name": "PagerDuty guMCP Server",
    "icon": "assets/icon.png",
    "description": "Interact with PagerDuty incident management and on-call scheduling",
    "tools": [
      {
        "name": "get_user",
        "description": "Get details about an existing user in PagerDuty"
      },
      {
        "name": "list_incidents",
        "description": "List existing incidents from PagerDuty"
      },
      {
        "name": "list_services",
        "description": "List existing services from PagerDuty"
      },
      {
        "name": "list_schedules",
        "description": "List on-call schedules from PagerDuty"
      },
      {
        "name": "create_schedule",
        "description": "Create a new on-call schedule in PagerDuty"
      },
      {
        "name": "get_schedule",
        "description": "Get details about an existing schedule in PagerDuty"
      },
      {
        "name": "delete_schedule",
        "description": "Delete an on-call schedule in PagerDuty"
      },
      {
        "name": "list_oncalls",
        "description": "List on-call entries from PagerDuty"
      },
      {
        "name": "list_notifications",
        "description": "List notifications from PagerDuty"
      }
    ],
    "server_id": "pagerduty",
    "documentation": "pagerduty/README.md",
    "readme_content": "# PagerDuty Server\n\nguMCP server implementation for interacting with PagerDuty incident management and on-call scheduling.\n\n## Prerequisites\n\n- Python 3.11+\n- A PagerDuty account with API access\n- PagerDuty API credentials ([PagerDuty API Documentation](https://developer.pagerduty.com))\n\n## OAuth Configuration\n\n1. In your PagerDuty developer portal, click on `New App`\n2. Choose OAuth 2.0 in functionality and fill others as required\n3. Click on register app > choose classic user oauth\n4. Add required redirect URL and scope and click on register\n\n## Local Authentication\n\nLocal authentication uses OAuth 2.0 for PagerDuty:\n\n```json\nlocal_auth/oauth_configs/pagerduty/oauth.json\n```\n\nCreate the following file with the relevant attributes for your app:\n\n```json\n{\n  \"client_id\": \"xxxxxxxxxxxxxxxxxxxxx\",\n  \"client_secret\": \"xxxxxxxxxxxxxxxxxxxxx\",\n  \"redirect_uri\": \"xxxxxxxxxxxxxxxxxxxxx\"\n}\n```\n\nWhen authorizing users, the server will automatically:\n\n1. Redirect to PagerDuty's authorization URL with your configured credentials\n2. Exchange the received code for an access token using PagerDuty's OAuth endpoints\n\nFor local development, you can authenticate using:\n\n```bash\npython src/servers/pagerduty/main.py auth\n```\n\nThis will launch a browser-based authentication flow to obtain and save credentials.\n"
  },
  "klaviyo": {
    "name": "Klaviyo guMCP Server",
    "icon": "assets/icon.png",
    "description": "Interact with Klaviyo for email marketing, customer engagement, and audience management",
    "tools": [
      {
        "name": "create_profile",
        "description": "Creates a new profile with the specified attributes in Klaviyo."
      },
      {
        "name": "get_profile",
        "description": "Retrieves a specific profile by its ID from the Klaviyo account."
      },
      {
        "name": "get_profiles",
        "description": "Retrieves all profiles from the Klaviyo account."
      },
      {
        "name": "update_profile",
        "description": "Updates an existing profile with the given profile ID."
      },
      {
        "name": "get_campaign",
        "description": "Retrieves a specific campaign by its ID from the Klaviyo account."
      },
      {
        "name": "list_campaigns",
        "description": "Returns campaigns based on the selected channel filter."
      },
      {
        "name": "update_campaign",
        "description": "Updates an existing campaign with the given campaign ID."
      },
      {
        "name": "send_campaign",
        "description": "Triggers a campaign to send asynchronously."
      },
      {
        "name": "delete_campaign",
        "description": "Deletes a campaign with the given campaign ID."
      },
      {
        "name": "create_list",
        "description": "Creates a new list in Klaviyo."
      },
      {
        "name": "get_list",
        "description": "Gets a specific list by its ID."
      },
      {
        "name": "get_lists",
        "description": "Retrieves all lists from the Klaviyo account."
      },
      {
        "name": "get_list_profiles",
        "description": "Gets all profiles within a list with the given list ID."
      },
      {
        "name": "add_profiles_to_list",
        "description": "Adds profiles to a list with the given list ID."
      },
      {
        "name": "remove_profiles_from_list",
        "description": "Removes profiles from a list with the given list ID."
      },
      {
        "name": "list_metrics",
        "description": "Gets all metrics in a Klaviyo account with filtering options."
      },
      {
        "name": "get_metric",
        "description": "Gets a specific metric by its ID."
      }
    ],
    "server_id": "klaviyo",
    "documentation": "klaviyo/README.md",
    "readme_content": "# Klaviyo Server\n\nguMCP server implementation for interacting with Klaviyo for email marketing, customer engagement, and audience management.\n\n---\n\n### \ud83d\ude80 Prerequisites\n\n- Python 3.11+\n- A **Klaviyo Account** \u2013 [Sign up here](https://www.klaviyo.com/)\n\n---\n\n### \ud83d\udd10 Klaviyo API Setup (First-time Setup)\n\n1. **Log in to your [Klaviyo Dashboard](https://www.klaviyo.com/dashboard)**\n2. Go to **Integrations** \u2192 **[Manage Apps](https://www.klaviyo.com/manage-apps)**\n3. Click on **\"Create App\"**\n4. Fill out:\n   - **App Name**: e.g., `guMCP Integration`\n   - Copy the generated **Client ID** and **Client Secret**\n5. Click **Continue**\n6. Select the needed scopes:\n   - `lists:read`\n   - `lists:write`\n   - `profiles:write`\n   - `profiles:read`\n   - `campaigns:write`\n   - `campaigns:read`\n   - `metrics:read`\n7. Add your **Redirect URI**\n8. Click **Save**\n\n---\n\n### \ud83d\udcc4 Local OAuth Credentials\n\nCreate a file named `oauth.json` in your directory (local_auth/oauth_configs/klaviyo/) with the following content:\n\n```json\n{\n  \"client_id\": \"your-client-id-from-app-creation\", \n  \"client_secret\": \"your-client-secret-from-app-creation\",\n  \"redirect_uri\": \"your-redirect-uri-same-as-in-app-settings\"\n}\n```\n\n---\n\n### \ud83d\udd13 Authenticate with Klaviyo\n\nRun the following command to initiate the OAuth login:\n\n```bash\npython src/servers/klaviyo/main.py auth\n```\n\nThis will open your browser and prompt you to log in to Klaviyo. After successful authentication, the access credentials will be saved locally to:\n\n```\nlocal_auth/credentials/klaviyo/local_credentials.json\n```\n\n---\n\n### \ud83d\udee0 Features\n\nThis server exposes tools grouped into the following categories:\n\n#### \ud83d\udc64 Profile Management\n\n- `create_profile` \u2013 Create a new profile with attributes\n- `get_profile` \u2013 Get details of a specific profile\n- `get_profiles` \u2013 Retrieve all profiles with filtering\n- `update_profile` \u2013 Update an existing profile\n\n#### \ud83d\udce7 Campaign Management\n\n- `get_campaign` \u2013 Retrieve campaign details\n- `list_campaigns` \u2013 List campaigns with filtering\n- `update_campaign` \u2013 Modify an existing campaign\n- `send_campaign` \u2013 Trigger a campaign to send\n- `delete_campaign` \u2013 Remove a campaign\n\n#### \ud83d\udccb List Management\n\n- `create_list` \u2013 Create a new list\n- `get_list` \u2013 Get details of a specific list\n- `get_lists` \u2013 Retrieve all lists with filtering\n- `get_list_profiles` \u2013 Get profiles in a list\n- `add_profiles_to_list` \u2013 Add profiles to a list\n- `remove_profiles_from_list` \u2013 Remove profiles from a list\n\n#### \ud83d\udcca Analytics\n\n- `list_metrics` \u2013 List metrics with filtering\n- `get_metric` \u2013 Get details of a specific metric\n\n---\n\n### \u25b6\ufe0f Running the Server and Client\n\n#### 1. Start the Server\n\n```bash\n./start_sse_dev_server.sh\n```\n\nMake sure you've already authenticated using the `auth` command.\n\n#### 2. Run the Client\n\n```bash\npython tests/clients/RemoteMCPTestClient.py --endpoint=http://localhost:8000/klaviyo/local\n```\n\n---\n\n### \ud83d\udccc Notes on Klaviyo API Usage\n\n- The API uses a Bearer token authentication\n- Most requests use JSON API format\n- Rate limits apply (consult Klaviyo's API documentation)\n- Email templates can be created and reused\n- Profiles can have custom attributes beyond standard fields"
  },
  "linear": {
    "name": "Linear guMCP Server",
    "icon": "assets/icon.png",
    "description": "Interact with Linear issue tracking and project management",
    "tools": [
      {
        "name": "search_issues",
        "description": "Search for issues in Linear"
      },
      {
        "name": "create_issue",
        "description": "Create a new issue in Linear"
      },
      {
        "name": "update_issue",
        "description": "Update an existing issue in Linear"
      }
    ],
    "server_id": "linear",
    "documentation": "linear/README.md",
    "readme_content": "# Linear Server\n\nguMCP server implementation for interacting with Linear issue tracking.\n\n### Prerequisites\n\n- Python 3.11+\n- A Linear App ([Linear OAuth Authentication](https://developers.linear.app/docs/oauth/authentication))\n\n### Local Authentication\n\nLocal authentication uses a OAuth Configuration JSON file:\n\n```json\nlocal_auth/oauth_configs/linear/oauth.json\n```\n\nCreate the following file with the relevant attributes for your app:\n\n```json\n{\n  \"client_id\": \"xxxxxxxxxxxxxxxxxxxxx\",\n  \"client_secret\": \"xxxxxxxxxxxxxxxxxxxxx\",\n  \"redirect_uri\": \"xxxxxxxxxxxxxxxxxxxxx\"\n}\n```\n\nWhen authorizing users, the server will automatically:\n\n1. Redirect to Linear's authorization URL with your configured credentials\n2. Exchange the received code for an access token using Linear's OAuth endpoints\n\nFor local development, you can authenticate using:\n\n```bash\npython src/servers/linear/main.py auth\n```\n\nThis will launch a browser-based authentication flow to obtain and save credentials.\n"
  },
  "canva": {
    "name": "Canva guMCP Server",
    "icon": "assets/icon.png",
    "description": "Interact with Canva designs, folders, and comments using the Canva API",
    "resources": [
      {
        "name": "designs",
        "description": "Canva designs created by the user or shared with them",
        "required_scopes": [
          "design:meta:read",
          "design:content:read",
          "design:content:write"
        ]
      }
    ],
    "tools": [
      {
        "name": "get_user_profile",
        "description": "Get the current user's profile information including display name",
        "required_scopes": [
          "profile:read"
        ]
      },
      {
        "name": "get_user_details",
        "description": "Get the current user's details including user ID and team ID",
        "required_scopes": [
          "profile:read"
        ]
      },
      {
        "name": "get_thread",
        "description": "Get metadata for a comment thread on a design",
        "required_scopes": [
          "comment:read"
        ]
      },
      {
        "name": "create_reply",
        "description": "Reply to a comment on a design",
        "required_scopes": [
          "comment:write"
        ]
      },
      {
        "name": "create_thread",
        "description": "Create a new comment thread on a design",
        "required_scopes": [
          "comment:write"
        ]
      },
      {
        "name": "list_replies",
        "description": "List the replies to a comment on a design",
        "required_scopes": [
          "comment:read"
        ]
      },
      {
        "name": "get_reply",
        "description": "Get a specific reply to a comment",
        "required_scopes": [
          "comment:read"
        ]
      },
      {
        "name": "get_design",
        "description": "Get the metadata for one of the user's designs",
        "required_scopes": [
          "design:meta:read"
        ]
      },
      {
        "name": "list_designs",
        "description": "List all the user's designs with optional filtering and sorting",
        "required_scopes": [
          "design:meta:read"
        ]
      },
      {
        "name": "create_design",
        "description": "Create a new Canva design with optional type, asset, and title",
        "required_scopes": [
          "design:content:write"
        ]
      },
      {
        "name": "create_folder",
        "description": "Create a new folder in the user's Projects",
        "required_scopes": [
          "folder:write"
        ]
      },
      {
        "name": "get_folder",
        "description": "Get the metadata for a folder",
        "required_scopes": [
          "folder:read"
        ]
      },
      {
        "name": "update_folder",
        "description": "Update a folder's metadata (name)",
        "required_scopes": [
          "folder:write"
        ]
      },
      {
        "name": "delete_folder",
        "description": "Delete a folder and move its contents to Trash",
        "required_scopes": [
          "folder:write"
        ]
      }
    ],
    "server_id": "canva",
    "documentation": "canva/README.md",
    "readme_content": "# Canva Server\n\nguMCP server implementation for interacting with the **Canva API**.\n\n---\n\n### \ud83d\udce6 Prerequisites\n\n- Python 3.11+\n- A **Canva Developer Account** \u2013 [Sign up here](https://www.canva.com/developers/)\n- A registered **OAuth Integration** with OAuth 2.0 credentials\n\n---\n\n### \ud83d\udd10 Canva OAuth Integration Setup (First-time Setup)\n\n1. **Go to the [Canva Developers Page](https://www.canva.com/developers/)** and sign in.\n2. Navigate to the **Integrations** tab.\n3. If you haven't already, complete the **Multi-Factor Authentication (MFA)** setup as it's required to create an integration.\n4. Click on **\"Create an integration\"** and select relevant type from **public** or **private**\n5. Fill out the basic integration details:\n   - **Integration name**\n   - **Scopes**\n   - **Redirect URI** \u2013 e.g. `http://127.0.0.1:8080` for local development\n6. Generate Client Secret:\n   - Copy your **Client ID**\n   - Click on **Generate Secret** and copy the secret token\n   - Make sure `http://127.0.0.1:8080` is listed in the Redirect URIs\n7. Go to the **Scopes** tab and enable the required scopes:\n   - `app:read`, `app:write`\n   - `design:content:read`, `design:meta:read`, `design:content:write`\n   - `design:permission:read`, `design:permission:write`\n   - `folder:read`, `folder:write`\n   - `folder:permission:read`, `folder:permission:write`\n   - `asset:read`, `asset:write`\n   - `comment:read`, `comment:write`\n   - `brandtemplate:meta:read`, `brandtemplate:content:read`\n   - `profile:read`\n\n---\n\n### \ud83d\udcc4 Local OAuth Credentials\n\nCreate a file at:\n\n```\nlocal_auth/oauth_configs/canva/oauth.json\n```\n\nWith content like:\n\n```json\n{\n  \"client_id\": \"your-client-id\",\n  \"client_secret\":\"your-client-secret\",\n  \"redirect_uri\": \"your-redirect-uri\" e.g. `http://127.0.0.1:8080`\n}\n```\n\n---\n\n### \ud83d\udd13 Authenticate with Canva\n\nRun the following command to initiate the OAuth flow:\n\n```bash\npython src/servers/canva/main.py auth\n```\n\nThis will open a browser and ask you to authenticate via Canva. On success, your credentials will be saved locally for future use.\n\n---\n\n### \ud83d\udee0\ufe0f Supported Tools\n\n#### \ud83d\udc64 User Management\n- `get_user_profile` \u2013 Get the current user's profile information\n- `get_user_details` \u2013 Get user details including IDs\n\n#### \ud83d\udcac Comment Management\n- `get_thread` \u2013 Get metadata for a comment thread\n- `create_reply` \u2013 Reply to a comment\n- `create_thread` \u2013 Create new comment thread\n- `list_replies` \u2013 List comment replies\n- `get_reply` \u2013 Get specific reply\n\n#### \ud83c\udfa8 Design Management\n- `get_design` \u2013 Get design metadata\n- `list_designs` \u2013 List all designs with filtering\n- `create_design` \u2013 Create new design\n\n#### \ud83d\udcc1 Folder Management\n- `create_folder` \u2013 Create new folder\n- `get_folder` \u2013 Get folder metadata\n- `update_folder` \u2013 Update folder name\n- `delete_folder` \u2013 Delete folder\n\n---\n\n### \u25b6\ufe0f Run\n\n#### Local Development\n\nStart the server locally using:\n\n```bash\n./start_sse_dev_server.sh\n```\n\nStart the local client using:\n\n```bash\npython RemoteMCPTestClient.py --endpoint http://localhost:8000/canva/local\n```\n\n---\n\n### \ud83d\udcce Notes\n\n- Ensure your Canva app has the correct **OAuth scopes** enabled:\n  - `app:read`, `app:write`\n  - `design:content:read`, `design:meta:read`, `design:content:write`\n  - `design:permission:read`, `design:permission:write`\n  - `folder:read`, `folder:write`\n  - `folder:permission:read`, `folder:permission:write`\n  - `asset:read`, `asset:write`\n  - `comment:read`, `comment:write`\n  - `brandtemplate:meta:read`, `brandtemplate:content:read`\n  - `profile:read`\n- If testing with multiple users or environments, use distinct `user_id` values\n- Add any external API keys to a `.env` file if needed\n\n---\n\n### \ud83d\udcda Resources\n\n- [Canva API Documentation](https://www.canva.com/developers/docs/)\n- [Canva OAuth 2.0 Guide](https://www.canva.com/developers/docs/oauth-2-0/)\n"
  },
  "intercom": {
    "name": "Intercom guMCP Server",
    "icon": "assets/icon.png",
    "description": "Interact with Intercom customer messaging and support platform",
    "tools": [
      {
        "name": "search_contacts",
        "description": "Search for contacts in Intercom by name or email"
      },
      {
        "name": "create_contact",
        "description": "Create a new contact in Intercom"
      },
      {
        "name": "create_conversation",
        "description": "Create a new conversation in Intercom"
      },
      {
        "name": "reply_to_conversation",
        "description": "Reply to an existing conversation in Intercom"
      },
      {
        "name": "add_tags_to_conversation",
        "description": "Add tags to an existing conversation"
      },
      {
        "name": "remove_tags_from_conversation",
        "description": "Remove tags from an existing conversation"
      },
      {
        "name": "list_admins",
        "description": "List all admins/team members in the Intercom workspace"
      },
      {
        "name": "search_companies",
        "description": "Search for companies in Intercom"
      },
      {
        "name": "create_company",
        "description": "Create a new company in Intercom"
      },
      {
        "name": "associate_contact_with_company",
        "description": "Associate a contact with a company"
      },
      {
        "name": "list_articles",
        "description": "List help center articles"
      },
      {
        "name": "search_articles",
        "description": "Search help center articles"
      },
      {
        "name": "get_article",
        "description": "Get a specific help center article by ID"
      },
      {
        "name": "create_article",
        "description": "Create a new help center article"
      },
      {
        "name": "list_tickets",
        "description": "List support tickets in Intercom"
      },
      {
        "name": "get_ticket",
        "description": "Get details of a specific support ticket"
      },
      {
        "name": "create_ticket",
        "description": "Create a new support ticket in Intercom"
      },
      {
        "name": "update_ticket",
        "description": "Update an existing support ticket in Intercom"
      },
      {
        "name": "add_comment_to_ticket",
        "description": "Add a comment to an existing support ticket"
      },
      {
        "name": "list_ticket_types",
        "description": "List all available ticket types in the Intercom workspace"
      }
    ],
    "server_id": "intercom",
    "documentation": "intercom/README.md",
    "readme_content": "# Intercom Server\n\nguMCP server implementation for interacting with Intercom customer messaging and support platform.\n\n### Prerequisites\n\n- Python 3.11+\n- An Intercom App ([Intercom OAuth Authentication](https://developers.intercom.com/building-apps/docs/setting-up-oauth))\n\n### Local Authentication\n\nLocal authentication uses a OAuth Configuration JSON file:\n\n```json\nlocal_auth/oauth_configs/intercom/oauth.json\n```\n\nCreate the following file with the relevant attributes for your app:\n\n```json\n{\n  \"client_id\": \"xxxxxxxxxxxxxxxxxxxxx\",\n  \"client_secret\": \"xxxxxxxxxxxxxxxxxxxxx\",\n  \"redirect_uri\": \"xxxxxxxxxxxxxxxxxxxxx\"\n}\n```\n\nWhen authorizing users, the server will automatically:\n\n1. Redirect to Intercom's authorization URL with your configured credentials\n2. Exchange the received code for an access token using Intercom's OAuth endpoints\n\nFor local development, you can authenticate using:\n\n```bash\npython src/servers/intercom/main.py auth\n```\n\nThis will launch a browser-based authentication flow to obtain and save credentials."
  },
  "excel": {
    "name": "Excel guMCP Server",
    "icon": "assets/icon.png",
    "description": "Interact with Microsoft Excel files stored in OneDrive",
    "resources": [
      {
        "name": "file",
        "description": "Excel workbooks stored in OneDrive",
        "required_scopes": [
          "Files.ReadWrite",
          "offline_access"
        ]
      }
    ],
    "tools": [
      {
        "name": "create_workbook",
        "description": "Create a new Excel workbook in OneDrive",
        "required_scopes": [
          "Files.ReadWrite",
          "offline_access"
        ]
      },
      {
        "name": "list_worksheets",
        "description": "List all worksheets in an Excel workbook",
        "required_scopes": [
          "Files.ReadWrite",
          "offline_access"
        ]
      },
      {
        "name": "add_worksheet",
        "description": "Add a new worksheet to an Excel workbook",
        "required_scopes": [
          "Files.ReadWrite",
          "offline_access"
        ]
      },
      {
        "name": "read_worksheet",
        "description": "Read data from a worksheet",
        "required_scopes": [
          "Files.ReadWrite",
          "offline_access"
        ]
      },
      {
        "name": "update_cells",
        "description": "Update cell values in a worksheet",
        "required_scopes": [
          "Files.ReadWrite",
          "offline_access"
        ]
      },
      {
        "name": "add_formula",
        "description": "Add a formula to a cell in a worksheet",
        "required_scopes": [
          "Files.ReadWrite",
          "offline_access"
        ]
      },
      {
        "name": "add_row",
        "description": "Add a row to the end of a worksheet",
        "required_scopes": [
          "Files.ReadWrite",
          "offline_access"
        ]
      },
      {
        "name": "add_table",
        "description": "Create a new table in a worksheet",
        "required_scopes": [
          "Files.ReadWrite",
          "offline_access"
        ]
      },
      {
        "name": "add_table_row",
        "description": "Add a row to a table",
        "required_scopes": [
          "Files.ReadWrite",
          "offline_access"
        ]
      },
      {
        "name": "find_row",
        "description": "Find a row by column value",
        "required_scopes": [
          "Files.ReadWrite",
          "offline_access"
        ]
      },
      {
        "name": "find_or_create_row",
        "description": "Find a row by column value or create it if not found",
        "required_scopes": [
          "Files.ReadWrite",
          "offline_access"
        ]
      },
      {
        "name": "update_row",
        "description": "Update a specific row in a worksheet",
        "required_scopes": [
          "Files.ReadWrite",
          "offline_access"
        ]
      },
      {
        "name": "delete_worksheet_row",
        "description": "Delete a row from a worksheet",
        "required_scopes": [
          "Files.ReadWrite",
          "offline_access"
        ]
      },
      {
        "name": "list_tables",
        "description": "List all tables in an Excel workbook",
        "required_scopes": [
          "Files.ReadWrite",
          "offline_access"
        ]
      },
      {
        "name": "get_table",
        "description": "Get table metadata",
        "required_scopes": [
          "Files.ReadWrite",
          "offline_access"
        ]
      },
      {
        "name": "list_table_rows",
        "description": "List rows in a table",
        "required_scopes": [
          "Files.ReadWrite",
          "offline_access"
        ]
      },
      {
        "name": "add_table_column",
        "description": "Add a column to a table",
        "required_scopes": [
          "Files.ReadWrite",
          "offline_access"
        ]
      },
      {
        "name": "update_table_column",
        "description": "Update data in a table column",
        "required_scopes": [
          "Files.ReadWrite",
          "offline_access"
        ]
      },
      {
        "name": "delete_table",
        "description": "Delete a table (data remains, only deletes the table object)",
        "required_scopes": [
          "Files.ReadWrite",
          "offline_access"
        ]
      },
      {
        "name": "download_workbook",
        "description": "Get a download URL for the workbook",
        "required_scopes": [
          "Files.ReadWrite",
          "offline_access"
        ]
      },
      {
        "name": "search_workbooks",
        "description": "Search for workbooks",
        "required_scopes": [
          "Files.ReadWrite",
          "offline_access"
        ]
      }
    ],
    "server_id": "excel",
    "documentation": "excel/README.md",
    "readme_content": "# Excel Server\n\nguMCP server implementation for interacting with Microsoft Excel files stored in OneDrive.\n\n### Prerequisites\n\n- Python 3.11+\n- A Microsoft account with OneDrive access\n- OAuth Application in Microsoft Entra ID (formerly Azure AD)\n\n### OAuth Setup with Microsoft Entra ID\n\n1. Sign in to the [Microsoft Azure Portal](https://portal.azure.com)\n2. Navigate to Microsoft Entra ID (Azure Active Directory) by visiting: [https://portal.azure.com/#view/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/~/Overview](https://portal.azure.com/#view/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/~/Overview)\n3. Click on **App registrations** in the left menu, then click **+ New registration**\n4. Provide a name for your application, select the appropriate account type (typically \"Accounts in any organizational directory and personal Microsoft accounts\"), and set the redirect URI to `http://localhost:8080` (type: Web)\n5. Click **Register** to create the application\n6. Copy the **Application (client) ID** displayed on the overview page - this will be your client ID\n7. Under **Certificates & secrets** in the left menu, click **+ New client secret**\n8. Provide a description, select an expiration period, and click **Add**\n9. **Important**: Immediately copy the generated secret **Value** (it will only be shown once) - this will be your client secret\n10. Navigate to **API permissions** in the left menu and click **+ Add a permission**\n11. Select **Microsoft Graph** > **Delegated permissions**\n12. Add the following permissions:\n    - `Files.ReadWrite`\n    - `Sites.ReadWrite.All`\n    - `offline_access`\n13. Click **Add permissions** and then **Grant admin consent** if you have admin rights\n\n### Local Authentication\n\nLocal authentication uses an OAuth Configuration JSON file:\n\n```json\nlocal_auth/oauth_configs/excel/oauth.json\n```\n\nCreate the following file with the relevant attributes from your Entra ID app:\n\n```json\n{\n  \"client_id\": \"your_application_client_id_here\",\n  \"client_secret\": \"your_client_secret_value_here\",\n  \"redirect_uri\": \"http://localhost:8080\"\n}\n```\n\nWhen authorizing users, the server will automatically:\n\n1. Redirect to Microsoft's authorization URL with your configured credentials\n2. Exchange the received code for an access token using Microsoft's OAuth endpoints\n\nFor local development, you can authenticate using:\n\n```bash\npython src/servers/excel/main.py auth\n```\n\nThis will launch a browser-based authentication flow to obtain and save credentials."
  },
  "reducto": {
    "name": "Reducto guMCP Server",
    "icon": "assets/icon.png",
    "description": "Document processing and data extraction API",
    "tools": [
      {
        "name": "get_version",
        "description": "Get the Reducto API version"
      },
      {
        "name": "upload_document",
        "description": "Upload a document to Reducto"
      },
      {
        "name": "parse_document",
        "description": "Parse a document using OCR"
      },
      {
        "name": "parse_document_async",
        "description": "Parse a document asynchronously"
      },
      {
        "name": "get_job_status",
        "description": "Check the status of a job"
      },
      {
        "name": "cancel_job",
        "description": "Cancel a running job"
      },
      {
        "name": "split_document",
        "description": "Split a document into sections"
      },
      {
        "name": "split_document_async",
        "description": "Split a document into sections asynchronously"
      },
      {
        "name": "extract_data",
        "description": "Extract structured data from a document"
      },
      {
        "name": "extract_data_async",
        "description": "Extract structured data asynchronously"
      },
      {
        "name": "configure_webhook",
        "description": "Configure the webhook portal"
      }
    ],
    "server_id": "reducto",
    "documentation": "reducto/README.md",
    "readme_content": "# Reducto Server\n\nguMCP server implementation for interacting with Reducto's document processing API.\n\n### Prerequisites\n\n- Python 3.11+\n- A Reducto API key (for more information, see https://reducto.ai/)\n\n### Features\n\n- Document Processing:\n  - Upload PDF documents\n  - Parse documents with OCR\n  - Split documents into sections\n  - Extract structured data using schemas\n- Job Management:\n  - Check job status\n  - Cancel running jobs\n  - Synchronous and asynchronous operations\n- Webhook Configuration:\n  - Configure webhook portal for job notifications\n\n### Local Authentication\n\nTo set up and verify authentication, run:\n\n```bash\npython src/servers/reducto/main.py auth\n```\n\nYou will be prompted to enter your Reducto API key.\n"
  },
  "shopify": {
    "name": "Shopify guMCP Server",
    "icon": "assets/icon.png",
    "description": "Interact with Shopify's Admin API using GraphQL",
    "tools": [
      {
        "name": "get_shop_details",
        "description": "Gets the details of a shop in Shopify"
      },
      {
        "name": "create_product",
        "description": "Creates a product on Shopify"
      },
      {
        "name": "get_products",
        "description": "Retrieves a list of products from Shopify"
      },
      {
        "name": "get_product",
        "description": "Retrieves a single product from Shopify by product ID"
      },
      {
        "name": "delete_product",
        "description": "Deletes a product from Shopify, including all associated variants and media"
      },
      {
        "name": "get_inventory_level",
        "description": "Gets the inventory level for a specific inventory item"
      },
      {
        "name": "adjust_inventory",
        "description": "Adjusts inventory levels for a specific inventory item"
      },
      {
        "name": "update_inventory_tracking",
        "description": "Enable or disable inventory tracking for a specific inventory item"
      },
      {
        "name": "get_variant_inventory_item",
        "description": "Gets the inventory item ID for a specific product variant"
      }
    ],
    "server_id": "shopify",
    "documentation": "shopify/README.md",
    "readme_content": "# Shopify Server\n\nguMCP server implementation for interacting with Shopify's Admin API using GraphQL.\n\n## Prerequisites\n\n- Python 3.11+\n- A Shopify store (Partner or Development store)\n- A Shopify Custom App with API access\n\n## Creating a Development Store\n\n1. Log in to your Shopify partners dashboard (https://partners.shopify.com/)\n2. Go to **Stores** > **Add store**\n3. Select **Development store**\n4. Fill in the required information:\n   - Store name (will become your `your-store-name.myshopify.com` URL)\n   - Store type (Development store)\n   - Development store purpose (choose appropriate option)\n   - Login credentials\n5. Click **Save** to create your test store\n6. Once created, you can access your development store from the Stores section\n\n## Setting Up a Shopify Custom App\n\n1. Log in to your Shopify partners dashboard (https://partners.shopify.com/)\n2. Go to **Apps**\n3. Click **Create an app**\n4. Click on **Create app manually**\n5. Enter a name for your app (e.g. \"guMCP Integration\")\n6. Copy the `client id` and `client secrets`\n7. Click on **Choose Distribution** > **Public distribution** \n8. Click on **Configuration** > Add your desired **Allowed redirection URL**\n9. Select **Store** > select the store you created above\n\n## Local Authentication\n\nLocal authentication uses an OAuth Configuration JSON file:\n\n```\nlocal_auth/oauth_configs/shopify/oauth.json\n```\n\nCreate the following file with the relevant attributes for your app:\n\n```json\n{\n  \"client_id\": \"YOUR_CLIENT_ID\",\n  \"client_secret\": \"YOUR_CLIENT_SECRET\",\n  \"redirect_uri\": \"http://localhost:8080\",\n  \"custom_subdomain\": \"your-store-name\"\n}\n```\n\nNotes:\n- The `custom_subdomain` is your Shopify store name (e.g., if your Shopify store URL is `example.myshopify.com`, use `example`)\n\n### Authentication Flow\n\nTo set up and verify authentication, run:\n\n```bash\npython src/servers/shopify/main.py auth\n```\n\nThis will guide you through the authentication process and save your credentials locally.\n\n## Testing with Development Store\n\n1. Ensure your app is installed on your development store\n2. Update the `custom_subdomain` in your OAuth config to match your development store\n3. Run the authentication flow to generate credentials for your development store\n4. All API calls will now use your development store data, keeping your production data safe\n"
  },
  "browserbase": {
    "name": "Browserbase guMCP Server",
    "icon": "assets/icon.png",
    "description": "Interact with headless browsers using Browserbase for web automation and content extraction",
    "tools": [
      {
        "name": "load_webpage_tool",
        "description": "Load a webpage URL in a headless browser using Browserbase"
      }
    ],
    "server_id": "browserbase",
    "documentation": "browserbase/README.md",
    "readme_content": "# Browserbase GuMCP Server\n\nGuMCP server implementation for interacting with the **Browserbase API** for headless browser automation.\n\n---\n\n### \ud83d\udce6 Prerequisites\n\n- Python 3.11+\n- A [Browserbase](https://browserbase.com) account\n- **Browserbase API key**\n- **Browserbase Project ID**\n\n---\n\n### \ud83d\udd11 API Key & Project ID Setup\n\nTo use Browserbase services, you\u2019ll need both your API key and project ID:\n\n1. Log in to your [Browserbase dashboard](https://browserbase.com/)\n2. Navigate to **Settings** section\n3. Copy your API key and Project ID\n\n---\n\n### \ud83d\udd10 Local Authentication\n\nFor local development, securely authenticate with your API key and project ID by running:\n\n```bash\npython src/servers/browserbase/main.py auth\n```\n\nThis will prompt you to enter your **Browserbase API key** and **project ID**, which will then be securely stored for reuse.\n\n---\n\n### \ud83d\udee0\ufe0f Supported Tools\n\nThis server exposes the following tool for interacting with Browserbase:\n\n- `load_webpage_tool` \u2013 Load a webpage URL in a headless browser using Browserbase and return results\n\n---\n\n### \u25b6\ufe0f Run\n\n#### Local Development\n\nStart the server using:\n\n```bash\n./start_sse_dev_server.sh\n```\n\nThis will launch the Browserbase MCP server for local development and testing.\n\nTo test using the local client:\n\n```bash\npython RemoteMCPTestClient.py --endpoint http://localhost:8000/browserbase/local\n```\n\n---\n\n### \ud83d\udcce Notes\n\n- Ensure that both your **API key** and **project ID** are valid and stored correctly\n- Make sure you have sufficient credits in your Browserbase account\n- The server leverages **Playwright** for browser automation\n- All browser sessions are managed and automatically closed after each request\n- Each request initializes a new headless browser instance and cleans up after execution\n\n---\n\n### \ud83d\udcda Resources\n\n- [Browserbase Documentation](https://docs.browserbase.com/)\n- [Playwright Documentation](https://playwright.dev/python/docs/intro)\n- [Browserbase API Reference](https://docs.browserbase.com/api-reference)"
  },
  "typeform": {
    "name": "Typeform guMCP Server",
    "icon": "assets/icon.png",
    "description": "Retrieve Typeform forms and responses",
    "tools": [
      {
        "name": "list_workspaces",
        "description": "List all workspaces in your Typeform account"
      },
      {
        "name": "list_forms_by_workspace",
        "description": "List forms in a specific workspace"
      },
      {
        "name": "search_forms",
        "description": "Search for forms in Typeform"
      },
      {
        "name": "get_form_responses",
        "description": "Get responses for a specific form"
      }
    ],
    "server_id": "typeform",
    "documentation": "typeform/README.md",
    "readme_content": "# Typeform Server\n\nguMCP server implementation for interacting with Typeform forms and responses.\n\n### Prerequisites\n\n- Python 3.11+\n- A Typeform account (free or paid)\n- Typeform API key with the following scopes:\n  - forms:read\n  - responses:read\n  - workspaces:read\n\n### Local Authentication\n\n1. Follow the official [Typeform OAuth authentication guide](https://www.typeform.com/developers/get-started/applications/)\n2. Select the required scopes:\n   - forms:read\n   - responses:read\n   - workspaces:read\n3. Copy the generated personal access token\n4. Create a new file in the `local_auth/oauth_configs/typeform/oauth.json` directory with the following content:\n\n```json\n{\n  \"client_id\": \"xxxxxxxxxxxxxxxxxxxxx\",\n  \"client_secret\": \"xxxxxxxxxxxxxxxxxxxxx\",\n  \"redirect_uri\": \"xxxxxxxxxxxxxxxxxxxxx\"\n}\n```\n\nTo authenticate and save credentials:\n\n```bash\npython src/servers/typeform/main.py auth\n```\n\nThis will launch a guided authentication flow to save your Typeform access token securely.\n"
  },
  "clickup": {
    "name": "ClickUp guMCP Server",
    "icon": "assets/icon.png",
    "description": "Interact with ClickUp task management and project tracking",
    "resources": [
      {
        "name": "workspaces",
        "description": "ClickUp workspaces/teams that the user has access to"
      },
      {
        "name": "spaces",
        "description": "Project spaces organized within workspaces"
      }
    ],
    "tools": [
      {
        "name": "get_authenticated_user",
        "description": "Get information about the authenticated user"
      },
      {
        "name": "get_workspaces",
        "description": "Get all workspaces/teams the user has access to"
      },
      {
        "name": "get_spaces",
        "description": "Get all spaces in a workspace"
      },
      {
        "name": "get_folders",
        "description": "Get all folders in a space"
      },
      {
        "name": "get_lists",
        "description": "Get all lists in a folder or space"
      },
      {
        "name": "get_tasks",
        "description": "Get tasks from a list"
      },
      {
        "name": "get_task_by_id",
        "description": "Get a specific task by ID"
      },
      {
        "name": "create_task",
        "description": "Create a new task in a list"
      },
      {
        "name": "update_task",
        "description": "Update an existing task"
      },
      {
        "name": "add_comment",
        "description": "Add a comment to a task"
      },
      {
        "name": "create_list",
        "description": "Create a new list in a folder or space"
      },
      {
        "name": "create_folder",
        "description": "Create a new folder in a space"
      }
    ],
    "server_id": "clickup",
    "documentation": "clickup/README.md",
    "readme_content": "# ClickUp Server\n\nguMCP server implementation for interacting with ClickUp task management.\n\n### Prerequisites\n\n- Python 3.11+\n- A ClickUp App ([ClickUp API Authentication](https://clickup.com/api/developer-portal/authentication/))\n\n### Local Authentication\n\nLocal authentication uses a OAuth Configuration JSON file:\n\n```json\nlocal_auth/oauth_configs/clickup/oauth.json\n```\n\nCreate the following file with the relevant attributes for your app:\n\n```json\n{\n  \"client_id\": \"xxxxxxxxxxxxxxxxxxxxx\",\n  \"client_secret\": \"xxxxxxxxxxxxxxxxxxxxx\",\n  \"redirect_uri\": \"xxxxxxxxxxxxxxxxxxxxx\"\n}\n```\n\nWhen authorizing users, the server will automatically:\n\n1. Redirect to ClickUp's authorization URL with your configured credentials\n2. Exchange the received code for an access token using ClickUp's OAuth endpoints\n\nFor local development, you can authenticate using:\n\n```bash\npython src/servers/clickup/main.py auth\n```\n\nThis will launch a browser-based authentication flow to obtain and save credentials.\n"
  },
  "quickbooks": {
    "name": "QuickBooks guMCP Server",
    "icon": "assets/icon.png",
    "description": "Interact with QuickBooks Online for accounting and financial management",
    "tools": [
      {
        "name": "search_customers",
        "description": "Search for customers by name, email, or phone"
      },
      {
        "name": "analyze_sred",
        "description": "Analyze expenses for potential SR&ED eligibility"
      },
      {
        "name": "analyze_cash_flow",
        "description": "Analyze cash flow trends and patterns"
      },
      {
        "name": "find_duplicate_transactions",
        "description": "Identify potential duplicate transactions"
      },
      {
        "name": "analyze_customer_payment_patterns",
        "description": "Analyze customer payment behavior"
      },
      {
        "name": "generate_financial_metrics",
        "description": "Generate key financial metrics and ratios"
      }
    ],
    "server_id": "quickbooks",
    "documentation": "quickbooks/README.md",
    "readme_content": "# QuickBooks Server for guMCP\n\nThis server provides integration with QuickBooks Online for financial data access and analysis.\n\n## Overview\n\nThe QuickBooks server enables:\n\n- Access to QuickBooks resources (customers, invoices, accounts, etc.)\n- Financial analysis tools (cash flow, metrics, duplicate detection)\n- Customer payment pattern analysis\n- SR&ED expense analysis for Canadian tax credits\n\n## Prerequisites\n\n- Python 3.11+\n- A QuickBooks Online Developer account\n\n## Setup\n\n### Local Authentication\n\n1. [Create a QuickBooks Online Developer account](https://developer.intuit.com/)\n2. [Register a new application](https://developer.intuit.com/app/developer/qbo/docs/get-started)\n   - The app should have the following scopes: `com.intuit.quickbooks.accounting`, `com.intuit.quickbooks.payment`\n3. Configure a redirect URI for your application (e.g., http://localhost:8080)\n4. Get your application's client ID and client secret\n5. Local authentication uses a OAuth Configuration JSON file:\n\n```\nlocal_auth/oauth_configs/quickbooks/oauth.json\n```\n\nCreate the following file with the relevant attributes for your app:\n\n```json\n{\n  \"client_id\": \"xxxxxxxxxxxxxxxxxxxxx\",\n  \"client_secret\": \"xxxxxxxxxxxxxxxxxxxxx\",\n  \"redirect_uri\": \"http://localhost:8080\",\n  \"quickbooks_environment\": \"sandbox\" // Optional, defaults to sandbox\n}\n```\n\n6. To set up and verify authentication, run:\n\n```bash\npython src/servers/quickbooks/main.py auth\n```\n\nThis will start the OAuth flow and save your credentials locally. By default, the credentials will be stored at `~/.config/gumcp/quickbooks/local.json`. Each user's credentials are stored in separate files based on their user ID.\n\n7. To test the integration, run:\n\n```bash\npython -m tests.servers.test_runner --server=quickbooks\n```\n\n## Running the Server\n\nThere are two ways to run the QuickBooks server:\n\n### 1. Standalone Server\n\n```bash\npython src/servers/quickbooks/main.py server\n```\n\nThis runs the server in standalone mode on http://localhost:8001 using the \"local\" user ID.\n\n### 2. guMCP Local Framework\n\n```bash\npython src/servers/local.py --server quickbooks --user-id <your-user-id>\n```\n\nThis runs the server through the guMCP local framework. The `user-id` parameter determines which credentials file is used, and can use the placeholder `local`.\n\n## API Keys (Optional)\n\nFor additional security, you can use API key authentication:\n\n```bash\npython src/servers/local.py --server quickbooks --user-id <your-user-id> --api-key <your-api-key>\n```\n\nFor remote endpoints, the format is:\n\n```\nhttps://mcp.gumloop.com/quickbooks/{user_id}%3A{api_key}\n```\n\n## Credentials Storage\n\nQuickBooks credentials are stored locally at:\n\n```\n~/.config/gumcp/quickbooks/{user_id}.json\n```\n\nDifferent user IDs have separate credential files, allowing multiple QuickBooks accounts to be used with the same server.\n\n## Features\n\n### Available Tools\n\nThe QuickBooks server provides the following tools:\n\n- `search_customers`: Search for customers by name, email, or phone\n- `generate_financial_metrics`: Generate key financial metrics and ratios\n- `analyze_cash_flow`: Analyze cash flow trends and patterns\n- `find_duplicate_transactions`: Identify potential duplicate transactions\n- `analyze_customer_payment_patterns`: Analyze customer payment behavior\n\n### Available Resources\n\nThe server provides access to the following QuickBooks resources:\n\n- Customers (`quickbooks://customers`)\n- Invoices (`quickbooks://invoices`)\n- Accounts (`quickbooks://accounts`)\n- Items/Products (`quickbooks://items`)\n- Bills (`quickbooks://bills`)\n- Payments (`quickbooks://payments`)\n\n## Testing\n\n### Running Tests\n\nFrom the project root directory:\n\n```bash\n# Run tests locally\npython -m tests.servers.test_runner --server=quickbooks\n\n# For testing with the SSE server (requires the SSE server to be running)\npython tests/servers/test_runner.py --server=quickbooks --remote\n\n# For testing against a specific hosted guMCP server\npython tests/servers/test_runner.py --server=quickbooks --remote --endpoint=https://mcp.gumloop.com/quickbooks/{user_id}%3A{api_key}\n```\n\n### Test Coverage\n\nThe QuickBooks tests cover:\n\n1. Customer search functionality\n2. Cash flow analysis\n3. Duplicate transaction detection\n4. Customer payment pattern analysis\n5. Financial metrics generation\n6. Error handling\n7. Resource reading and listing\n8. Server initialization and authentication\n"
  },
  "mailchimp": {
    "name": "Mailchimp guMCP Server",
    "icon": "assets/icon.png",
    "description": "Interact with Mailchimp using the Mailchimp API, including audience management, campaign operations, subscriber management, and email marketing automation.",
    "tools": [
      {
        "name": "get_audience_list",
        "description": "List all available audiences."
      },
      {
        "name": "get_all_list",
        "description": "Get all lists available in account."
      },
      {
        "name": "list_all_campaigns",
        "description": "Get a list of all the campaigns."
      },
      {
        "name": "campaign_info",
        "description": "Get information about a particular campaign for campaign id."
      },
      {
        "name": "recent_activity",
        "description": "Get up to the previous 180 days of recent activities in a list."
      },
      {
        "name": "add_update_subscriber",
        "description": "Add or update a subscriber in a Mailchimp audience."
      },
      {
        "name": "add_subscriber_tags",
        "description": "Add tags to a Mailchimp list subscriber."
      }
    ],
    "server_id": "mailchimp",
    "documentation": "mailchimp/README.md",
    "readme_content": "# Mailchimp Server\n\nguMCP server implementation for interacting with **Mailchimp** API.\n\n---\n\n### \ud83d\udce6 Prerequisites\n\n- Python 3.11+\n- A Mailchimp account\n- OAuth 2.0 credentials from Mailchimp Developer Portal\n\n---\n\n### \ud83d\udd10 OAuth Setup\n\n1. Login to mailchimp [mailchimp.com](https://mailchimp.com)\n2. Go to Account & Billing\n3. Under Extras go to Registered Apps\n4. Click \"Register an app\" if you don't have one\n5. Add your redirect URI [for local host add ex. http://127.0.0.1:8080]\n6. Note down:\n   - Client ID\n   - Client Secret\n\n\n---\n\n### \ud83d\udd10 Local Authentication\n\nCreate a file named `oauth_configs/mailchimp/oauth.json` with the following structure:\n\n```json\n{\n  \"client_id\": \"your-client-id\",\n  \"client_secret\": \"your-client-secret\",\n  \"redirect_uri\": \"your-redirect-uri\" e.g. `http://127.0.0.1:8080`\n}   \n```\n\nTo authenticate and save credentials for local testing, run:\n\n```bash\npython src/servers/mailchimp/main.py auth\n```\n\nAfter successful authentication, your credentials will be stored securely for reuse.\n\n---\n\n### \ud83d\udee0\ufe0f Supported Tools\n\nThis server exposes the following tools for interacting with Mailchimp:\n\n#### Audience Management Tools\n- `get_audience_list` \u2013 List all available audiences\n- `get_all_list` \u2013 Get all lists available in account\n- `recent_activity` \u2013 Get up to the previous 180 days of recent activities in a list\n- `add_update_subscriber` \u2013 Add or update a subscriber in a Mailchimp audience\n- `add_subscriber_tags` \u2013 Add tags to a Mailchimp list subscriber\n\n#### Campaign Management Tools\n- `list_all_campaigns` \u2013 Get a list of all the campaigns\n- `campaign_info` \u2013 Get information about a particular campaign for campaign id\n\n---\n\n### \u25b6\ufe0f Run\n\n#### Local Development\n\nYou can launch the server for local development using:\n\n```bash\n./start_sse_dev_server.sh\n```\n\nThis will start the Mailchimp MCP server and make it available for integration and testing.\n\nYou can also start the local client using:\n\n```bash\npython RemoteMCPTestClient.py --endpoint http://localhost:8000/mailchimp/local\n```\n\n---\n\n### \ud83d\udcce Notes\n\n- The server respects Mailchimp's API rate limits:\n  - 10 requests per second\n  - 1000 requests per day on the free plan\n  - Custom limits for higher-tier plans\n- Make sure your `.env` file contains the appropriate API keys if you're using external LLM services like Anthropic\n- All operations return standardized responses with success/error information\n\n---\n\n### \ud83d\udcda Resources\n\n- [Mailchimp API Documentation](https://mailchimp.com/developer/api/)\n- [Mailchimp OAuth Guide](https://mailchimp.com/developer/marketing/guides/oauth-2/)\n- [Mailchimp Python SDK](https://mailchimp.com/developer/marketing/api/root/)\n"
  },
  "gcalendar": {
    "name": "Google Calendar guMCP Server",
    "icon": "assets/icon.png",
    "description": "Interact with Google Calendar events and schedules",
    "tools": [
      {
        "name": "list_events",
        "description": "List events from Google Calendar for a specified time range"
      },
      {
        "name": "create_event",
        "description": "Create a new event in Google Calendar"
      },
      {
        "name": "update_event",
        "description": "Update an existing event in Google Calendar"
      }
    ],
    "server_id": "gcalendar",
    "documentation": "gcalendar/README.md",
    "readme_content": "# Google Calendar Server\n\nguMCP server implementation for interacting with Google Calendar.\n\n### Prerequisites\n\n- Python 3.11+\n- A Google Cloud Project with Google Calendar API enabled\n- OAuth 2.0 credentials with the following scopes:\n  - https://www.googleapis.com/auth/calendar\n\n### Local Authentication\n\n1. [Create a new Google Cloud project](https://console.cloud.google.com/projectcreate)\n2. [Enable the Google Calendar API](https://console.cloud.google.com/workspace-api/products)\n3. [Configure an OAuth consent screen](https://console.cloud.google.com/apis/credentials/consent) (\"internal\" is fine for testing)\n4. Add OAuth scopes:\n   - https://www.googleapis.com/auth/calendar\n5. [Create an OAuth Client ID](https://console.cloud.google.com/apis/credentials/oauthclient) for application type \"Desktop App\"\n6. Download the JSON file of your client's OAuth keys\n7. Rename the key file to `oauth.json` and place into the `local_auth/oauth_configs/gcalendar/oauth.json`\n\nTo authenticate and save credentials:\n\n```bash\npython src/servers/gcalendar/main.py auth\n```\n\nThis will launch a browser-based authentication flow to obtain and save credentials.\n"
  },
  "snowflake": {
    "name": "Snowflake guMCP Server",
    "icon": "assets/icon.png",
    "description": "Interact with Snowflake data warehouse for executing SQL queries, managing tables/databases, and accessing data",
    "tools": [
      {
        "name": "create_database",
        "description": "Create a new database in Snowflake"
      },
      {
        "name": "list_databases",
        "description": "List all databases in Snowflake"
      },
      {
        "name": "create_table",
        "description": "Create a new table in Snowflake with support for constraints and indexes"
      },
      {
        "name": "list_tables",
        "description": "List all tables in a database with filtering and sorting options"
      },
      {
        "name": "describe_table",
        "description": "Describe the structure of a table in Snowflake"
      },
      {
        "name": "create_warehouse",
        "description": "Create a new warehouse in Snowflake"
      },
      {
        "name": "list_warehouses",
        "description": "List all warehouses in Snowflake"
      },
      {
        "name": "execute_query",
        "description": "Execute a SQL query on Snowflake"
      }
    ],
    "server_id": "snowflake",
    "documentation": "snowflake/README.md",
    "readme_content": "# \u2744\ufe0f Snowflake Server\n\nguMCP server implementation for interacting with **Snowflake**.\n\n---\n\n### \ud83d\udce6 Prerequisites\n\n- Python 3.11+\n- A valid Snowflake account with appropriate roles and privileges\n\n---\n\n### \ud83d\udd10 Authentication\n\nBefore using the server, you need to authenticate with your Snowflake account.\n\nTo authenticate and save credentials locally, run:\n\n```bash\npython src/servers/snowflake/main.py auth\n```\n\nYou'll be prompted to enter the following:\n\n- Username\n- Password\n- Account identifier (e.g., `abcd.us-east-1`) - you can find this by following the [Snowflake documentation on account identifiers](https://docs.snowflake.com/en/user-guide/admin-account-identifier#finding-the-organization-and-account-name-for-an-account)\n\nThese credentials will be stored securely for reuse during development.\n\n---\n\n### \ud83d\udee0\ufe0f Supported Tools\n\nThis server exposes the following tools for interacting with Snowflake:\n\n#### \ud83d\udcc1 Database Management\n\n- `create_database` \u2013 Create a new database in Snowflake\n- `list_databases` \u2013 List all databases in Snowflake\n\n#### \ud83d\udce6 Table Management\n\n- `create_table` \u2013 Create a new table in Snowflake with support for constraints and indexes\n- `list_tables` \u2013 List all tables in a database with filtering and sorting options\n- `describe_table` \u2013 Describe the structure of a table in Snowflake\n\n#### \u2699\ufe0f Warehouse Management\n\n- `create_warehouse` \u2013 Create a new warehouse in Snowflake\n- `list_warehouses` \u2013 List all warehouses in Snowflake\n\n#### \ud83d\udd0d Query Execution\n\n- `execute_query` \u2013 Execute a SQL query on Snowflake\n\n---\n\n### \u25b6\ufe0f Run\n\n#### Local Development\n\nStart the Snowflake MCP server using:\n\n```bash\n./start_sse_dev_server.sh\n```\n\nThen run the local test client with:\n\n```bash\npython RemoteMCPTestClient.py --endpoint http://localhost:8000/snowflake/local\n```\n\n---\n\n### \ud83d\udd12 Security Best Practices\n\n- Never commit secrets or config files with sensitive data to version control\n- Use least privilege roles for all Snowflake operations\n- Enable Multi-Factor Authentication (MFA) for all user accounts\n\n---\n\n### \ud83d\udcda Resources\n\n- [Snowflake Documentation](https://docs.snowflake.com/)\n- [Snowflake Python Connector](https://docs.snowflake.com/en/user-guide/python-connector)\n- [SQL Command Reference](https://docs.snowflake.com/en/sql-reference)\n"
  },
  "gdrive": {
    "name": "Google Drive guMCP Server",
    "icon": "assets/icon.png",
    "description": "Search and access files in Google Drive",
    "tools": [
      {
        "name": "search",
        "description": "Search for files in Google Drive"
      }
    ],
    "server_id": "gdrive",
    "documentation": "gdrive/README.md",
    "readme_content": "# Google Drive Server\n\nguMCP server implementation for interacting with Google Drive.\n\n### Prerequisites\n\n- Python 3.11+\n- A Google Cloud Project with Google Drive APIs enabled\n- OAuth 2.0 credentials with the following scopes:\n  - https://www.googleapis.com/auth/drive.file\n\n### Local Authentication\n\n1. [Create a new Google Cloud project](https://console.cloud.google.com/projectcreate)\n2. [Enable the Google Drive API and Google Docs API](https://console.cloud.google.com/workspace-api/products)\n3. [Configure an OAuth consent screen](https://console.cloud.google.com/apis/credentials/consent) (\"internal\" is fine for testing)\n4. Add OAuth scopes:\n   - https://www.googleapis.com/auth/drive.file\n5. [Create an OAuth Client ID](https://console.cloud.google.com/apis/credentials/oauthclient) for application type \"Desktop App\"\n6. Download the JSON file of your client's OAuth keys\n7. Rename the key file to `oauth.json` and place into the `local_auth/oauth_configs/gdrive/oauth.json`\n\nTo authenticate and save credentials:\n\n```bash\npython src/servers/gdrive/main.py auth\n```\n\nThis will launch a browser-based authentication flow to obtain and save credentials.\n"
  },
  "youtube": {
    "name": "YouTube guMCP Server",
    "icon": "assets/icon.png",
    "description": "Interact with YouTube videos, channels, and playlists using the YouTube Data API",
    "tools": [
      {
        "name": "get_video_details",
        "description": "Get title, description, and duration of a video by ID"
      },
      {
        "name": "list_channel_videos",
        "description": "List recent videos uploaded by a channel"
      },
      {
        "name": "get_video_statistics",
        "description": "Fetch view count, likes, and comments of a video"
      },
      {
        "name": "search_videos",
        "description": "Search for videos across YouTube"
      },
      {
        "name": "get_channel_details",
        "description": "Retrieve channel metadata including title and description"
      },
      {
        "name": "list_channel_playlists",
        "description": "List playlists created by a specific channel"
      },
      {
        "name": "get_channel_statistics",
        "description": "Get subscriber count, view count, and other channel stats"
      },
      {
        "name": "list_playlist_items",
        "description": "List videos inside a specified playlist"
      },
      {
        "name": "get_playlist_details",
        "description": "Fetch metadata about a playlist (title, description, etc.)"
      }
    ],
    "server_id": "youtube",
    "documentation": "youtube/README.md",
    "readme_content": "# YouTube Server\n\nguMCP server implementation for interacting with the **YouTube Data API v3**.\n\n---\n\n### \ud83d\udce6 Prerequisites\n\n- Python 3.11+\n- A Google Cloud project with the **YouTube Data API v3 enabled**\n- OAuth 2.0 credentials configured for desktop application access\n\n---\n\n### \ud83d\udd10 Local Authentication\n\nLocal authentication uses a Google OAuth Configuration JSON file located at:\n\n```\nlocal_auth/oauth_configs/youtube/oauth.json\n```\n\nThis file can be downloaded when creating an OAuth client from the Google Cloud Console.\n\nTo authenticate and save credentials for local testing, run:\n\n```bash\npython src/servers/youtube/main.py auth\n```\n\nAfter successful authentication, your credentials will be stored securely for reuse.\n\n---\n\n### \ud83d\udee0\ufe0f Supported Tools\n\nThis server exposes the following tools for interacting with YouTube:\n\n- `get_video_details` \u2013 Get title, description, and duration of a video\n- `list_channel_videos` \u2013 List recent uploads from a channel\n- `get_video_statistics` \u2013 Get views, likes, comments for a video\n- `search_videos` \u2013 Search videos globally across YouTube\n- `get_channel_details` \u2013 Retrieve channel metadata (title, description, etc.)\n- `list_channel_playlists` \u2013 List playlists owned by a channel\n- `get_channel_statistics` \u2013 Get subscriber count and view count\n- `list_playlist_items` \u2013 List videos in a given playlist\n- `get_playlist_details` \u2013 Get title and description of a playlist\n\n---\n\n### \u25b6\ufe0f Run\n\n#### Local Development\n\nYou can launch the server for local development using:\n\n```bash\n./start_sse_dev_server.sh\n```\n\nThis will start the YouTube MCP server and make it available for integration and testing.\n\nYou can also start the local client using the following:\n\n```bash\npython RemoteMCPTestClient.py --endpoint http://localhost:8000/youtube/local\n```\n\n---\n\n### \ud83d\udcce Notes\n\n- Ensure your OAuth app has **YouTube Data API v3** access enabled in the Google Cloud console.\n- If you're testing with multiple users or environments, use different `user_id` values.\n- Make sure your `.env` file contains the appropriate API keys if you're using external LLM services like Anthropic.\n\n---\n\n### \ud83d\udcda Resources\n\n- [YouTube Data API Documentation](https://developers.google.com/youtube/v3)\n- [OAuth 2.0 in Google APIs](https://developers.google.com/identity/protocols/oauth2)\n"
  },
  "cal": {
    "name": "Cal.com guMCP Server",
    "icon": "assets/icon.png",
    "description": "Manage your Cal.com scheduling and bookings",
    "tools": [
      {
        "name": "get_me",
        "description": "Get your Cal.com user profile information"
      },
      {
        "name": "get_event_types",
        "description": "Get all event types from Cal.com"
      },
      {
        "name": "get_booking",
        "description": "Get a booking from Cal.com by its unique ID"
      },
      {
        "name": "reschedule_booking",
        "description": "Reschedule an existing booking to a new time"
      },
      {
        "name": "cancel_booking",
        "description": "Cancel an existing booking"
      },
      {
        "name": "confirm_booking",
        "description": "Confirm a pending booking"
      },
      {
        "name": "decline_booking",
        "description": "Decline a pending booking"
      },
      {
        "name": "create_booking",
        "description": "Create a booking in Cal.com"
      },
      {
        "name": "get_bookings",
        "description": "Get all bookings from Cal.com"
      },
      {
        "name": "get_schedules",
        "description": "Get all schedules from the authenticated user in Cal.com"
      },
      {
        "name": "get_availability",
        "description": "Get available time slots for scheduling"
      }
    ],
    "server_id": "cal",
    "documentation": "cal/README.md",
    "readme_content": "# Cal.com Server\n\nguMCP server implementation for interacting with Cal.com's API.\n\n### Prerequisites\n\n- Python 3.11+\n- A Cal.com API key (obtain from [Cal.com API Settings](https://app.cal.com/settings/developer/api-keys))\n\n### Features\n\n- Manage Cal.com user profile\n- Access and work with event types\n- Create and manage bookings:\n  - Create new bookings with attendee details\n  - Reschedule existing bookings\n  - Cancel bookings\n  - Confirm pending bookings\n  - Decline bookings\n- Retrieve schedules and availability\n\n### Local Authentication\n\nTo set up and verify authentication, run:\n\n```bash\npython src/servers/cal/main.py auth\n```\n\nYou will be prompted to enter your Cal.com API key.\n\n### Run\n\n#### Local Development\n\n```bash\npython src/servers/local.py --server cal --user-id local\n```\n"
  },
  "notion": {
    "name": "Notion guMCP Server",
    "icon": "assets/icon.png",
    "description": "Server for interacting with Notion",
    "tools": [
      {
        "name": "list-all-users",
        "description": "List all users"
      },
      {
        "name": "search-pages",
        "description": "Search all pages"
      },
      {
        "name": "list-databases",
        "description": "List all databases"
      },
      {
        "name": "query-database",
        "description": "Query a Notion database"
      },
      {
        "name": "get-page",
        "description": "Retrieve a page by ID"
      },
      {
        "name": "create-page",
        "description": "Create a new page in a database"
      },
      {
        "name": "append-blocks",
        "description": "Append content blocks to a page or block"
      },
      {
        "name": "get-block-children",
        "description": "List content blocks of a page or block"
      }
    ],
    "server_id": "notion",
    "documentation": "notion/README.md",
    "readme_content": "# Notion guMCP Server\n\nguMCP server implementation for interacting with Notion using OAuth authentication.\n\n---\n\n### \ud83d\udce6 Prerequisites\n\n- Python 3.11+\n- A Notion integration created at [Notion Developer Portal](https://www.notion.com/my-integrations)\n- A local OAuth config file with your Notion `client_id`, `client_secret`, and `redirect_uri`\n\nCreate a file named `oauth.json`:\n\n```json\n{\n  \"client_id\": \"your-client-id\",\n  \"client_secret\": \"your-client-secret\",\n  \"redirect_uri\": \"http://localhost:8080\"\n}\n```\n\n---\n\n### \ud83d\udd10 Authentication\n\nBefore running the server, you need to authenticate and store your OAuth token:\n\n```bash\npython main.py auth\n```\n\n---\n\n### \ud83d\udee0\ufe0f Supported Tools\n\nThis server exposes the following tools for interacting with Notion:\n\n- `list_all_users` \u2013 List all users\n- `search_pages` \u2013 Search all pages\n- `list_databases` \u2013 List all databases\n- `query_database` \u2013 Query a Notion database\n- `get_page` \u2013 Retrieve a page by ID\n- `create_page` \u2013 Create a new page in a database\n- `append_blocks` \u2013 Append content blocks to a page or block\n- `get_block_children` \u2013 List content blocks of a page or block\n\n---\n\n### \u25b6\ufe0f Run\n\n#### Local Development\n\nYou can launch the server for local development using:\n\n```bash\n./start_remote_sse_server.sh\n```\n\nThis will start the guMCP server and make it available for integration and testing.\n\nIf you have a local client for testing, you can run it like:\n\n```bash\npython RemoteMCPTestClient.py --endpoint http://localhost:8000/notion/local\n```\n\nAdjust the endpoint path as needed based on your deployment setup.\n\n---\n\n### \ud83d\udcda Resources\n\n- [Notion API Documentation](https://developers.notion.com)\n- [Official Notion Python Client](https://github.com/ramnes/notion-sdk-py)\n"
  },
  "hubspot": {
    "name": "HubSpot guMCP Server",
    "icon": "assets/icon.png",
    "description": "Interact with HubSpot CRM for managing contacts, companies, and deals",
    "resources": [
      {
        "name": "contact",
        "description": "HubSpot contacts with personal and professional information including name, email, phone, company affiliation, and other profile data"
      },
      {
        "name": "company",
        "description": "HubSpot company records with business information including name, domain, industry, size, location, and other organization details"
      },
      {
        "name": "deal",
        "description": "HubSpot deals that track sales opportunities with details on value, stage, associated contacts/companies, and pipeline progress"
      },
      {
        "name": "ticket",
        "description": "HubSpot support tickets with subject, status, priority, associated contacts, and conversation history"
      },
      {
        "name": "product",
        "description": "HubSpot product catalog items with name, description, price, SKU, and other inventory information"
      },
      {
        "name": "list",
        "description": "HubSpot contact lists that can be static (manually created) or dynamic (automatically updated based on criteria)"
      },
      {
        "name": "engagement",
        "description": "HubSpot engagements that track activities such as calls, emails, meetings, tasks, and notes related to contacts, companies, deals, or tickets"
      }
    ],
    "tools": [
      {
        "name": "list_contacts",
        "description": "List HubSpot contacts with optional filtering"
      },
      {
        "name": "create_contact",
        "description": "Create a new HubSpot contact"
      },
      {
        "name": "update_contact",
        "description": "Update an existing HubSpot contact"
      },
      {
        "name": "search_contacts",
        "description": "Search for HubSpot contacts using advanced filters"
      },
      {
        "name": "list_companies",
        "description": "List HubSpot companies with optional filtering"
      },
      {
        "name": "create_company",
        "description": "Create a new HubSpot company"
      },
      {
        "name": "update_company",
        "description": "Update an existing HubSpot company"
      },
      {
        "name": "list_deals",
        "description": "List HubSpot deals with optional filtering"
      },
      {
        "name": "create_deal",
        "description": "Create a new HubSpot deal"
      },
      {
        "name": "update_deal",
        "description": "Update an existing HubSpot deal"
      },
      {
        "name": "get_engagements",
        "description": "Get engagement data (calls, emails, meetings, etc.) for a contact"
      },
      {
        "name": "send_email",
        "description": "Send an email to a HubSpot contact"
      },
      {
        "name": "list_tickets",
        "description": "List HubSpot tickets with optional filtering"
      },
      {
        "name": "get_ticket",
        "description": "Get a specific HubSpot ticket by ID"
      },
      {
        "name": "create_ticket",
        "description": "Create a new HubSpot ticket"
      },
      {
        "name": "update_ticket",
        "description": "Update an existing HubSpot ticket"
      },
      {
        "name": "delete_ticket",
        "description": "Archive/delete a HubSpot ticket"
      },
      {
        "name": "merge_tickets",
        "description": "Merge two HubSpot tickets into one"
      },
      {
        "name": "list_products",
        "description": "List HubSpot products with optional filtering"
      },
      {
        "name": "get_product",
        "description": "Get a specific HubSpot product by ID"
      },
      {
        "name": "create_product",
        "description": "Create a new HubSpot product"
      },
      {
        "name": "update_product",
        "description": "Update an existing HubSpot product"
      },
      {
        "name": "delete_product",
        "description": "Archive/delete a HubSpot product"
      },
      {
        "name": "get_engagement",
        "description": "Get a specific HubSpot engagement by ID"
      },
      {
        "name": "list_engagements",
        "description": "List HubSpot engagements with optional filtering"
      },
      {
        "name": "get_recent_engagements",
        "description": "Get recently created or updated HubSpot engagements"
      },
      {
        "name": "get_call_dispositions",
        "description": "Get all possible dispositions for sales calls in HubSpot"
      },
      {
        "name": "create_engagement",
        "description": "Create a new HubSpot engagement (email, call, meeting, task, or note)"
      },
      {
        "name": "update_engagement",
        "description": "Update an existing HubSpot engagement"
      },
      {
        "name": "delete_engagement",
        "description": "Delete a HubSpot engagement"
      },
      {
        "name": "merge_contacts",
        "description": "Merge two HubSpot contacts into one"
      },
      {
        "name": "gdpr_delete_contact",
        "description": "Permanently delete a contact and all associated content to follow GDPR"
      }
    ],
    "server_id": "hubspot",
    "documentation": "hubspot/README.md",
    "readme_content": "# HubSpot Server\n\nguMCP server implementation for interacting with HubSpot CRM.\n\n### Prerequisites\n\n- Python 3.11+\n- A HubSpot Developer Account ([HubSpot Developer Portal](https://developers.hubspot.com/))\n- A HubSpot App with OAuth 2.0 configured\n\n### Required Scopes\n\nThe following OAuth scopes are required for the server to function:\n\n- `crm.objects.contacts.read` - Read access to contacts\n- `crm.objects.contacts.write` - Write access to contacts\n- `crm.objects.companies.read` - Read access to companies\n- `crm.objects.companies.write` - Write access to companies\n- `crm.objects.deals.read` - Read access to deals\n- `crm.objects.deals.write` - Write access to deals\n- `tickets` - Access to tickets\n- `crm.objects.line_items.read` - Read access to line items\n- `crm.objects.line_items.write` - Write access to line items\n- `crm.objects.quotes.read` - Read access to quotes\n- `crm.objects.quotes.write` - Write access to quotes\n- `crm.lists.read` - Read access to contact lists\n- `e-commerce` - Access to e-commerce functionality\n\n### Local Authentication\n\nLocal authentication uses a OAuth Configuration JSON file:\n\n```json\nlocal_auth/oauth_configs/hubspot/oauth.json\n```\n\nCreate the following file with the relevant attributes for your app:\n\n```json\n{\n  \"client_id\": \"xxxxxxxxxxxxxxxxxxxxx\",\n  \"client_secret\": \"xxxxxxxxxxxxxxxxxxxxx\",\n  \"redirect_uri\": \"xxxxxxxxxxxxxxxxxxxxx\"\n}\n```\n\nTo authenticate and save credentials:\n\n```bash\npython src/servers/hubspot/main.py auth\n```\n"
  },
  "airtable": {
    "name": "Airtable guMCP Server",
    "icon": "assets/icon.png",
    "description": "Interact with Airtable bases and records",
    "resources": [
      {
        "name": "base",
        "description": "Airtable bases (workspaces) containing multiple tables",
        "required_scopes": [
          "schema.bases:read"
        ]
      },
      {
        "name": "table",
        "description": "Airtable tables with records, fields, and views",
        "required_scopes": [
          "schema.bases:read",
          "data.records:read"
        ]
      }
    ],
    "tools": [
      {
        "name": "read_records",
        "description": "Read records from an Airtable table",
        "required_scopes": [
          "data.records:read"
        ]
      },
      {
        "name": "create_records",
        "description": "Create new records in an Airtable table",
        "required_scopes": [
          "data.records:write"
        ]
      },
      {
        "name": "update_records",
        "description": "Update existing records in an Airtable table",
        "required_scopes": [
          "data.records:write"
        ]
      },
      {
        "name": "list_bases",
        "description": "List all accessible Airtable bases with their ID, name, and permission level",
        "required_scopes": [
          "schema.bases:read"
        ]
      },
      {
        "name": "list_tables",
        "description": "List all tables in a given Airtable base",
        "required_scopes": [
          "schema.bases:read"
        ]
      },
      {
        "name": "base_schema",
        "description": "Get detailed schema for all tables in a base",
        "required_scopes": [
          "schema.bases:read"
        ]
      },
      {
        "name": "search_records",
        "description": "Search for records containing specific text in a table",
        "required_scopes": [
          "data.records:read"
        ]
      },
      {
        "name": "get_record",
        "description": "Get a single record by its ID from a table",
        "required_scopes": [
          "data.records:read"
        ]
      },
      {
        "name": "delete_records",
        "description": "Delete one or more records from a table",
        "required_scopes": [
          "data.records:write"
        ]
      },
      {
        "name": "create_table",
        "description": "Create a new table in a base",
        "required_scopes": [
          "schema.bases:write"
        ]
      },
      {
        "name": "update_table",
        "description": "Update an existing table's name or description",
        "required_scopes": [
          "schema.bases:write"
        ]
      },
      {
        "name": "create_field",
        "description": "Add a new field (column) to an existing table",
        "required_scopes": [
          "schema.bases:write"
        ]
      },
      {
        "name": "update_field",
        "description": "Update a field's metadata in a table",
        "required_scopes": [
          "schema.bases:write"
        ]
      },
      {
        "name": "create_base",
        "description": "Create a new Airtable base (workspace)",
        "required_scopes": [
          "schema.bases:write"
        ]
      },
      {
        "name": "delete_base",
        "description": "Delete an existing Airtable base",
        "required_scopes": [
          "schema.bases:write"
        ]
      }
    ],
    "server_id": "airtable",
    "documentation": "airtable/README.md",
    "readme_content": "# Airtable Server\n\nguMCP server implementation for interacting with Airtable.\n\n### Prerequisites\n\n- Python 3.11+\n- An Airtable account and API access\n- An Airtable OAuth application with the following scopes (see [Airtable OAuth documentation](https://airtable.com/developers/web/guides/oauth-integrations)):\n  - data.records:read\n  - data.records:write\n  - schema.bases:read\n  - schema.bases:write\n\n### Local Authentication\n\nLocal authentication uses a OAuth Configuration JSON file:\n\n```\nlocal_auth/oauth_configs/airtable/oauth.json\n```\n\nCreate the following file with the relevant attributes for your app:\n\n```json\n{\n  \"client_id\": \"xxxxxxxxxxxxxxxxxxxxx\",\n  \"client_secret\": \"xxxxxxxxxxxxxxxxxxxxx\",\n  \"redirect_uri\": \"https://xxxxxxxxxxxxx\"\n}\n```\n\nTo set up and verify authentication, run:\n\n```bash\npython src/servers/airtable/main.py auth\n```\n\n### Run\n\n#### Local Development\n\n```bash\npython src/servers/local.py --server airtable --user-id local\n```\n"
  },
  "perplexity": {
    "name": "Perplexity guMCP Server",
    "icon": "assets/icon.png",
    "description": "Search the web and chat with Perplexity AI",
    "tools": [
      {
        "name": "search",
        "description": "Search the web using Perplexity's API"
      },
      {
        "name": "chat",
        "description": "Send a message to Perplexity model without forcing web search"
      }
    ],
    "server_id": "perplexity",
    "documentation": "perplexity/README.md",
    "readme_content": "# Perplexity Server\n\nguMCP server implementation for interacting with Perplexity AI's API.\n\n### Prerequisites\n\n- Python 3.11+\n- A Perplexity API key (obtain from [Perplexity AI](https://www.perplexity.ai/))\n\n### Features\n\n- Web search with recency filters (hour, day, week, month, year)\n- Chat with different Perplexity models:\n  - sonar\n  - sonar-pro\n  - sonar-deep-research\n  - sonar-reasoning\n  - sonar-reasoning-pro\n- Code assistance with customizable language settings\n- Related questions retrieval\n\n### Local Authentication\n\nTo set up and verify authentication, run:\n\n```bash\npython src/servers/perplexity/main.py auth\n```\n\nYou will be prompted to enter in your Perplexity API key\n\n### Run\n\n#### Local Development\n\n```bash\npython src/servers/local.py --server perplexity --user-id local\n```\n"
  },
  "jira": {
    "name": "JIRA guMCP Server",
    "icon": "assets/icon.png",
    "description": "Interact with JIRA for project management, issue tracking, and user information access.",
    "tools": [
      {
        "name": "create_project",
        "description": "Set up a new JIRA project for a team, client, or initiative"
      },
      {
        "name": "get_project",
        "description": "Retrieve metadata about a specific project"
      },
      {
        "name": "update_project",
        "description": "Modify project details like name, lead, or description"
      },
      {
        "name": "delete_project",
        "description": "Delete an entire project and its issues"
      },
      {
        "name": "list_projects",
        "description": "List all accessible JIRA projects"
      },
      {
        "name": "get_issue_types_for_project",
        "description": "Get all valid issue types (e.g., Task, Bug, Story) for a project"
      },
      {
        "name": "create_issue",
        "description": "Create a new issue, bug, task, or story in a project"
      },
      {
        "name": "get_issue",
        "description": "Get full details of an issue (title, description, status, comments, etc.)"
      },
      {
        "name": "update_issue",
        "description": "Modify issue fields such as assignee, priority, or status"
      },
      {
        "name": "delete_issue",
        "description": "Permanently remove an issue from a project"
      },
      {
        "name": "transition_my_issue",
        "description": "Move an assigned issue to a new status (e.g., 'In Progress', 'Done')"
      },
      {
        "name": "list_issues",
        "description": "List issues by JQL query"
      },
      {
        "name": "comment_on_issue",
        "description": "Add a comment to an issue"
      },
      {
        "name": "get_myself",
        "description": "Get information about the authenticated user"
      },
      {
        "name": "get_my_issues",
        "description": "Fetch all open issues assigned to the current user"
      },
      {
        "name": "get_my_recent_activity",
        "description": "View recently updated issues the user interacted with"
      },
      {
        "name": "get_my_permissions",
        "description": "Determine what actions the user is allowed to perform in a project"
      }
    ],
    "server_id": "jira",
    "documentation": "jira/README.md",
    "readme_content": "# JIRA Server\n\nguMCP server implementation for interacting with Atlassian JIRA Cloud API.\n\n---\n\n### Prerequisites\n\n- Python 3.11+\n- A JIRA Cloud account with API access\n- OAuth 2.0 credentials configured for JIRA Cloud\n\n---\n\n### Local Authentication\n\nLocal authentication uses a JIRA OAuth Configuration JSON file located at:\n\n```\nlocal_auth/oauth_configs/jira/oauth.json\n```\n\nCreate the following file with the relevant attributes for your app:\n\n```json\n{\n  \"client_id\": \"xxxxxxxxxxxxxxxxxxxxx\",\n  \"client_secret\": \"xxxxxxxxxxxxxxxxxxxxx\",\n  \"redirect_uri\": \"http://localhost:8080\"\n}\n```\n\nTo set this up properly, follow these steps:\n\n1. Create an OAuth 2.0 (3LO) integration in your Atlassian developer account\n2. Configure the required scopes for your application:\n   - `read:jira-work`\n   - `write:jira-work`\n   - `read:jira-user`\n   - `offline_access`\n   - `manage:jira-project`\n   - `manage:jira-configuration`\n3. Set the callback URL to `http://localhost:8080`\n\nFor detailed instructions, refer to Atlassian's official documentation:\n[OAuth 2.0 (3LO) apps](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps/)\n\nTo authenticate and save credentials for local testing, run:\n\n```bash\npython src/servers/jira/main.py auth\n```\n\nThis will open a browser window for you to authorize the application. After successful authentication, your credentials will be stored securely for reuse.\n\n---\n\n### Supported Tools\n\nThis server exposes the following tools for interacting with JIRA:\n\n#### Project Management Tools\n\n- `create_project` \u2013 Set up a new JIRA project for a team, client, or initiative\n- `get_project` \u2013 Retrieve metadata about a specific project\n- `update_project` \u2013 Modify project details like name, lead, or description\n- `delete_project` \u2013 Delete an entire project and its issues\n- `list_projects` \u2013 List all accessible JIRA projects\n- `get_issue_types_for_project` \u2013 Get all valid issue types for a project\n\n#### Issue Management Tools\n\n- `create_issue` \u2013 Create a new issue, bug, task, or story in a project\n- `get_issue` \u2013 Get full details of an issue (title, description, status, comments)\n- `update_issue` \u2013 Modify issue fields such as assignee, priority, or status\n- `delete_issue` \u2013 Permanently remove an issue from a project\n- `transition_my_issue` \u2013 Move an assigned issue to a new status\n- `list_issues` \u2013 List issues by JQL query\n- `comment_on_issue` \u2013 Add a comment to an issue\n\n#### User-specific Tools\n\n- `get_myself` \u2013 Get information about the authenticated user\n- `get_my_issues` \u2013 Fetch all open issues assigned to the current user\n- `get_my_recent_activity` \u2013 View recently updated issues the user interacted with\n- `get_my_permissions` \u2013 Determine what actions the user is allowed to perform in a project\n\n---\n\n### Run\n\n#### Local Development\n\nYou can launch the server for local development using:\n\n```bash\n./start_sse_dev_server.sh\n```\n\nThis will start the MCP server and make it available for integration and testing.\n\nYou can also start the local client using the following:\n\n```bash\npython RemoteMCPTestClient.py --endpoint http://localhost:8000/jira/local\n```\n\n---\n\n### Notes\n\n- Ensure your JIRA app has all the required scopes enabled in the Atlassian developer console.\n- If creating a new project, you need administrative permissions in your JIRA instance.\n- This server is designed to integrate with guMCP agents for tool-based LLM workflows.\n- The `Cloud ID` can be obtained from your Atlassian instance URL or through the accessible resources endpoint.\n\n---\n\n### Resources\n\n- [JIRA Cloud REST API documentation](https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/)\n- [Atlassian OAuth 2.0 (3LO) documentation](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps/)\n- [JIRA JQL syntax](https://support.atlassian.com/jira-software-cloud/docs/advanced-search-reference-jql-fields/)\n- [Atlassian Document Format (ADF)](https://developer.atlassian.com/cloud/jira/platform/apis/document/structure/)\n"
  },
  "github": {
    "name": "Github GuMCP Server",
    "icon": "assets/icon.png",
    "description": "Server for interacting with Github",
    "tools": [
      {
        "name": "create_repository",
        "description": "Create a new repository"
      },
      {
        "name": "search_repositories",
        "description": "Search for repositories"
      },
      {
        "name": "list_public_user_repositories",
        "description": "List all public repositories for the given user username"
      },
      {
        "name": "list_organization_repositories",
        "description": "List all repositories for the given organization name"
      },
      {
        "name": "get_contents",
        "description": "Get the contents of a file or in a repository"
      },
      {
        "name": "list_repository_languages",
        "description": "List all languages used in a repository"
      },
      {
        "name": "add_file_to_repository",
        "description": "Add a file to a repository with a commit message"
      },
      {
        "name": "list_commits",
        "description": "List all commits for a repository by branch"
      },
      {
        "name": "get_commit",
        "description": "The api provides commit content with read access"
      },
      {
        "name": "star_repository",
        "description": "Star a repository for the authenticated user"
      },
      {
        "name": "list_stargazers",
        "description": "List all stargazers for a repository"
      },
      {
        "name": "get_stargazers_count",
        "description": "Get the number of stargazers for a repository"
      },
      {
        "name": "list_starred_repos_by_user",
        "description": "List all repositories starred by the user"
      },
      {
        "name": "list_issues",
        "description": "List all issues for a repository"
      },
      {
        "name": "get_issue",
        "description": "Get a specific issue for a repository"
      },
      {
        "name": "create_issue",
        "description": "Create a new issue for a repository"
      },
      {
        "name": "update_issue",
        "description": "Update a specific issue for a repository"
      },
      {
        "name": "add_comment_to_issue",
        "description": "Add a comment to a specific issue for a repository"
      },
      {
        "name": "list_branches",
        "description": "List all branches for a repository"
      },
      {
        "name": "list_pull_requests",
        "description": "List all pull requests for a repository"
      },
      {
        "name": "get_pull_request",
        "description": "Get a specific pull request for a repository"
      },
      {
        "name": "create_pull_request",
        "description": "Create a new pull request for a repository"
      }
    ],
    "server_id": "github",
    "documentation": "github/README.md",
    "readme_content": "# GitHub GuMCP Server\n\nGuMCP server implementation for interacting with GitHub using OAuth authentication.\n\n---\n\n### \ud83d\udce6 Prerequisites\n\n- Python 3.11+\n- A GitHub OAuth App created at [GitHub Developer Settings](https://github.com/settings/developers)\n- A local OAuth config file with your GitHub `client_id`, `client_secret`, and `redirect_uri`\n\nCreate a file named `oauth.json`:\n\n```json\n{\n  \"client_id\": \"your-client-id\",\n  \"client_secret\": \"your-client-secret\",\n  \"redirect_uri\": \"http://localhost:8080\"\n}\n```\n\n**\u26a0\ufe0f Do not commit this file to version control. Add it to your `.gitignore`.**\n\n---\n\n### \ud83d\udd10 Authentication\n\nBefore running the server, you need to authenticate and store your OAuth token:\n\n```bash\npython main.py auth\n```\n\nThis will:\n1. Print a GitHub OAuth URL for you to open in your browser.\n2. Prompt you to paste the `code` after granting access.\n3. Store the token securely using your `auth_client`.\n\nYou only need to do this once per user.\n\n---\n\n### \ud83d\udee0\ufe0f Supported Tools\n\nThis server exposes the following tools for interacting with GitHub:\n\n- `create_repository` \u2013 Create a new repository\n- `search_repositories` \u2013 Search for repositories\n- `list_public_user_repositories` \u2013 List all public repositories for the given user username\n- `list_organization_repositories` \u2013 List all repositories for the given organization name\n- `get_contents` \u2013 Get the contents of a file or in a repository\n- `list_repository_languages` \u2013 List all languages used in a repository\n- `add_file_to_repository` - Add a file to a repository with a commit message\n- `list_commits` \u2013 List all commits for a repository by branch\n- `get_commit` \u2013 The api provides commit content with read access\n- `star_repository` \u2013 Star a repository for the authenticated user\n- `list_stargazers` \u2013 List all stargazers for a repository\n- `get_stargazers_count` \u2013 Get the number of stargazers for a repository\n- `list_starred_repos_by_user` \u2013 List all repositories starred by the user\n- `list_issues` \u2013 List all issues for a repository\n- `get_issue` \u2013 Get a specific issue for a repository\n- `create_issue` \u2013 Create a new issue for a repository\n- `update_issue` \u2013 Update a specific issue for a repository\n- `add_comment_to_issue` \u2013 Add a comment to a specific issue for a repository\n- `list_branches` \u2013 List all branches for a repository\n- `list_pull_requests` \u2013 List all pull requests for a repository\n- `get_pull_request` \u2013 Get a specific pull request for a repository\n- `create_pull_request` \u2013 Create a new pull request for a repository\n\n---\n\n### \u25b6\ufe0f Run\n\n#### Local Development\n\nYou can launch the server for local development using:\n\n```bash\n./start_remote_dev_server.sh\n```\n\nThis will start the GuMCP server and make it available for integration and testing.\n\nIf you have a local client for testing, you can run it like:\n\n```bash\npython RemoteMCPTestClient.py --endpoint http://localhost:8000/github/local\n```\n\nAdjust the endpoint path as needed based on your deployment setup.\n\n---\n\n### \ud83d\udcce Notes\n\n- This implementation uses OAuth instead of a static token for improved security and multi-user support.\n- Each user's OAuth access token is securely stored via your `auth_client`.\n- The `github_oauth_client.json` file contains your app's secret credentials and should never be committed to version control.\n- This server integrates with GuMCP agents for tool-based LLM workflows.\n- Make sure you've set the Anthropic API key in your `.env` if you're using LLM toolchains.\n\n---\n\n### \ud83d\udcda Resources\n\n- [GitHub API Documentation](https://docs.github.com/en/rest)\n- [Official GitHub Python Client](https://pygithub.readthedocs.io/)\n"
  },
  "figma": {
    "name": "Figma guMCP Server",
    "icon": "assets/icon.png",
    "description": "Interact with Figma files, comments, and projects using the Figma API",
    "resources": [
      {
        "name": "projects",
        "description": "Figma projects from your teams",
        "required_scopes": [
          "files:read"
        ]
      }
    ],
    "tools": [
      {
        "name": "get_me",
        "description": "Get the authenticated user's information including ID, handle, and email",
        "required_scopes": [
          "current_user:read"
        ]
      },
      {
        "name": "get_file",
        "description": "Get a Figma file by key, including its structure and content",
        "required_scopes": [
          "file_content:read"
        ]
      },
      {
        "name": "get_file_comments",
        "description": "Get all comments for a specific Figma file",
        "required_scopes": [
          "file_comments:read"
        ]
      },
      {
        "name": "post_comment",
        "description": "Add a new comment to a Figma file",
        "required_scopes": [
          "file_comments:write"
        ]
      },
      {
        "name": "delete_comment",
        "description": "Remove a comment from a Figma file",
        "required_scopes": [
          "file_comments:write"
        ]
      },
      {
        "name": "get_comment_reactions",
        "description": "Get all reactions for a specific comment",
        "required_scopes": [
          "file_comments:read"
        ]
      },
      {
        "name": "post_comment_reaction",
        "description": "Add a reaction to a comment",
        "required_scopes": [
          "file_comments:write"
        ]
      },
      {
        "name": "delete_comment_reaction",
        "description": "Remove a reaction from a comment",
        "required_scopes": [
          "file_comments:write"
        ]
      },
      {
        "name": "get_team_projects",
        "description": "List all projects within a team",
        "required_scopes": [
          "files:read"
        ]
      },
      {
        "name": "get_project_files",
        "description": "List all files within a project",
        "required_scopes": [
          "files:read"
        ]
      },
      {
        "name": "get_file_versions",
        "description": "Get version history of a file",
        "required_scopes": [
          "files:read"
        ]
      }
    ],
    "server_id": "figma",
    "documentation": "figma/README.md",
    "readme_content": "# Figma Server\n\nguMCP server implementation for interacting with the Figma API.\n\n### Prerequisites\n\n- Python 3.7+\n- A Figma account\n- OAuth 2.0 credentials with the following scopes:\n  - files:read\n  - files:write\n  - comments:read\n  - comments:write\n\n### Features\n\n- Get user information\n- Access and manage Figma files\n- View and manage file comments\n- Add and remove comment reactions\n- Access team projects and files\n- View file version history\n\n### Local Authentication\n\n1. [Create a Figma OAuth app](https://www.figma.com/developers/api#oauth2)\n2. Configure your OAuth app with the required scopes\n3. Set up a redirect URI for your application (e.g., http://localhost:8080)\n4. Get your application's client ID and client secret\n5. Create an `oauth.json` file:\n\n```\nlocal_auth/oauth_configs/figma/oauth.json\n```\n\nCreate the following file with the relevant attributes for your app:\n\n```json\n{\n  \"client_id\": \"your_client_id\",\n  \"client_secret\": \"your_client_secret\",\n  \"redirect_uri\": \"your_redirect_uri\"\n}\n```\n\n6. To set up and verify authentication, run:\n\n```bash\npython src/servers/figma/main.py auth\n```\n\n### Run\n\n#### Local Development\n\n```bash\npython src/servers/local.py --server figma --user-id local\n```\n\n### Available Tools\n\n1. `get_me`\n\n   - Gets the authenticated user's information\n   - Returns user details including ID, handle, and email\n\n2. `get_file`\n\n   - Retrieves a Figma file by its key\n   - Returns file information and content\n   - Required parameter: `file_key`\n\n3. `get_file_comments`\n\n   - Lists comments for a specific Figma file\n   - Optional parameter: `as_md` to return comments as markdown\n   - Required parameter: `file_key`\n\n4. `post_comment`\n\n   - Adds a comment to a Figma file\n   - Required parameters: `file_key`, `message`\n   - Optional parameters: `client_meta`, `parent_id`\n\n5. `delete_comment`\n\n   - Removes a comment from a Figma file\n   - Required parameters: `file_key`, `comment_id`\n\n6. `get_comment_reactions`\n\n   - Lists reactions for a specific comment\n   - Required parameters: `file_key`, `comment_id`\n   - Optional parameter: `cursor` for pagination\n\n7. `post_comment_reaction`\n\n   - Adds a reaction to a comment\n   - Required parameters: `file_key`, `comment_id`, `emoji`\n\n8. `delete_comment_reaction`\n\n   - Removes a reaction from a comment\n   - Required parameters: `file_key`, `comment_id`, `emoji`\n\n9. `get_team_projects`\n\n   - Lists all projects within a team\n   - Required parameter: `team_id`\n\n10. `get_project_files`\n\n    - Lists files in a specific project\n    - Required parameter: `project_id`\n    - Optional parameter: `branch_data`\n\n11. `get_file_versions`\n    - Retrieves version history for a file\n    - Required parameter: `file_key`\n\n### Error Handling\n\nThe server provides detailed error messages for:\n\n- Authentication failures\n- Invalid tool names\n- Missing required parameters\n- API errors from Figma\n"
  },
  "apollo": {
    "name": "Apollo guMCP Server",
    "icon": "assets/icon.png",
    "description": "Interact with Apollo.io for sales prospecting, contact management, and CRM functionality",
    "tools": [
      {
        "name": "search_contacts",
        "description": "Search for contacts in your Apollo account"
      },
      {
        "name": "search_accounts",
        "description": "Search for accounts that have been added to your team's Apollo account"
      },
      {
        "name": "enrich_person",
        "description": "Enrich data for a person using Apollo's People Enrichment API"
      },
      {
        "name": "enrich_organization",
        "description": "Enrich data for a company using Apollo's Organization Enrichment API"
      },
      {
        "name": "create_contact",
        "description": "Create a new contact in Apollo"
      },
      {
        "name": "update_contact",
        "description": "Update an existing contact in your Apollo account"
      },
      {
        "name": "list_contact_stages",
        "description": "Retrieve the IDs for available contact stages in your Apollo account"
      },
      {
        "name": "create_account",
        "description": "Add a new account to your Apollo account"
      },
      {
        "name": "update_account",
        "description": "Update an existing account in your Apollo account"
      },
      {
        "name": "list_account_stages",
        "description": "Retrieve the IDs for available account stages in your Apollo account"
      },
      {
        "name": "create_deal",
        "description": "Create a new deal for an Apollo account"
      },
      {
        "name": "update_deal",
        "description": "Update an existing deal in your Apollo account"
      },
      {
        "name": "list_deals",
        "description": "List all deals in your Apollo account"
      },
      {
        "name": "list_deal_stages",
        "description": "Retrieve information about every deal stage in your Apollo account"
      },
      {
        "name": "create_task",
        "description": "Create tasks in Apollo for you and your team"
      },
      {
        "name": "list_users",
        "description": "Get a list of all users (teammates) in your Apollo account"
      }
    ],
    "server_id": "apollo",
    "documentation": "apollo/README.md",
    "readme_content": "# Apollo Server\n\nguMCP server implementation for interacting with Apollo.io for sales prospecting, contact management, and CRM functionality.\n\n### \ud83d\udce6 Prerequisites\n\n- Python 3.11+\n- An Apollo.io account ([Sign up here](https://www.apollo.io/))\n\n### \ud83d\udd11 API Key Generation\n\nTo generate an Apollo.io API key, follow these steps:\n\n1. Log in to your [Apollo.io account](https://www.apollo.io/)\n2. Navigate to Settings > Integrations > API > Connect\n3. Choose between two types of API keys:\n   - **Regular API Key**: For basic operations like search and enrichment\n   - **Master API Key**: For advanced operations requiring elevated permissions\n4. Click \"Generate New API Key\"\n5. Copy the generated API key\n\n### \ud83d\udd10 Local Authentication\n\nTo authenticate and save your API key for local testing, run:\n\n```bash\npython src/servers/apollo/main.py auth\n```\n\nThis will prompt you to enter your API key, which will then be saved to:\n```\nlocal_auth/credentials/apollo/local_credentials.json\n```\n\n### Features\n\nThe Apollo server supports a comprehensive set of operations grouped into categories:\n\n- **Search Tools**:\n  - `search_contacts`: Search for contacts in your Apollo account\n  - `search_accounts`: Search for accounts that have been added to your team's Apollo account\n\n- **Enrichment Tools**:\n  - `enrich_person`: Enrich data for a person using Apollo's People Enrichment API\n  - `enrich_organization`: Enrich data for a company using Apollo's Organization Enrichment API\n\n- **Contact Management Tools**:\n  - `create_contact`: Create a new contact in Apollo\n  - `update_contact`: Update an existing contact in your Apollo account\n  - `list_contact_stages`: Retrieve the IDs for available contact stages in your Apollo account\n\n- **Account Management Tools**:\n  - `create_account`: Add a new account to your Apollo account\n  - `update_account`: Update an existing account in your Apollo account\n  - `list_account_stages`: Retrieve the IDs for available account stages in your Apollo account\n\n- **Deal Management Tools**:\n  - `create_deal`: Create a new deal for an Apollo account\n  - `update_deal`: Update an existing deal in your Apollo account\n  - `list_deals`: List all deals in your Apollo account\n  - `list_deal_stages`: Retrieve information about every deal stage in your Apollo account\n\n- **Task and User Management Tools**:\n  - `create_task`: Create tasks in Apollo for you and your team\n  - `list_users`: Get a list of all users (teammates) in your Apollo account\n\n### Running the Server and Client\n\n#### 1. Start the Server\n\nYou can launch the server for local development using:\n\n```bash\n./start_sse_dev_server.sh\n```\n\n#### 2. Connect with the Client\n\nOnce the server is running, connect to it using the test client:\n\n```bash\npython tests/clients/RemoteMCPTestClient.py --endpoint=http://localhost:8000/apollo/local\n```\n\n### \ud83d\udcce Notes\n\n- **API Key Types**:\n  - Regular API key: Suitable for basic operations like search and enrichment\n  - Master API key: Required for user management, deal management, and account management operations\n\n- **API Usage and Credits**:\n  - People Search and Organization Search consume credits\n  - Enrichment operations may consume credits depending on your plan\n  - Monitor your API usage and credits through the Apollo.io dashboard\n\n- **Security**:\n  - Master API keys have elevated permissions and should be handled securely\n  - Never share your API keys in public repositories or unsecured channels\n  - Rotate your API keys periodically for enhanced security\n\n### \ud83d\udcda Resources\n\n- [Apollo.io API Documentation](https://www.apollo.io/api/)\n- [Apollo.io API Reference](https://www.apollo.io/api/)\n"
  },
  "zendesk": {
    "name": "Zendesk guMCP Server",
    "icon": "assets/icon.png",
    "description": "Interact with Zendesk tickets, views, and support features",
    "tools": [
      {
        "name": "search_tickets",
        "description": "Search for tickets in Zendesk"
      },
      {
        "name": "create_ticket",
        "description": "Create a new ticket in Zendesk"
      },
      {
        "name": "update_ticket",
        "description": "Update an existing ticket in Zendesk"
      },
      {
        "name": "add_comment",
        "description": "Add a comment to an existing ticket"
      }
    ],
    "server_id": "zendesk",
    "documentation": "zendesk/README.md",
    "readme_content": "# Zendesk Server\n\nguMCP server implementation for interacting with Zendesk.\n\n### Prerequisites\n\n- Python 3.11+\n- A Zendesk account with API access\n- A Zendesk OAuth application with the following scopes:\n  - read\n  - write\n\n### Local Authentication\n\nLocal authentication uses an OAuth Configuration JSON file:\n\n```\nlocal_auth/oauth_configs/zendesk/oauth.json\n```\n\nCreate the following file with the relevant attributes for your app:\n\n```json\n{\n  \"client_id\": \"xxxxxxxxxxxxxxxxxxxxx\",\n  \"client_secret\": \"xxxxxxxxxxxxxxxxxxxxx\",\n  \"redirect_uri\": \"https://xxxxxxxxxxxxx\",\n  \"custom_subdomain\": \"your-subdomain\"\n}\n```\n\nNotes:\n- The `custom_subdomain` is your Zendesk subdomain (e.g., if your Zendesk URL is `example.zendesk.com`, use `example`)\n\n\nTo set up and verify authentication, run:\n\n```bash\npython src/servers/zendesk/main.py auth\n```\n\nThis will launch a browser-based authentication flow to obtain and save credentials.\n"
  },
  "patreon": {
    "name": "Patreon guMCP Server",
    "icon": "assets/icon.png",
    "description": "Interact with Patreon campaigns, posts, and members using the Patreon API",
    "tools": [
      {
        "name": "get_identity",
        "description": "Get the current user's information with optional fields and includes"
      },
      {
        "name": "get_campaigns",
        "description": "Get campaigns owned by the authorized user"
      },
      {
        "name": "get_campaign",
        "description": "Get information about a single Campaign by ID"
      },
      {
        "name": "get_campaign_members",
        "description": "Get members of a specific campaign"
      },
      {
        "name": "get_campaign_posts",
        "description": "Get a list of all posts on a given campaign"
      },
      {
        "name": "get_post",
        "description": "Get details of a specific post"
      }
    ],
    "server_id": "patreon",
    "documentation": "patreon/README.md",
    "readme_content": "# Patreon GuMCP Server\n\nGuMCP server implementation for interacting with the Patreon API using OAuth authentication.\n\n---\n\n### \ud83d\udce6 Prerequisites\n\n- Python 3.11+\n- A Patreon Developer account with an API application created\n- OAuth credentials configured for your application\n\n---\n\n### \ud83d\udee0\ufe0f Step 1: Create a Patreon Developer Account\n\n1. Go to [Patreon Developer Portal](https://www.patreon.com/portal/registration/register-clients)\n2. Sign up for a developer account\n3. Navigate to Client & API Keys section (top right corner)\n4. Create a new Client\n5. Add required details:\n   - App name\n   - Description\n   - Redirect URI (e.g., `http://localhost:8080`)\n   - Client API Version as `2.0`\n   - All other fields are optional\n6. Create the Client\n\n---\n\n### \ud83d\udee0\ufe0f Step 2: Configure OAuth Settings\n\n1. Once the Client is created, expand the Client section and copy the Client ID and Client Secret\n\n---\n\n### \ud83d\udee0\ufe0f Step 3: Set Up Local Configuration\n\n1. Create a new folder called `local_auth` in your project directory\n2. Inside that, create a folder called `oauth_configs`\n3. Inside that, create a folder called `patreon`\n4. Create a new file called `oauth.json` in the `patreon` folder\n5. Copy and paste this into the file, replacing the placeholders with your actual values:\n\n```json\n{\n  \"client_id\": \"your-client-id-here\",\n  \"client_secret\": \"your-client-secret-here\",\n  \"redirect_uri\": \"your-redirect-uri-here\" e.g. `http://localhost:8080`\n}\n```\n\n> \u26a0\ufe0f **IMPORTANT**: Never share or commit this file to version control. Add it to your `.gitignore`.\n\n---\n\n### \ud83d\udd10 Step 4: Authenticate Your App\n\n1. Open your terminal\n2. Run this command:\n   ```bash\n   python src/servers/patreon/main.py auth\n   ```\n3. Log in to your Patreon account\n4. Click **\"Allow\"** to authorize the app\n5. You're now authenticated! \ud83c\udf89\n\n> You only need to do this authentication step once, unless your token expires.\n\n---\n\n### \ud83d\udee0\ufe0f Supported Tools\n\nThis server exposes the following tools for interacting with Patreon:\n\n#### User Information\n- `get_identity` \u2013 Get the current user's information with optional fields and includes\n\n#### Campaign Management\n- `get_campaigns` \u2013 Get campaigns owned by the authorized user\n- `get_campaign` \u2013 Get information about a single Campaign by ID\n- `get_campaign_members` \u2013 Get members of a specific campaign\n- `get_campaign_posts` \u2013 Get a list of all posts on a given campaign\n\n#### Post Management\n- `get_post` \u2013 Get details of a specific post\n\n---\n\n### \u25b6\ufe0f Running the Server\n\n#### Local Development\n\n1. Start the server:\n   ```bash\n   ./start_sse_dev_server.sh\n   ```\n\n2. In a new terminal, start the test client:\n   ```bash\n   python RemoteMCPTestClient.py --endpoint http://localhost:8000/patreon/local\n   ```\n\n---\n\n### \ud83d\udcce Important Notes\n\n- Ensure your Patreon application is properly configured in the developer portal\n- The server uses Patreon's production environment by default\n- Make sure your `.env` file contains the appropriate API keys if you're using external LLM services\n- The server implements rate limiting and proper error handling for API requests\n- All API calls are authenticated using the stored OAuth tokens\n\n---\n\n### \ud83d\udcda Need Help?\n\n- [Patreon Developer Portal](https://www.patreon.com/portal/registration/register-clients)\n- [Patreon API Documentation](https://docs.patreon.com/)\n- [Patreon OAuth 2.0 Guide](https://docs.patreon.com/#oauth) "
  },
  "lemlist": {
    "name": "Lemlist MCP Server",
    "icon": "assets/icon.png",
    "description": "Interact with Lemlist for campaign management, lead enrichment, scheduling, and outreach automation.",
    "tools": [
      {
        "name": "get_team",
        "description": "Get the team information."
      },
      {
        "name": "get_senders",
        "description": "Get the list of senders."
      },
      {
        "name": "get_credits",
        "description": "Get the credits information."
      },
      {
        "name": "get_user",
        "description": "Get the user information by user ID."
      },
      {
        "name": "get_all_campaigns",
        "description": "Retrieve a paginated list of Lemlist campaigns. Supports sorting and pagination."
      },
      {
        "name": "get_campaign",
        "description": "Retrieve the details of a specific Lemlist campaign by its campaignId."
      },
      {
        "name": "create_campaign",
        "description": "Create a new campaign in Lemlist with optional name. Returns campaign, sequence, and schedule IDs."
      },
      {
        "name": "update_campaign",
        "description": "Update the configuration of a Lemlist campaign by campaignId. Supports updating name and multiple campaign settings."
      },
      {
        "name": "pause_lemlist_campaign",
        "description": "Pause a running Lemlist campaign by its campaignId. If the campaign is not running, no action is taken."
      },
      {
        "name": "start_lemlist_campaign_export",
        "description": "Initiate an asynchronous export of campaign statistics. Returns export ID for status tracking."
      },
      {
        "name": "get_campaign_export_status",
        "description": "Check the status of an asynchronous campaign export in Lemlist. Returns export status and CSV URL if available."
      },
      {
        "name": "export_lemlist_campaign",
        "description": "Set an email address to receive the download link for a Lemlist campaign export when it's done."
      },
      {
        "name": "get_all_schedules",
        "description": "Retrieve all schedules associated with a Lemlist team, with pagination and sorting options."
      },
      {
        "name": "get_schedule",
        "description": "Retrieve the details of a specific Lemlist schedule by its scheduleId."
      },
      {
        "name": "get_campaign_schedules",
        "description": "Retrieve all schedule objects linked to a specific Lemlist campaign by campaignId."
      },
      {
        "name": "create_schedule",
        "description": "Create a new schedule in Lemlist. Supports custom name, delay, timezone, start/end times, and active weekdays."
      },
      {
        "name": "update_schedule",
        "description": "Update an existing Lemlist schedule by scheduleId. Supports updating name, delay, timezone, start/end times, and weekdays."
      },
      {
        "name": "delete_schedule",
        "description": "Delete a specific schedule in Lemlist by its scheduleId."
      },
      {
        "name": "associate_schedule_with_campaign",
        "description": "Associate a schedule with a specific Lemlist campaign using campaignId and scheduleId."
      },
      {
        "name": "create_lead_in_campaign",
        "description": "Add a lead to a specific Lemlist campaign. Supports deduplication, email verification, LinkedIn enrichment, phone finding, and custom lead data."
      },
      {
        "name": "delete_lead",
        "description": "Delete a lead from a specific Lemlist campaign by campaignId and leadId (email address). All information, including statistics, will be permanently deleted."
      },
      {
        "name": "mark_lead_as_interested_all_campaigns",
        "description": "Mark a specific lead as interested in all campaigns using their email address. Stops their campaign sequence."
      },
      {
        "name": "mark_lead_as_not_interested_all_campaigns",
        "description": "Mark a specific lead as not interested in all campaigns using their email address. Stops their campaign sequence."
      },
      {
        "name": "mark_lead_as_interested_in_campaign",
        "description": "Mark a specific lead as interested in a specific Lemlist campaign using their email address. Stops their campaign sequence."
      },
      {
        "name": "mark_lead_as_not_interested_in_campaign",
        "description": "Mark a specific lead as not interested in a specific Lemlist campaign using their email address. Stops their campaign sequence."
      },
      {
        "name": "get_all_unsubscribes",
        "description": "Retrieve a paginated list of all unsubscribed people from Lemlist. Supports offset and limit for pagination."
      },
      {
        "name": "export_unsubscribes",
        "description": "Download a CSV file containing all unsubscribed email addresses from Lemlist."
      },
      {
        "name": "add_unsubscribe",
        "description": "Add an email address or domain to Lemlist's unsubscribed list. Domains must start with @ (e.g. @domain.com)."
      },
      {
        "name": "delete_unsubscribe",
        "description": "Delete an email address or domain from Lemlist's unsubscribed list. Domains must start with @ (e.g. @domain.com)."
      },
      {
        "name": "get_database_filters",
        "description": "Retrieve all available Lemlist database filters for constructing advanced queries."
      }
    ],
    "server_id": "lemlist",
    "documentation": "lemlist/README.md",
    "readme_content": "# Lemlist Server\n\nguMCP server implementation for interacting with the Lemlist API, supporting campaign management, scheduling, and outreach automation.\n\n---\n\n### Prerequisites\n\n- Python 3.11+\n- A Lemlist account with API access\n- Lemlist API key (token) with appropriate permissions\n\n---\n\n#### How to Get Your Lemlist API Key\n\n1. Log in to your Lemlist account.\n2. Click on your profile icon (top right) and go to **Settings**.\n3. Navigate to the **Integrations** or **API** section.\n4. Locate your **API Key** (sometimes called a token or access key).\n5. Copy the API key and keep it secure. You will be prompted to enter this during the authentication step above.\n\n### Local Authentication\n\nLocal authentication uses your Lemlist API key. The credentials will be stored securely at:\n\n```\nlocal_auth/credentials/lemlist/\n```\n\nTo authenticate and save credentials for local testing, run:\n\n```bash\npython src/servers/lemlist/main.py auth\n```\n\nThis will prompt you to enter your Lemlist API key. After successful authentication, your credentials will be stored securely for reuse.\n\n\n\n---\n\n### Supported Tools\n\nThis server exposes the following tools for interacting with Lemlist:\n\n#### Team & Account\n\n- `get_team` \u2013 Get the team information.\n- `get_senders` \u2013 Get the list of senders.\n- `get_credits` \u2013 Get the credits information.\n- `get_user` \u2013 Get the user information by user ID.\n\n#### Campaign Management\n\n- `get_all_campaigns` \u2013 Retrieve a paginated list of Lemlist campaigns. Supports sorting and pagination.\n- `get_campaign` \u2013 Retrieve the details of a specific Lemlist campaign by its campaignId.\n- `create_campaign` \u2013 Create a new campaign in Lemlist with optional name. Returns campaign, sequence, and schedule IDs.\n- `update_campaign` \u2013 Update the configuration of a Lemlist campaign by campaignId. Supports updating name and multiple campaign settings.\n- `pause_lemlist_campaign` \u2013 Pause a running Lemlist campaign by its campaignId.\n\n#### Campaign Export\n\n- `start_lemlist_campaign_export` \u2013 Initiate an asynchronous export of campaign statistics. Returns export ID for status tracking.\n- `get_campaign_export_status` \u2013 Check the status of an asynchronous campaign export in Lemlist. Returns export status and CSV URL if available.\n- `export_lemlist_campaign` \u2013 Set an email address to receive the download link for a Lemlist campaign export when it's done.\n\n#### Schedules\n\n- `get_all_schedules` \u2013 Retrieve all schedules associated with a Lemlist team, with pagination and sorting options.\n- `get_schedule` \u2013 Retrieve the details of a specific Lemlist schedule by its scheduleId.\n- `get_campaign_schedules` \u2013 Retrieve all schedule objects linked to a specific Lemlist campaign by campaignId.\n- `create_schedule` \u2013 Create a new schedule in Lemlist. Supports custom name, delay, timezone, start/end times, and active weekdays.\n- `update_schedule` \u2013 Update an existing Lemlist schedule by scheduleId. Supports updating name, delay, timezone, start/end times, and weekdays.\n- `delete_schedule` \u2013 Delete a specific schedule in Lemlist by its scheduleId.\n- `associate_schedule_with_campaign` \u2013 Associate a schedule with a specific Lemlist campaign using campaignId and scheduleId.\n\n#### Leads\n\n- `create_lead_in_campaign` \u2013 Add a lead to a specific Lemlist campaign. Supports deduplication, email verification, LinkedIn enrichment, phone finding, and custom lead data.\n- `delete_lead` \u2013 Delete a lead from a specific Lemlist campaign by campaignId and leadId (email address).\n- `mark_lead_as_interested_all_campaigns` \u2013 Mark a specific lead as interested in all campaigns using their email address.\n- `mark_lead_as_not_interested_all_campaigns` \u2013 Mark a specific lead as not interested in all campaigns using their email address.\n- `mark_lead_as_interested_in_campaign` \u2013 Mark a specific lead as interested in a specific Lemlist campaign using their email address.\n- `mark_lead_as_not_interested_in_campaign` \u2013 Mark a specific lead as not interested in a specific Lemlist campaign using their email address.\n\n#### Unsubscribes\n\n- `get_all_unsubscribes` \u2013 Retrieve a paginated list of all unsubscribed people from Lemlist.\n- `export_unsubscribes` \u2013 Download a CSV file containing all unsubscribed email addresses from Lemlist.\n- `add_unsubscribe` \u2013 Add an email address or domain to Lemlist's unsubscribed list.\n- `delete_unsubscribe` \u2013 Delete an email address or domain from Lemlist's unsubscribed list.\n\n#### Database\n\n- `get_database_filters` \u2013 Retrieve all available Lemlist database filters for constructing advanced queries.\n\n---\n\n### Run\n\n#### Local Development\n\nYou can launch the server for local development using:\n\n```bash\n./start_sse_dev_server.sh\n```\n\nThis will start the MCP server and make it available for integration and testing.\n\nYou can also start the local client using:\n\n```bash\npython RemoteMCPTestClient.py --endpoint http://localhost:8000/lemlist/local\n```\n\n---\n\n### Notes\n\n- Ensure your Lemlist API key has the necessary permissions for the operations you want to perform.\n- All API calls include proper error handling and response validation.\n- This server is designed to integrate with guMCP agents for tool-based LLM workflows.\n\n---\n\n### Resources\n\n- [Lemlist API Documentation](https://developer.lemlist.com/)\n- [Lemlist Help Center](https://help.lemlist.com/)\n- [Lemlist Campaigns](https://app.lemlist.com/campaigns)\n"
  },
  "paypal": {
    "name": "PayPal guMCP Server",
    "icon": "assets/icon.png",
    "description": "Interact with PayPal payments, orders, and plans management using the PayPal API",
    "tools": [
      {
        "name": "create_order",
        "description": "Create a new PayPal order with specified purchase units and intent (CAPTURE or AUTHORIZE)"
      },
      {
        "name": "get_order",
        "description": "Get details for a specific PayPal order with optional field filtering"
      },
      {
        "name": "confirm_order",
        "description": "Confirm a PayPal order with payment source and optional application context"
      },
      {
        "name": "create_plan",
        "description": "Create a new billing plan for subscriptions with product ID, name, description, billing cycles, and payment preferences"
      },
      {
        "name": "list_plans",
        "description": "List available billing plans with optional product ID filtering and pagination"
      },
      {
        "name": "get_plan",
        "description": "Get detailed information for a specific billing plan"
      },
      {
        "name": "update_plan",
        "description": "Update a billing plan's properties using JSON patch operations"
      },
      {
        "name": "activate_plan",
        "description": "Activate a billing plan"
      },
      {
        "name": "deactivate_plan",
        "description": "Deactivate a billing plan"
      },
      {
        "name": "create_product",
        "description": "Create a new product in PayPal catalog with name, description, type (PHYSICAL/DIGITAL/SERVICE), and optional metadata"
      },
      {
        "name": "list_products",
        "description": "List available products with pagination support"
      },
      {
        "name": "get_product",
        "description": "Get detailed information for a specific product"
      },
      {
        "name": "update_product",
        "description": "Update a product's properties using JSON patch operations"
      },
      {
        "name": "search_invoices",
        "description": "Search for invoices based on various criteria including recipient info, invoice details, date ranges, and status"
      },
      {
        "name": "create_subscription",
        "description": "Create a new subscription with plan ID, optional quantity, auto-renewal, custom ID, and subscriber details"
      },
      {
        "name": "get_subscription",
        "description": "Get detailed information for a specific subscription including billing info, status, and subscriber details"
      }
    ],
    "server_id": "paypal",
    "documentation": "paypal/README.md",
    "readme_content": "# PayPal GuMCP Server\n\nGuMCP server implementation for interacting with the PayPal API using OAuth authentication.\n\n---\n\n### \ud83d\udce6 Prerequisites\n\n- Python 3.11+\n- A PayPal Developer account with a REST API application created\n- OAuth credentials configured for your application\n\n---\n\n### \ud83d\udee0\ufe0f Step 1: Create a PayPal Account\n\n#### Option A: Personal Account\n1. Go to [PayPal](https://www.paypal.com)\n2. Click on \"Sign Up\" in the top right corner\n3. Select \"Personal Account\"\n4. Follow these steps:\n   - Enter your email address and click \"Next\"\n   - Enter your phone number and click \"Next\"\n   - Set a secure password and click \"Next\"\n   - Enter your personal information:\n     - Nationality\n     - First Name\n     - Middle Name (optional)\n     - Last Name\n     - Date of Birth\n   - Click \"Next\"\n   - Enter your address details:\n     - Street Address\n     - Town/City\n     - State\n     - ZIP/Postal Code\n   - Agree to PayPal's terms and conditions\n   - Click \"Create Account\"\n5. After account creation, link your payment method:\n   - Click on \"Wallet\" in your PayPal dashboard\n   - Select \"Link a card\"\n   - Choose card type (Debit or Credit)\n   - Enter card details:\n     - Card number\n     - Expiration date (MM/YY)\n     - CVV/Security code\n     - Cardholder name\n   - Enter billing address (if different from account address)\n   - Click \"Link Card\" to complete the process\n6. Set up Developer Account:\n   - Go to [PayPal Developer Portal](https://developer.paypal.com/)\n   - Sign in with your PayPal account\n   - Navigate to Dashboard > My Apps & Credentials\n   - Create a new app or use Default app:\n     - Click on \"Create App\" button\n     - Enter your app name\n     - Select your account type (Personal)\n     - Choose the sandbox environment for testing\n     - Click \"Create App\"\n   - Generate API credentials:\n     - In your app dashboard, find the \"Live\" and \"Sandbox\" tabs\n     - For development, use the \"Sandbox\" tab\n     - Click on \"Show\" under \"Secret\" to reveal your Client Secret\n     - Copy both the Client ID and Client Secret\n     - Store these credentials securely\n\n#### Option B: Business Account\n1. Go to [PayPal](https://www.paypal.com)\n2. Click on \"Sign Up\" in the top right corner\n3. Select \"Business Account\"\n4. Follow these steps:\n   - Enter your business email address and click \"Next\"\n   - Set a secure password and click \"Next\"\n   - Select your business type:\n     - Individual/Sole Trader\n     - Partnership\n     - Corporation\n   - Enter your business details:\n     - Product or service keywords\n     - Business purpose code\n     - Personal PAN (if applicable)\n     - PayPal CC statement\n     - Website URL (optional)\n   - Complete the verification process\n5. Set up Developer Account:\n   - Go to [PayPal Developer Portal](https://developer.paypal.com/)\n   - Sign in with your PayPal account\n   - Navigate to Dashboard > My Apps & Credentials\n   - Create a new app or use Default app:\n     - Click on \"Create App\" button\n     - Enter your app name\n     - Select your account type (Business)\n     - Choose the sandbox environment for testing\n     - Click \"Create App\"\n   - Generate API credentials:\n     - In your app dashboard, find the \"Live\" and \"Sandbox\" tabs\n     - For development, use the \"Sandbox\" tab\n     - Click on \"Show\" under \"Secret\" to reveal your Client Secret\n     - Copy both the Client ID and Client Secret\n     - Store these credentials securely\n\n---\n\n### \ud83d\udee0\ufe0f Step 2: Configure OAuth Settings\n\n1. Once the app is created, you'll see your Client ID and Client Secret in the app details\n2. Make sure to note these down securely\n\n---\n\n### \ud83d\udee0\ufe0f Step 3: Set Up Local Configuration\n\n1. Create a new folder called `local_auth` in your project directory\n2. Inside that, create a folder called `oauth_configs`\n3. Inside that, create a folder called `paypal`\n4. Create a new file called `oauth.json` in the `paypal` folder\n5. Copy and paste this into the file, replacing the placeholders with your actual values:\n\n```json\n{\n  \"client_id\": \"your-client-id-here\",\n  \"client_secret\": \"your-client-secret-here\"\n}\n```\n\n> \u26a0\ufe0f **IMPORTANT**: Never share or commit this file to version control. Add it to your `.gitignore`.\n---\n\n### \ud83d\udd10 Step 4: Authenticate Your App\n\n1. Open your terminal\n2. Run this command:\n   ```bash\n   python src/servers/paypal/main.py auth\n   ```\n3. The server will automatically:\n   - Read the OAuth configuration\n   - Generate and store the access token\n   - Save the credentials securely\n\n> You only need to do this authentication step once, unless your token expires.\n---\n\n### \ud83d\udee0\ufe0f Supported Tools\n\nThis server exposes the following tools for interacting with PayPal:\n\n#### Order Management\n- `create_order` \u2013 Create a new PayPal order with purchase units\n- `get_order` \u2013 Get details for a specific order\n- `confirm_order` \u2013 Confirm an order with payment source\n\n#### Plan Management\n- `create_plan` \u2013 Create a new billing plan\n- `list_plans` \u2013 List available billing plans\n- `get_plan` \u2013 Get plan details\n- `update_plan` \u2013 Update plan properties\n- `activate_plan` \u2013 Activate a plan\n- `deactivate_plan` \u2013 Deactivate a plan\n\n#### Product Management\n- `create_product` \u2013 Create a new product\n- `list_products` \u2013 List available products\n- `get_product` \u2013 Get product details\n- `update_product` \u2013 Update product properties\n\n#### Invoice Management\n- `search_invoices` \u2013 Search for invoices based on various criteria including recipient info, invoice details, date ranges, and status\n\n#### Subscription Management\n- `create_subscription` \u2013 Create a new subscription with plan ID, optional quantity, auto-renewal, custom ID, and subscriber details\n- `get_subscription` \u2013 Get detailed information for a specific subscription including billing info, status, and subscriber details\n\n---\n\n### \u25b6\ufe0f Running the Server\n\n#### Local Development\n\n1. Start the server:\n   ```bash\n   ./start_sse_dev_server.sh\n   ```\n\n2. In a new terminal, start the test client:\n   ```bash\n   python RemoteMCPTestClient.py --endpoint http://localhost:8000/paypal/local\n   ```\n\n---\n\n### \ud83d\udcce Important Notes\n\n- Ensure your PayPal application is properly configured in the developer portal\n- The server uses PayPal's sandbox environment by default\n- Make sure your `.env` file contains the appropriate API keys if you're using external LLM services\n- The server implements rate limiting and proper error handling for API requests\n- All API calls are authenticated using the stored OAuth tokens\n- Subscription operations require a valid plan ID\n- Invoice searches support multiple criteria combinations\n- Subscription and invoice status changes may take time to reflect\n- Always verify subscription status before processing payments\n- Keep track of subscription IDs for future reference\n\n---\n\n### \ud83d\udcda Need Help?\n\n- [PayPal Developer Portal](https://developer.paypal.com/)\n- [PayPal REST API Documentation](https://developer.paypal.com/docs/api/overview/)\n- [PayPal OAuth 2.0 Guide](https://developer.paypal.com/docs/api/overview/#get-an-access-token)\n- [PayPal Subscriptions API Documentation](https://developer.paypal.com/docs/api/subscriptions/v1/)\n- [PayPal Invoicing API Documentation](https://developer.paypal.com/docs/api/invoicing/v2/)\n"
  },
  "bluesky": {
    "name": "Bluesky guMCP Server",
    "icon": "assets/icon.png",
    "description": "Interact with Bluesky for social media management, including posting, following, blocking, and profile management.",
    "tools": [
      {
        "name": "get_my_profile",
        "description": "Get the current user's profile information."
      },
      {
        "name": "create_post",
        "description": "Create a new post with optional text and facets."
      },
      {
        "name": "delete_post",
        "description": "Delete an existing post by its URI."
      },
      {
        "name": "get_posts",
        "description": "Get recent posts from a user with pagination support."
      },
      {
        "name": "get_liked_posts",
        "description": "Get a list of posts liked by the user with pagination support."
      },
      {
        "name": "search_posts",
        "description": "Search for posts on Bluesky with query, limit, and cursor support."
      },
      {
        "name": "search_profiles",
        "description": "Search for user profiles on Bluesky with query, limit, and cursor support."
      },
      {
        "name": "get_follows",
        "description": "Get a list of accounts the user follows with pagination support."
      },
      {
        "name": "follow_user",
        "description": "Follow another user by their handle or DID."
      },
      {
        "name": "unfollow_user",
        "description": "Unfollow a user by their handle."
      },
      {
        "name": "mute_user",
        "description": "Mute a user by their handle."
      },
      {
        "name": "unmute_user",
        "description": "Unmute a user by their handle."
      },
      {
        "name": "block_user",
        "description": "Block a user by their handle with optional reason."
      },
      {
        "name": "unblock_user",
        "description": "Unblock a user by their handle."
      }
    ],
    "server_id": "bluesky",
    "documentation": "bluesky/README.md",
    "readme_content": "# Bluesky Server\n\nguMCP server implementation for interacting with the Bluesky API, supporting social media management, including posting, following, blocking, and profile management.\n\n---\n\n### Prerequisites\n\n- Python 3.11+\n- A Bluesky account\n- Bluesky app password\n\n---\n\n#### How to Get Your Bluesky App Password\n\n1. Log in to your Bluesky account at [bsky.app](https://bsky.app)\n2. Click on your **Settings** icon on the bottom of left-side pane, then click on Privacy & Security [Privacy and Security](https://bsky.app/settings/privacy-and-security)\n3. Navigate to the **App Passwords** section\n4. Click on **Add Password**\n5. Enter a name for your app (e.g., \"guMCP\"), and provide the access for the password\n6. Copy the generated app password and keep it secure. You will be prompted to enter this during the authentication step below.\n\n### Local Authentication\n\nLocal authentication uses your Bluesky handle and app password. The credentials will be stored securely at:\n\n```\nlocal_auth/credentials/bluesky/\n```\n\nTo authenticate and save credentials for local testing, run:\n\n```bash\npython src/servers/bluesky/main.py auth\n```\n\nThis will prompt you to enter your Bluesky handle and app password. After successful authentication, your credentials will be stored securely for reuse.\n\n---\n\n### Supported Tools\n\nThis server exposes the following tools for interacting with Bluesky:\n\n#### Profile Management\n\n- `get_my_profile` \u2013 Get the current user's profile information.\n\n#### Post Management\n\n- `create_post` \u2013 Create a new post with optional text and facets.\n- `delete_post` \u2013 Delete an existing post by its URI.\n- `get_posts` \u2013 Get recent posts from a user with pagination support.\n- `get_liked_posts` \u2013 Get a list of posts liked by the user with pagination support.\n\n#### Search\n\n- `search_posts` \u2013 Search for posts on Bluesky with query, limit, and cursor support.\n- `search_profiles` \u2013 Search for user profiles on Bluesky with query, limit, and cursor support.\n\n#### Social Graph\n\n- `get_follows` \u2013 Get a list of accounts the user follows with pagination support.\n- `follow_user` \u2013 Follow another user by their handle or DID.\n- `unfollow_user` \u2013 Unfollow a user by their handle.\n\n#### User Management\n\n- `mute_user` \u2013 Mute a user by their handle.\n- `unmute_user` \u2013 Unmute a user by their handle.\n- `block_user` \u2013 Block a user by their handle with optional reason.\n- `unblock_user` \u2013 Unblock a user by their handle.\n\n---\n\n### Run\n\n#### Local Development\n\nYou can launch the server for local development using:\n\n```bash\n./start_sse_dev_server.sh\n```\n\nThis will start the MCP server and make it available for integration and testing.\n\nYou can also start the local client using:\n\n```bash\npython RemoteMCPTestClient.py --endpoint http://localhost:8000/bluesky/local\n```\n\n---\n\n### Notes\n\n- Ensure your Bluesky app password has the necessary permissions for the operations you want to perform.\n- All API calls include proper error handling and response validation.\n- This server is designed to integrate with guMCP agents for tool-based LLM workflows.\n\n---\n\n### Resources\n\n- [Bluesky API Documentation](https://atproto.com/guides/overview)\n- [Bluesky Developer Portal](https://atproto.com/)\n- [Bluesky App](https://bsky.app)\n"
  },
  "gmaps": {
    "name": "Google Maps guMCP Server",
    "icon": "assets/icon.png",
    "description": "Interact with Google Maps using the Google Maps API",
    "tools": [
      {
        "name": "address_to_coordinates",
        "description": "Get the coordinates of an address"
      },
      {
        "name": "coordinates_to_address",
        "description": "Get the address of a set of coordinates"
      },
      {
        "name": "maps_search_places",
        "description": "Search for places around a set of coordinates"
      },
      {
        "name": "maps_place_details",
        "description": "Get details about a place"
      },
      {
        "name": "get_place_reviews",
        "description": "Retrieve channel metadata including title and description"
      },
      {
        "name": "maps_distance_matrix",
        "description": "Get the distance and duration between two sets of coordinates"
      },
      {
        "name": "maps_elevation",
        "description": "Get the elevation of a set of coordinates"
      },
      {
        "name": "maps_directions",
        "description": "Get directions between two sets of coordinates"
      }
    ],
    "server_id": "gmaps",
    "documentation": "gmaps/README.md",
    "readme_content": "# Google Maps Server\n\nguMCP server implementation for interacting with the **Google Maps API**.\n\n---\n\n### \ud83d\udce6 Prerequisites\n\n- Python 3.11+\n- A Google Cloud project with the **Google Maps API enabled**\n- Google Maps API key\n\n---\n\n### \ud83d\udd11 API Key Generation\n\nTo generate a Google Maps API key, follow these steps:\n\n1. Go to the [Google Cloud Console](https://console.cloud.google.com/)\n2. Create a new project or select an existing one\n3. Enable the following APIs for your project:\n   - Maps JavaScript API\n   - Geocoding API\n   - Places API\n   - Distance Matrix API\n   - Elevation API\n   - Directions API\n4. Navigate to \"APIs & Services\" > \"Credentials\"\n5. Click \"Create Credentials\" and select \"API key\"\n6. Copy the generated API key\n\n---\n\n### \ud83d\udd10 Local Authentication\n\nLocal authentication uses a Google Maps API key stored securely. To authenticate and save your API key for local testing, run:\n\n```bash\npython src/servers/gmaps/main.py auth\n```\n\nIt will ask you to enter the api key.\nAfter successful authentication, your API key will be stored securely for reuse.\n\n---\n\n### \ud83d\udee0\ufe0f Supported Tools\n\nThis server exposes the following tools for interacting with Google Maps:\n\n- `address_to_coordinates` \u2013 Convert an address to latitude/longitude coordinates\n- `coordinates_to_address` \u2013 Convert coordinates to a human-readable address\n- `search_places` \u2013 Search for places around a specific location\n- `place_details` \u2013 Get detailed information about a place\n- `get_place_reviews` \u2013 Retrieve reviews for a specific place\n- `distance_matrix` \u2013 Calculate distance and duration between locations\n- `elevation` \u2013 Get elevation data for coordinates\n- `directions` \u2013 Get directions between two locations\n\n---\n\n### \u25b6\ufe0f Run\n\n#### Local Development\n\nYou can launch the server for local development using:\n\n```bash\n./start_sse_dev_server.sh\n```\n\nThis will start the Google Maps MCP server and make it available for integration and testing.\n\nYou can also start the local client using the following:\n\n```bash\npython RemoteMCPTestClient.py --endpoint http://localhost:8000/gmaps/local\n```\n\n---\n\n### \ud83d\udcce Notes\n\n- Ensure your Google Cloud project has **Google Maps API** access enabled\n- If you're testing with multiple users or environments, use different `user_id` values\n- Make sure your `.env` file contains the appropriate API keys if you're using external LLM services like Anthropic\n\n---\n\n### \ud83d\udcda Resources\n\n- [Google Maps API Documentation](https://developers.google.com/maps)\n- [Google Maps API Reference](https://developers.google.com/maps/documentation)\n"
  },
  "reddit": {
    "name": "Reddit MCP Server",
    "icon": "assets/icon.png",
    "description": "Interact with Reddit using the Reddit API",
    "tools": [
      {
        "name": "retrieve_reddit_post",
        "description": "Fetch top posts in a subreddit with optional size limit."
      },
      {
        "name": "get_reddit_post_details",
        "description": "Get detailed content about a specific Reddit post"
      },
      {
        "name": "create_reddit_post",
        "description": "Create a new Reddit post"
      },
      {
        "name": "fetch_post_comments",
        "description": "Fetch the comments of a reddit post."
      },
      {
        "name": "edit_reddit_post",
        "description": "Edit a specific Reddit post"
      },
      {
        "name": "edit_reddit_comment",
        "description": "Edit a specific Reddit comment"
      },
      {
        "name": "delete_reddit_post",
        "description": "Delete a specific Reddit post"
      },
      {
        "name": "delete_reddit_comment",
        "description": "Delete a specific Reddit comment"
      }
    ],
    "server_id": "reddit",
    "documentation": "reddit/README.md",
    "readme_content": "# Reddit Server\n\nguMCP server implementation for interacting with the **Reddit API**.\n\n---\n\n### \ud83d\udce6 Prerequisites\n\n- Python 3.11+\n- OAuth 2.0 credentials from a Reddit Developer App. You can create one here: https://www.reddit.com/prefs/apps\n  - You can select \"web app\" for type of application\n  - The `client_id` will be listed below \"web app\" when it is created\n- A local OAuth config file with your Reddit `client_id`, `client_secret`, and `redirect_uri`\n\n---\n\n### \ud83d\udd10 Local Authentication\n\nCreate a file named `local_auth/reddit/oauth.json`:\n\n```json\n{\n  \"client_id\": \"your-client-id\",\n  \"client_secret\": \"your-client-secret\",\n  \"redirect_uri\": \"http://localhost:8080\"\n}\n```\n\nTo authenticate and save credentials for local testing, run:\n\n```bash\npython src/servers/reddit/main.py auth\n```\n\nAfter successful authentication, your credentials will be stored securely for reuse.\n\n---\n\n### \ud83d\udee0\ufe0f Supported Tools\n\nThis server exposes the following tools for interacting with Reddit:\n\n- `retrieve_reddit_post` \u2013 Fetch top posts in a subreddit with optional size limit\n- `get_reddit_post_details` \u2013 Get detailed content about a specific Reddit post\n- `create_reddit_post` \u2013 Create a new Reddit post\n- `create_reddit_comment` - Create a new Reddit comment on a specific post\n- `fetch_post_comments` \u2013 Fetch comments for a specific Reddit post\n- `edit_reddit_post` \u2013 Edit a specific Reddit post\n- `edit_reddit_comment` \u2013 Edit a specific Reddit comment\n- `delete_reddit_post` \u2013 Delete a specific Reddit post\n- `delete_reddit_comment` \u2013 Delete a specific Reddit comment\n\n---\n\n### \u25b6\ufe0f Run\n\n#### Local Development\n\nYou can launch the server for local development using:\n\n```bash\n./start_sse_dev_server.sh\n```\n\nThis will start the Reddit MCP server and make it available for integration and testing.\n\nYou can also start the local client using the following:\n\n```bash\npython RemoteMCPTestClient.py --endpoint http://localhost:8000/reddit/local\n```\n\n---\n\n### \ud83d\udcce Notes\n\n- Ensure your OAuth app has the required scopes enabled: `identity`, `read`, `submit`, `edit`, `history`, `flair`\n- If you're testing with multiple users or environments, use different `user_id` values.\n- Make sure your `.env` file contains the appropriate API keys if you're using external LLM services like Anthropic.\n\n---\n\n### \ud83d\udcda Resources\n\n- [Reddit API Documentation](https://www.reddit.com/dev/api)\n- [Reddit OAuth2 Documentation](https://github.com/reddit-archive/reddit/wiki/OAuth2)\n"
  },
  "sharepoint": {
    "name": "SharePoint guMCP Server",
    "icon": "assets/icon.png",
    "description": "Interact with SharePoint for list management, document handling, user administration, file management, and site page management",
    "tools": [
      {
        "name": "get_users",
        "description": "Get all users from Microsoft 365 with filtering and pagination options"
      },
      {
        "name": "list_site_lists",
        "description": "List all lists in a SharePoint site"
      },
      {
        "name": "create_list",
        "description": "Create a new list in SharePoint"
      },
      {
        "name": "get_list",
        "description": "Get details of a SharePoint list by ID or title"
      },
      {
        "name": "create_list_item",
        "description": "Create a new item in a SharePoint list"
      },
      {
        "name": "get_list_item",
        "description": "Get details of a specific item in a SharePoint list"
      },
      {
        "name": "get_list_items",
        "description": "Get all items from a SharePoint list with filtering and sorting options"
      },
      {
        "name": "delete_list_item",
        "description": "Delete a specific item from a SharePoint list"
      },
      {
        "name": "update_list_item",
        "description": "Update fields of an existing item in a SharePoint list"
      },
      {
        "name": "download_file",
        "description": "Download a file from the current user's OneDrive"
      },
      {
        "name": "create_folder",
        "description": "Create a new folder in the current user's OneDrive"
      },
      {
        "name": "upload_file",
        "description": "Upload a file to the current user's OneDrive"
      },
      {
        "name": "create_site_page",
        "description": "Create a new SharePoint site page"
      },
      {
        "name": "get_site_page",
        "description": "Get details of a specific page in a SharePoint site"
      },
      {
        "name": "list_site_pages",
        "description": "List all pages in a SharePoint site"
      },
      {
        "name": "get_site_info",
        "description": "Get metadata and information about a SharePoint site"
      },
      {
        "name": "search_sites",
        "description": "Search for SharePoint sites by keyword"
      }
    ],
    "server_id": "sharepoint",
    "documentation": "sharepoint/README.md",
    "readme_content": "# SharePoint Server\n\nguMCP server implementation for interacting with Microsoft SharePoint for list management, document libraries, user administration, file management, and site page management.\n\n---\n\n### \ud83d\ude80 Prerequisites\n\n- Python 3.11+\n- A **Microsoft 365 account** with access to SharePoint\n- Administrative access for some features (optional)\n\n---\n\n### \ud83d\udd10 Microsoft Azure App Setup (First-time Setup)\n\n1. **Log in to the [Azure Portal](https://portal.azure.com/)**\n2. Navigate to **Azure Active Directory** \u2192 **App registrations** \u2192 **New registration**\n3. Fill out:\n   - **Name**: e.g., `MCP SharePoint Integration`\n   - **Supported account types**: Choose the appropriate option based on your needs (typically \"Accounts in this organizational directory only\")\n   - **Redirect URI**: Select \"Web\" and enter your redirect URI, e.g.:\n     ```\n     http://localhost:8080/\n     ```\n   - Click **\"Register\"**\n\n4. After the app is created:\n   - Copy the **Application (client) ID** (this is your `client_id`)\n   - Navigate to **Certificates & secrets** \u2192 **New client secret**\n   - Add a description and choose an expiration period\n   - Copy the **Value** of the secret (this is your `client_secret`)\n\n5. Navigate to **API permissions** and add the following Microsoft Graph API permissions (all \"Delegated\" type):\n   - Sites.Manage.All\n   - Sites.Read.All\n   - Sites.ReadWrite.All\n   - User.Read.All\n   - Files.Read.All\n   - Files.ReadWrite.All\n   - offline_access\n\n6. Click **\"Add permissions\"**\n7. Save all values securely.\n\n---\n\n### \ud83d\udcc4 Local OAuth Credentials\n\nCreate a file named `oauth.json` in your directory (local_auth/oauth_configs/sharepoint/) with the following content:\n\n```json\n{\n  \"client_id\": \"your-client-id\",\n  \"client_secret\": \"your-client-secret\",\n  \"redirect_uri\": \"your-redirect-uri\"\n}\n```\n\nThe tenant ID can be found in Azure Active Directory under \"Properties\" section.\n\n---\n\n### \ud83d\udd13 Authenticate with SharePoint\n\nRun the following command to initiate the OAuth login:\n\n```bash\npython src/servers/sharepoint/main.py auth\n```\n\nThis will open your browser and prompt you to log in to your Microsoft account. After successful authentication, the access credentials will be saved locally to:\n\n```\nlocal_auth/credentials/sharepoint/local_credentials.json\n```\n\n---\n\n### \ud83d\udee0 Features\n\nThis server exposes tools grouped into the following categories:\n\n#### \ud83d\udc65 User Management\n- `get_users` \u2013 Get all users from Microsoft 365 with filtering and pagination options\n\n#### \ud83d\udcca List Management\n- `list_site_lists` \u2013 List all lists in a SharePoint site\n- `create_list` \u2013 Create a new list in SharePoint\n- `get_list` \u2013 Get details of a SharePoint list by ID or title\n\n#### \ud83d\udcdd List-Item Management\n- `create_list_item` \u2013 Create a new item in a SharePoint list\n- `get_list_item` \u2013 Get details of a specific item in a SharePoint list\n- `get_list_items` \u2013 Get all items from a SharePoint list with filtering and sorting options\n- `delete_list_item` \u2013 Delete a specific item from a SharePoint list\n- `update_list_item` \u2013 Update fields of an existing item in a SharePoint list\n\n#### \ud83d\udcc1 File Management\n- `download_file` \u2013 Download a file from the current user's OneDrive\n- `create_folder` \u2013 Create a new folder in the current user's OneDrive\n- `upload_file` \u2013 Upload a file to the current user's OneDrive\n\n#### \ud83d\udcf0 Site Page Management\n- `create_site_page` \u2013 Create a new SharePoint site page\n- `get_site_page` \u2013 Get details of a specific page in a SharePoint site\n- `list_site_pages` \u2013 List all pages in a SharePoint site\n\n#### \ud83c\udf10 Site Information\n- `get_site_info` \u2013 Get metadata and information about a SharePoint site\n- `search_sites` \u2013 Search for SharePoint sites by keyword\n\n---\n\n### \u25b6\ufe0f Running the Server and Client\n\n#### 1. Start the Server\n\n```bash\n./start_sse_dev_server.sh\n```\n\nMake sure you've already authenticated using the `auth` command.\n\n#### 2. Run the Client\n\n```bash\npython tests/clients/RemoteMCPTestClient.py --endpoint=http://localhost:8000/sharepoint/local\n```\n\n---\n\n### \ud83d\udccc Notes on SharePoint API Usage\n\n- When using `site_url` parameters, provide the full URL to your SharePoint site (e.g., `https://<domain>.sharepoint.com/sites/<site_name>`)\n- Most tools can use either `site_id` or `site_url` for identifying the SharePoint site"
  },
  "gsheets": {
    "name": "Google Sheets guMCP Server",
    "icon": "assets/icon.png",
    "description": "Read, write and update your Google Sheets",
    "tools": [
      {
        "name": "get_spreadsheet_info",
        "description": "Retrieves spreadsheet metadata (title, sheets, etc.)"
      },
      {
        "name": "get_sheet_names",
        "description": "Lists all sheet (tab) names in a spreadsheet"
      },
      {
        "name": "create_google_sheet",
        "description": "Creates a new Google Sheets document"
      },
      {
        "name": "batch_get",
        "description": "Reads values from multiple ranges"
      },
      {
        "name": "batch_update",
        "description": "Writes values to multiple ranges"
      },
      {
        "name": "append_values",
        "description": "Appends values to the end of a range (like inserting rows)"
      },
      {
        "name": "lookup_spreadsheet_row",
        "description": "Searches for a row by column value in a specified range"
      },
      {
        "name": "clear_values",
        "description": "Clears values from a given range"
      },
      {
        "name": "copy_sheet",
        "description": "Copies a sheet from one spreadsheet to another"
      }
    ],
    "server_id": "gsheets",
    "documentation": "gsheets/README.md",
    "readme_content": "# Google Sheets Server\n\nguMCP server implementation for interacting with Google Sheets.\n\n---\n\n### \ud83d\udce6 Prerequisites\n\n- Python 3.11+\n- A Google Cloud project with the **Google Sheets API enabled**\n- OAuth 2.0 credentials configured for desktop application access\n\n---\n\n### \ud83d\udd10 Local Authentication\n\nLocal authentication uses a Google OAuth Configuration JSON file located at:\n\n```\nlocal_auth/oauth_configs/gsheets/oauth.json\n```\n\nThis file can be obtained when you are creating an oauth client from google cloud applciation in the GCP console.\n\nTo authenticate and save credentials for local testing, run:\n\n```bash\npython src/servers/gsheets/main.py auth\n```\n\nAfter successful authentication, your credentials will be stored securely for reuse.\n\n---\n\n### \ud83d\udee0\ufe0f Supported Tools\n\nThis server exposes the following tools for interacting with Google Sheets:\n\n- `create-sheet` \u2013 Create a new spreadsheet\n- `get-spreadsheet-info` \u2013 Retrieve spreadsheet metadata\n- `get-sheet-names` \u2013 List sheet/tab names\n- `batch-get` \u2013 Read values from multiple ranges\n- `batch-update` \u2013 Write values to multiple ranges\n- `append-values` \u2013 Append new rows to a sheet\n- `lookup-row` \u2013 Search for a row by value\n- `clear-values` \u2013 Clear a given sheet range\n- `copy-sheet` \u2013 Copy a sheet from one spreadsheet to another\n\n---\n\n### \u25b6\ufe0f Run\n\n#### Local Development\n\nYou can launch the server for local development using:\n\n```bash\n./start_sse_dev_server.sh\n```\n\nThis will start the MCP server and make it available for integration and testing.\n\nYou can also start the local client using the following -\n\n```bash\npython RemoteMCPTestClient.py --endpoint http://localhost:8000/gsheets/local\n```\n\n---\n\n### \ud83d\udcce Notes\n\n- Ensure your OAuth app has **Sheets API access** enabled in the Google Cloud console.\n- If you're testing with multiple users or environments, use different `user_id` values.\n- This server is designed to integrate with guMCP agents for tool-based LLM workflows.\n- Make sure you have mentioned the anthropic API key in the .env file.\n\n---\n\n### \ud83d\udcda Resources\n\n- [Google Sheets API Documentation](https://developers.google.com/sheets/api)\n- [OAuth 2.0 in Google APIs](https://developers.google.com/identity/protocols/oauth2)\n"
  },
  "teams": {
    "name": "Microsoft Teams guMCP Server",
    "icon": "assets/icon.png",
    "description": "Interact with Microsoft Teams for team management, channels, chats, and meetings",
    "tools": [
      {
        "name": "create_team",
        "description": "Create a new Microsoft Teams team"
      },
      {
        "name": "get_teams",
        "description": "Get the list of teams the user is a member of"
      },
      {
        "name": "get_team_details",
        "description": "Get details of a specific Microsoft Teams team"
      },
      {
        "name": "get_channels",
        "description": "Get the list of channels in a team"
      },
      {
        "name": "create_channel",
        "description": "Create a new channel in a team"
      },
      {
        "name": "get_chats",
        "description": "Get the list of chats for the user"
      },
      {
        "name": "get_chat_messages",
        "description": "Get messages from a specific chat"
      },
      {
        "name": "send_chat_message",
        "description": "Send a message in a chat"
      },
      {
        "name": "get_channel_messages",
        "description": "Get messages from a channel"
      },
      {
        "name": "send_channel_message",
        "description": "Send a message to a channel"
      },
      {
        "name": "post_message_reply",
        "description": "Post a reply to a message in a Teams channel"
      },
      {
        "name": "get_team_members",
        "description": "Get the list of members in a team"
      },
      {
        "name": "add_team_member",
        "description": "Add a user to a team"
      },
      {
        "name": "remove_team_member",
        "description": "Remove a user from a team"
      },
      {
        "name": "create_meeting",
        "description": "Create a new online meeting in Microsoft Teams"
      }
    ],
    "server_id": "teams",
    "documentation": "teams/README.md",
    "readme_content": "# Microsoft Teams Server\n\nguMCP server implementation for interacting with Microsoft Teams for team management, channel operations, messaging, and meetings.\n\n---\n\n### Prerequisites\n\n- Python 3.11+\n- A **Microsoft account** with access to Microsoft Teams\n- Azure Active Directory access (for some admin features)\n\n---\n\n### Microsoft Teams OAuth App Setup (First-time Setup)\n\n1. **Log in to the [Azure Portal](https://portal.azure.com/)**\n2. Navigate to **Azure Active Directory** \u2192 **App registrations** \u2192 **New registration**\n3. Fill out:\n\n   - **Name**: e.g., `MCP Teams Integration`\n   - **Supported account types**: Choose the appropriate option based on your needs (typically \"Accounts in this organizational directory only\")\n   - **Redirect URI**: Select \"Web\" and enter your redirect URI, e.g.:\n     ```\n     http://localhost:8080/\n     ```\n   - Click **\"Register\"**\n\n4. After the app is created:\n\n   - Copy the **Application (client) ID** (this is your `client_id`)\n   - Navigate to **Certificates & secrets** \u2192 **New client secret**\n   - Add a description and choose an expiration period\n   - Copy the **Value** of the secret (this is your `client_secret`)\n\n5. Navigate to **API permissions** and add the following permissions:\n\n   - Microsoft Graph API permissions (all \"Delegated\" type):\n     - User.Read\n     - offline_access\n     - Team.Create\n     - Team.ReadBasic.All\n     - TeamSettings.ReadWrite.All\n     - Channel.Create\n     - ChannelSettings.ReadWrite.All\n     - ChannelMember.ReadWrite.All\n     - ChannelMessage.Read.All\n     - ChannelMessage.Send\n     - Chat.ReadWrite\n     - Group.Read.All\n     - TeamMember.Read.All\n     - TeamMember.ReadWrite.All\n     - OnlineMeetings.ReadWrite\n6. Click **\"Add permissions\"** and then **\"Grant admin consent\"** for your organization\n7. Save all values securely.\n\n---\n\n### Local OAuth Credentials\n\nCreate a file named `oauth.json` in your directory (local_auth/oauth_configs/teams/) with the following content:\n\n```json\n{\n  \"client_id\": \"your-client-id\",\n  \"client_secret\": \"your-client-secret\",\n  \"redirect_uri\": \"your-redirect-uri\"\n}\n```\n\n---\n\n### Authenticate with Microsoft Teams\n\nRun the following command to initiate the OAuth login:\n\n```bash\npython src/servers/teams/main.py auth\n```\n\nThis will open your browser and prompt you to log in to your Microsoft account. After successful authentication, the access credentials will be saved locally to:\n\n```\nlocal_auth/credentials/teams/local_credentials.json\n```\n\n---\n\n### \ud83d\udee0 Features\n\nThis server exposes tools grouped into the following categories:\n\n#### Team Management\n\n- `get_teams` \u2013 Get the list of teams the user is a member of\n- `get_team_details` \u2013 Get details of a specific Microsoft Teams team\n- `get_team_members` \u2013 Get the list of members in a team\n- `add_team_member` \u2013 Add a user to a team\n- `remove_team_member` \u2013 Remove a user from a team\n\n#### Channel Management\n\n- `create_team` \u2013 Create a new Microsoft Teams team\n- `get_channels` \u2013 Get the list of channels in a team\n- `create_channel` \u2013 Create a new channel in a team\n\n#### Messaging\n\n- `get_chats` \u2013 Get the list of chats for the user\n- `get_chat_messages` \u2013 Get messages from a specific chat\n- `send_chat_message` \u2013 Send a message in a chat\n- `get_channel_messages` \u2013 Get messages from a channel\n- `send_channel_message` \u2013 Send a message to a channel\n- `post_message_reply` \u2013 Post a reply to a message in a Teams channel\n\n#### Meetings\n\n- `create_meeting` \u2013 Create a new online meeting in Microsoft Teams\n\n---\n\n### \u25b6Running the Server and Client\n\n#### 1. Start the Server\n\n```bash\n./start_sse_dev_server.sh\n```\n\nMake sure you've already authenticated using the `auth` command.\n\n#### 2. Run the Client\n\n```bash\npython tests/clients/RemoteMCPTestClient.py --endpoint=http://localhost:8000/teams/local\n```\n\n---\n\n### Notes on Microsoft Teams API Usage\n\n- Some operations require admin permissions (like viewing all teams in the organization).\n- Message content supports HTML formatting for rich text messages.\n- All endpoints are RESTful and return JSON.\n- Team, channel, and user IDs are required for many operations - use the appropriate listing tools first to obtain these IDs.\n"
  },
  "word": {
    "name": "Word guMCP Server",
    "icon": "assets/icon.png",
    "description": "Interact with Microsoft Word documents stored in OneDrive",
    "tools": [
      {
        "name": "list_documents",
        "description": "List Word documents from OneDrive"
      },
      {
        "name": "create_document",
        "description": "Create a new Word document in OneDrive"
      },
      {
        "name": "read_document",
        "description": "Read text content from a Word document"
      },
      {
        "name": "write_document",
        "description": "Append content to an existing Word document"
      },
      {
        "name": "search_documents",
        "description": "Search for Word documents by content"
      },
      {
        "name": "download_document",
        "description": "Get a download URL for a Word document"
      },
      {
        "name": "delete_document",
        "description": "Delete a Word document from OneDrive"
      }
    ],
    "server_id": "word",
    "documentation": "word/README.md",
    "readme_content": "# Word Server\n\nguMCP server implementation for interacting with Microsoft Word documents stored in OneDrive.\n\n### Prerequisites\n\n- Python 3.11+\n- A Microsoft account with OneDrive access\n- OAuth Application in Microsoft Entra ID (formerly Azure AD)\n\n### OAuth Setup with Microsoft Entra ID\n\n1. Sign in to the [Microsoft Azure Portal](https://portal.azure.com)\n2. Navigate to Microsoft Entra ID (Azure Active Directory) by visiting: [https://portal.azure.com/#view/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/~/Overview](https://portal.azure.com/#view/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/~/Overview)\n3. Click on **App registrations** in the left menu, then click **+ New registration**\n4. Provide a name for your application, select the appropriate account type (typically \"Accounts in any organizational directory and personal Microsoft accounts\"), and set the redirect URI to `http://localhost:8080` (type: Web)\n5. Click **Register** to create the application\n6. Copy the **Application (client) ID** displayed on the overview page - this will be your client ID\n7. Under **Certificates & secrets** in the left menu, click **+ New client secret**\n8. Provide a description, select an expiration period, and click **Add**\n9. **Important**: Immediately copy the generated secret **Value** (it will only be shown once) - this will be your client secret\n10. Navigate to **API permissions** in the left menu and click **+ Add a permission**\n11. Select **Microsoft Graph** > **Delegated permissions**\n12. Add the following permissions:\n    - `Files.ReadWrite`\n    - `Sites.ReadWrite.All`\n    - `offline_access`\n13. Click **Add permissions** and then **Grant admin consent** if you have admin rights\n\n### Local Authentication\n\nLocal authentication uses an OAuth Configuration JSON file:\n\n```json\nlocal_auth/oauth_configs/word/oauth.json\n```\n\nCreate the following file with the relevant attributes from your Entra ID app:\n\n```json\n{\n  \"client_id\": \"your_application_client_id_here\",\n  \"client_secret\": \"your_client_secret_value_here\",\n  \"redirect_uri\": \"http://localhost:8080\"\n}\n```\n\nWhen authorizing users, the server will automatically:\n\n1. Redirect to Microsoft's authorization URL with your configured credentials\n2. Exchange the received code for an access token using Microsoft's OAuth endpoints\n\nFor local development, you can authenticate using:\n\n```bash\npython src/servers/word/main.py auth\n```\n\nThis will launch a browser-based authentication flow to obtain and save credentials.\n"
  },
  "discourse": {
    "name": "Discourse guMCP Server",
    "icon": "assets/icon.png",
    "description": "Interact with Discourse forums and communities",
    "resources": [
      {
        "name": "categories",
        "description": "Discourse forum categories"
      },
      {
        "name": "topics",
        "description": "Topics from Discourse forums"
      }
    ],
    "tools": [
      {
        "name": "list_categories",
        "description": "List all categories in the Discourse forum"
      },
      {
        "name": "search_topics",
        "description": "Search for topics in Discourse"
      },
      {
        "name": "create_topic",
        "description": "Create a new topic in Discourse"
      },
      {
        "name": "create_post",
        "description": "Create a new post in a topic"
      },
      {
        "name": "get_user_info",
        "description": "Get information about a Discourse user"
      }
    ],
    "server_id": "discourse",
    "documentation": "discourse/README.md",
    "readme_content": "# Discourse Server\n\nguMCP server implementation for interacting with Discourse forums and communities.\n\n### Prerequisites\n\n- Python 3.11+\n- A Discourse instance\n- A Discourse API key with appropriate permissions\n\n### Features\n\n- List categories from your Discourse instance\n- Search for topics using keywords\n- Create new topics in specific categories\n- Post replies to existing topics\n- Retrieve user information\n\n### Local Authentication\n\nTo set up and authenticate with your Discourse instance, run:\n\n```bash\npython src/servers/discourse/main.py auth\n```\n\nYou will be prompted to enter:\n1. Your Discourse instance URL (e.g., https://forum.example.com)\n2. Your Discourse API key\n3. The username associated with the API key"
  },
  "zoom": {
    "name": "Zoom GuMCP Server",
    "icon": "assets/icon.png",
    "description": "Server for interacting with Zoom Meetings API",
    "tools": [
      {
        "name": "create_meeting",
        "description": "Create a new Zoom meeting"
      },
      {
        "name": "update_meeting",
        "description": "Update an existing Zoom meeting"
      },
      {
        "name": "get_meeting",
        "description": "Get details of a Zoom meeting"
      },
      {
        "name": "list_meetings",
        "description": "List all Zoom meetings"
      },
      {
        "name": "list_upcoming_meetings",
        "description": "List all upcoming Zoom meetings"
      },
      {
        "name": "list_all_recordings",
        "description": "List all recordings"
      },
      {
        "name": "get_meeting_recordings",
        "description": "Get recordings for a specific meeting"
      },
      {
        "name": "get_meeting_participant_reports",
        "description": "Get participant reports for a meeting"
      },
      {
        "name": "add_attendees",
        "description": "Add attendees to a Zoom meeting"
      },
      {
        "name": "fetch_meetings_by_date",
        "description": "Fetch all Zoom meetings for a given date"
      },
      {
        "name": "delete_meeting",
        "description": "Delete a Zoom meeting"
      }
    ],
    "server_id": "zoom",
    "documentation": "zoom/README.md",
    "readme_content": "# Zoom GuMCP Server\n\nGuMCP server implementation for interacting with Zoom Meetings API using OAuth authentication.\n\n---\n\n### \ud83d\udce6 Prerequisites\n\n- Python 3.11+\n- A Zoom OAuth App created at [Zoom App Marketplace](https://marketplace.zoom.us/develop/create)\n- A local OAuth config file with your Zoom credentials\n\n---\n\n### \ud83d\udee0\ufe0f Step 1: Create a Zoom OAuth App\n\n1. Go to [Zoom App Marketplace](https://marketplace.zoom.us/develop/create) and sign in\n2. Click **\"Develop\"** in the top menu\n3. Click **\"Create App\"** > **\"General App\"**\n4. Select **\"User-managed app\"** (this is important!)\n5. You'll see your app credentials (Client ID and Client Secret) - save these for later\n6. (Optional) Click the edit icon in the top left to change your app name\n7. Click **\"Continue\"**\n\n---\n\n### \ud83d\udee0\ufe0f Step 2: Configure OAuth Settings\n\n1. Under **OAuth Information**, set up:\n   - **Redirect URL for OAuth**: e.g. `http://localhost:8080`\n   - **Add Whitelist URL**: e.g. `http://localhost:8080` (same as redirect URL)\n2. Click **\"Continue\"**\n\n---\n\n### \ud83d\udee0\ufe0f Step 3: Add Required Scopes\n\n1. In the **Scopes** section, click **\"Add Scopes\"**\n2. Search for and add the following scopes:\n\n**Required Scopes:**\n- `meeting:read:list_upcoming_meetings` - List upcoming meetings\n- `meeting:read:participant` - Read meeting participants\n- `meeting:read:list_meetings` - List all meetings\n- `meeting:read:meeting` - Read meeting details\n- `meeting:write:meeting` - Create and update meetings\n- `meeting:write:registrant` - Add meeting registrants\n- `meeting:update:meeting` - Update meeting settings\n- `meeting:delete:meeting` - Delete meetings\n- `meeting:write:invite_links` - Manage meeting invite links\n- `cloud_recording:read:list_recording_files` - Access recording files\n- `cloud_recording:read:list_user_recordings` - List user recordings\n\n3. Click **\"Continue\"**\n\n---\n\n### \ud83d\udee0\ufe0f Step 4: Complete App Setup\n\n1. Review your app information\n2. Click **\"Submit\"**\n3. Once approved, click **\"Activate\"** to make your app live\n\n---\n\n### \ud83d\udd10 Step 5: Set Up Local Configuration\n\n1. Create a new folder called `local_auth` in your project directory\n2. Inside that, create a folder called `oauth_configs`\n3. Inside that, create a folder called `zoom`\n4. Create a new file called `oauth.json` in the `zoom` folder\n5. Copy and paste this into the file, replacing the placeholders with your actual values:\n\n```json\n{\n  \"client_id\": \"your-client-id-here\",\n  \"client_secret\": \"your-client-secret-here\",\n  \"redirect_uri\": \"your-redirect-uri-here\" e.g. `http://localhost:8080`\n}\n```\n\n> \u26a0\ufe0f **IMPORTANT**: Never share or commit this file to version control. Add it to your `.gitignore`.\n\n---\n\n### \ud83d\udd10 Step 6: Authenticate Your App\n\n1. Open your terminal\n2. Run this command:\n   ```bash\n   python src/servers/zoom/main.py auth\n   ```\n3. Log in to your Zoom account\n4. Click **\"Allow\"** to authorize the app\n5. You're now authenticated! \ud83c\udf89\n\n> You only need to do this authentication step once, unless your token expires.\n\n---\n\n### \ud83d\udee0\ufe0f Supported Tools\n\nThis server exposes the following tools for interacting with Zoom:\n\n- `create_meeting` \u2013 Create a new Zoom meeting\n- `update_meeting` \u2013 Update an existing Zoom meeting\n- `get_meeting` \u2013 Get details of a Zoom meeting\n- `list_meetings` \u2013 List all Zoom meetings\n- `list_upcoming_meetings` \u2013 List all upcoming Zoom meetings\n- `list_all_recordings` \u2013 List all recordings\n- `get_meeting_recordings` \u2013 Get recordings for a specific meeting\n- `get_meeting_participant_reports` \u2013 Get participant reports for a meeting\n- `add_attendees` \u2013 Add attendees to a Zoom meeting\n- `fetch_meetings_by_date` \u2013 Fetch all Zoom meetings for a given date\n- `delete_meeting` \u2013 Delete a Zoom meeting\n\n---\n\n### \u25b6\ufe0f Running the Server\n\n#### Local Development\n\n1. Start the server:\n   ```bash\n   ./start_sse_dev_server.sh\n   ```\n\n2. In a new terminal, start the test client:\n   ```bash\n   python RemoteMCPTestClient.py --endpoint http://localhost:8000/zoom/local\n   ```\n\n---\n\n### \ud83d\udcce Important Notes\n\n- All dates should be in ISO format with timezone\n- If you don't specify a timezone, the server will add one automatically\n- If you run into any issues, check that:\n  - You selected \"User-managed app\" during setup\n  - You added all the required scopes\n  - Your OAuth configuration file is in the correct location\n  - You're using the correct redirect URL\n\n---\n\n### \ud83d\udcda Need Help?\n\n- [Zoom API Documentation](https://marketplace.zoom.us/docs/api-reference/zoom-api/)\n- [Zoom OAuth Documentation](https://marketplace.zoom.us/docs/guides/auth/oauth/)\n- [Zoom App Types](https://marketplace.zoom.us/docs/guides/build/app-types/)\n"
  },
  "hunter_io": {
    "name": "Hunter.io guMCP Server",
    "icon": "assets/icon.png",
    "description": "Interact with Hunter.io using the Hunter.io API, including email finding and verification, domain and company email searches, lead management, campaign management, and email and company enrichment.",
    "tools": [
      {
        "name": "domain_search",
        "description": "Search for all email addresses associated with a given domain."
      },
      {
        "name": "email_finder",
        "description": "Find a specific email address using domain and name."
      },
      {
        "name": "email_verifier",
        "description": "Verify the deliverability and validity of an email address."
      },
      {
        "name": "email_count",
        "description": "Get the count of email addresses Hunter.io has for a given domain."
      },
      {
        "name": "email_enrichment",
        "description": "Get detailed information about an email address, including social profiles and company details."
      },
      {
        "name": "company_enrichment",
        "description": "Get detailed information about a company, including size, industry, and social profiles."
      },
      {
        "name": "account_info",
        "description": "Get your Hunter.io account information and usage statistics."
      },
      {
        "name": "list_leads",
        "description": "List all leads in your account with optional filtering options."
      },
      {
        "name": "get_lead",
        "description": "Get detailed information about a specific lead by ID."
      },
      {
        "name": "create_lead",
        "description": "Create a new lead with detailed contact and company information."
      },
      {
        "name": "update_lead",
        "description": "Update an existing lead's information."
      },
      {
        "name": "delete_lead",
        "description": "Delete a lead from your account."
      },
      {
        "name": "list_leads_lists",
        "description": "Get all leads lists in your account."
      },
      {
        "name": "get_leads_list",
        "description": "Get a specific leads list by ID."
      },
      {
        "name": "create_leads_list",
        "description": "Create a new leads list with a name."
      },
      {
        "name": "update_leads_list",
        "description": "Update a leads list by ID."
      },
      {
        "name": "delete_leads_list",
        "description": "Delete a leads list by ID."
      },
      {
        "name": "list_campaigns",
        "description": "List all campaigns in your account."
      },
      {
        "name": "list_campaign_recipients",
        "description": "List all recipients of a campaign."
      },
      {
        "name": "add_campaign_recipients",
        "description": "Add recipients to a campaign using emails or lead IDs."
      },
      {
        "name": "cancel_campaign_recipients",
        "description": "Cancel scheduled emails to recipients in a campaign."
      },
      {
        "name": "start_campaign",
        "description": "Start a campaign that is in draft state."
      }
    ],
    "server_id": "hunter_io",
    "documentation": "hunter_io/README.md",
    "readme_content": "# Hunter.io Server\n\nguMCP server implementation for interacting with **Hunter.io** API V2.\n\n---\n\n### \ud83d\udce6 Prerequisites\n\n- Python 3.11+\n- A Hunter.io account\n- Hunter.io API key\n\n---\n\n### \ud83d\udd11 API Key Generation\n\nTo generate a Hunter.io API key, follow these steps:\n\n1. Go to the [Hunter.io API Keys](https://hunter.io/api-keys) page\n2. Click \"Generate API Key\" if you don't have one already\n3. Copy the generated API key\n\n---\n\n### \ud83d\udd10 Local Authentication\n\nLocal authentication uses a Hunter.io API key stored securely. To authenticate and save your API key for local testing, run:\n\n```bash\npython src/servers/hunter_io/main.py auth\n```\n\nIt will ask you to enter the api key.\nAfter successful authentication, your API key will be stored securely for reuse.\n\n---\n\n### \ud83d\udee0\ufe0f Supported Tools\n\nThis server exposes the following tools for interacting with Hunter.io:\n\n#### Core API Tools\n- `domain_search` \u2013 Search for all email addresses associated with a given domain\n- `email_finder` \u2013 Find a specific email address using domain and name\n- `email_verifier` \u2013 Verify the deliverability and validity of an email address\n- `email_count` \u2013 Get the count of email addresses for a domain\n- `email_enrichment` \u2013 Get detailed information about an email address\n- `company_enrichment` \u2013 Get detailed information about a company\n- `account_info` \u2013 Get your Hunter.io account information\n\n#### Lead Management Tools\n- `list_leads` \u2013 List all leads with optional filtering\n- `get_lead` \u2013 Get detailed information about a specific lead\n- `create_lead` \u2013 Create a new lead with contact information\n- `update_lead` \u2013 Update an existing lead's information\n- `delete_lead` \u2013 Delete a lead from your account\n\n#### Leads Lists Tools\n- `list_leads_lists` \u2013 Get all leads lists in your account\n- `get_leads_list` \u2013 Get a specific leads list by ID\n- `create_leads_list` \u2013 Create a new leads list with a name\n- `update_leads_list` \u2013 Update a leads list by ID\n- `delete_leads_list` \u2013 Delete a leads list by ID\n\n#### Campaign Tools\n- `list_campaigns` \u2013 List all campaigns in your account\n- `list_campaign_recipients` \u2013 List all recipients of a campaign\n- `add_campaign_recipients` \u2013 Add recipients to a campaign\n- `cancel_campaign_recipients` \u2013 Cancel scheduled emails to recipients\n- `start_campaign` \u2013 Start a campaign that is in draft state\n\n---\n\n### \u25b6\ufe0f Run\n\n#### Local Development\n\nYou can launch the server for local development using:\n\n```bash\n./start_sse_dev_server.sh\n```\n\nThis will start the Hunter.io MCP server and make it available for integration and testing.\n\nYou can also start the local client using:\n\n```bash\npython RemoteMCPTestClient.py --endpoint http://localhost:8000/hunter_io/local\n```\n\n---\n\n### \ud83d\udcce Notes\n\n- The server respects Hunter.io's API rate limits:\n  - 50 requests per day on the free plan\n  - 500 requests per day on the starter plan\n  - Custom limits for higher-tier plans\n- Make sure your `.env` file contains the appropriate API keys if you're using external LLM services like Anthropic\n\n---\n\n### \ud83d\udcda Resources\n\n- [Hunter.io API Documentation](https://hunter.io/api/docs)\n"
  },
  "loops": {
    "name": "Loops guMCP Server",
    "icon": "assets/icon.png",
    "description": "Interact with Loops email marketing and customer engagement API",
    "tools": [
      {
        "name": "add_contact",
        "description": "Adds a contact to your Loops account."
      },
      {
        "name": "add_custom_property",
        "description": "Adds a new custom property for contacts"
      },
      {
        "name": "delete_contact_by_email",
        "description": "Deletes a contact by email"
      },
      {
        "name": "delete_contact_by_user_id",
        "description": "Deletes a contact by user ID. Works when User ID was provided when creating the contact"
      },
      {
        "name": "get_contact_by_email",
        "description": "Gets a contact by email"
      },
      {
        "name": "get_contact_by_user_id",
        "description": "Gets a contact by user ID"
      },
      {
        "name": "update_contact_by_email",
        "description": "Updates a contact by email, or creates one if not existing"
      },
      {
        "name": "update_contact_by_user_id",
        "description": "Updates a contact by user ID"
      },
      {
        "name": "send_transactional_email",
        "description": "Sends a transactional email"
      },
      {
        "name": "send_event_by_email",
        "description": "Sends an event by email"
      },
      {
        "name": "send_event_by_user_id",
        "description": "Sends an event by user ID"
      }
    ],
    "server_id": "loops",
    "documentation": "loops/README.md",
    "readme_content": "# Loops Server\n\nguMCP server implementation for interacting with Loops email marketing and customer engagement APIs.\n\n## \ud83d\udce6 Prerequisites\n\n- Python 3.11+\n- A Loops account\n- Loops API Key (found in your Loops Dashboard)\n\n## \ud83d\udd11 API Key Generation\n\nTo generate a Loops API key, follow these steps:\n\n1. Log in to your Loops Dashboard\n2. Navigate to your User profile on the top left corner of the page\n3. Click on the settings icon present over there\n4. Navigate to API section [API Section](https://app.loops.so/settings?page=api)\n5. Click on Generate Key \n   \n> \u26a0\ufe0f **Important**: Your API Key will only be shown once. Store it securely!\n\n## \ud83d\udd10 Local Authentication\n\nTo authenticate and save your Loops credentials for local testing, run:\n\n```bash\npython src/servers/loops/main.py auth\n```\n\nThis will:\n1. Prompt you to enter your Loops API key\n2. Store your credentials securely\n\n## \ud83d\udee0\ufe0f Features\n\nThe Loops server supports a comprehensive set of operations grouped into categories:\n\n### Contact Management:\n\n- `add_contact`: Adds a contact to your Loops account. Include a userId field to enable contact deletion by user ID\n- `add_custom_property`: Adds a new custom property for contacts\n- `delete_contact_by_email`: Deletes a contact by email\n- `delete_contact_by_user_id`: Deletes a contact by user ID. Only works if userId was provided when creating the contact\n- `get_contact_by_email`: Gets a contact by email\n- `get_contact_by_user_id`: Gets a contact by user ID\n- `update_contact_by_email`: Updates a contact by email, or creates one if not existing\n- `update_contact_by_user_id`: Updates a contact by user ID\n\n### Email Tools:\n\n- `send_transactional_email`: Sends a transactional email\n\n### Events:\n\n- `send_event_by_email`: Sends an event by email\n- `send_event_by_user_id`: Sends an event by user ID\n\nAPI call\n\n## Understanding User IDs in Loops\n\nWhen working with contacts in Loops, there are two different types of IDs:\n\n1. **Contact ID**: This is an internal ID that Loops generates when a contact is created. While this ID is returned in API responses, it's primarily for internal use and is not directly usable for deletion or fetching operations.\n\n2. **User ID**: This is a custom identifier that YOU provide when creating a contact. This is the ID you should use with `delete_contact_by_user_id` and other user ID-based operations.\n\nTo use user ID-based operations effectively:\n- When creating a contact with `add_contact`, include a `user_id` field in your request\n- Use this same `user_id` in subsequent operations that require a user ID\n\nIf you don't have a user ID for a contact, you can still delete the contact using the email address with `delete_contact_by_email`.\n\n## \u25b6\ufe0f Running the Server and Client\n\n### 1. Start the Server\n\nYou can launch the server for local development using:\n\n```bash\n./start_sse_dev_server.sh\n```\n\n### 2. Connect with the Client\n\nOnce the server is running, connect to it using the test client:\n\n```bash\npython tests/clients/RemoteMCPTestClient.py --endpoint=http://localhost:8000/loops/local\n```\n\n## \ud83d\udcce Notes\n\n### API Key Security:\n- Store API keys securely and never commit them to source control\n- Rotate your keys periodically for enhanced security\n- Use appropriate access levels for different environments\n\n### Rate Limiting:\n- Loops API has rate limits that vary by endpoint\n- The server handles rate limiting gracefully with appropriate error messages\n\n### Email Delivery:\n- Transactional emails have higher delivery priority\n- Test transactional templates before sending to customers\n- Monitor your email performance through the Loops Dashboard\n\n## \ud83d\udcda Resources\n\n- [Loops API Documentation](https://docs.loops.so/reference)\n- [Loops Dashboard](https://app.loops.so)\n- [Loops API Usage Guide](https://docs.loops.so/reference/api-key-reference) "
  },
  "salesforce": {
    "name": "Salesforce guMCP Server",
    "icon": "assets/icon.png",
    "description": "Interact with Salesforce data and execute operations",
    "tools": [
      {
        "name": "soql_query",
        "description": "Executes a SOQL query to retrieve Salesforce records with support for relationships and complex filters"
      },
      {
        "name": "sosl_search",
        "description": "Performs a text-based search across multiple Salesforce objects using SOSL"
      },
      {
        "name": "describe_object",
        "description": "Retrieves detailed metadata about a Salesforce object including fields, relationships, and permissions"
      },
      {
        "name": "get_record",
        "description": "Retrieves a specific Salesforce record by ID with all accessible fields"
      },
      {
        "name": "create_record",
        "description": "Creates a new record in Salesforce"
      },
      {
        "name": "update_record",
        "description": "Updates an existing Salesforce record"
      },
      {
        "name": "delete_record",
        "description": "Deletes a Salesforce record"
      },
      {
        "name": "get_org_limits",
        "description": "Retrieves current organization limits and usage"
      }
    ],
    "server_id": "salesforce",
    "documentation": "salesforce/README.md",
    "readme_content": "\n# Salesforce Server\n\nguMCP server implementation for interacting with Salesforce.\n\n---\n\n## \ud83d\ude80 Prerequisites\n\n- Python 3.11+\n- A Salesforce Developer Account ([Sign up for Developer Edition](https://developer.salesforce.com/signup))\n- A Connected App in Salesforce with OAuth enabled\n\n---\n\n## \ud83d\udd27 Creating a Salesforce Connected App\n\nFollow these steps to create a Connected App in Salesforce and obtain the credentials:\n\n1. **Login to Salesforce Developer Account**\n   - Visit: https://developer.salesforce.com/signup\n\n2. **Navigate to App Manager**\n   - Click on the gear icon \u2699\ufe0f \u2192 **Setup**\n   - Search for **App Manager** in the Quick Find box\n   - Click **New Connected App**\n\n3. **Basic Information**\n   - Fill in the **Connected App Name** (e.g., `guMCP App`)\n   - Fill in **API Name** (auto-filled)\n   - Provide a valid **Contact Email**\n\n4. **Enable OAuth Settings**\n   - Scroll to **API (Enable OAuth Settings)** and check \u2705 `Enable OAuth Settings`\n   - **Callback URL (redirect URI)**:\n     - (e.g., `http://localhost:8080`)\n   - **Selected OAuth Scopes**:\n     Add the required scopes\n\n5. **Save and Continue**\n   - Click **Save**. It may take 2-10 minutes to activate.\n\n6. **Get Client ID and Secret**\n   - Once saved, open your Connected App from the App Manager\n   - Go to **View** \u2192 You\u2019ll find your:\n     - **Consumer Key** (Client ID)\n     - **Consumer Secret** (Client Secret)\n\n---\n\n## \ud83d\udd10 Local Authentication Setup\n\nCreate the following file:\n\n```\nlocal_auth/oauth_configs/salesforce/oauth.json\n```\n\nExample content:\n\n```json\n{\n  \"client_id\": \"your-client-id\",\n  \"client_secret\": \"your-client-secret\",\n  \"redirect_uri\": \"your-redirect-uri\",\n  \"login_domain\":\"your-company.my.salesforce.com\" # This is optional, add this only if you have custom login subdomain (ex.)\n\n}\n```\n\n---\n\n## \ud83e\uddea Verify Authentication\n\nTo initiate the auth flow:\n\n```bash\npython src/servers/salesforce/main.py auth\n```\n\n---\n\n## \ud83d\udee0\ufe0f Available Tools\n\n1. **SOQL Query** (`soql_query`)\n   - Retrieve records using Salesforce Object Query Language\n\n2. **SOSL Search** (`sosl_search`)\n   - Full-text search across multiple objects\n\n3. **Object Description** (`describe_object`)\n   - Retrieves metadata like field types, required fields, picklists\n\n4. **Record Operations**\n   - `get_record`: Retrieve by ID\n   - `create_record`: Add new record\n   - `update_record`: Modify existing\n   - `delete_record`: Delete record\n\n5. **Organization Limits** (`get_org_limits`)\n   - API usage stats and limits overview\n\n---\n\n### \u25b6\ufe0f Run\n\n#### Local Development\n\nYou can launch the server for local development using:\n\n```bash\n./start_sse_dev_server.sh\n```\n\nThis will start the Salesforce MCP server and make it available for integration and testing.\n\nYou can also start the local client using the following:\n\n```bash\npython RemoteMCPTestClient.py --endpoint http://localhost:8000/salesforce/local\n```\n\n---\n\n## \ud83d\udd10 Security Notes\n\n- Keep OAuth credentials private\n- Use only necessary scopes\n- Rotate `client_secret` periodically\n- Monitor usage to avoid quota issues\n"
  },
  "slack": {
    "name": "Slack guMCP Server",
    "icon": "assets/icon.png",
    "description": "Interact with Slack channels and messages",
    "resources": [
      {
        "name": "channel",
        "description": "Slack channels, including public and private ones. Content typically includes a list of messages.",
        "required_scopes": [
          "channels:history",
          "groups:history",
          "channels:read"
        ]
      }
    ],
    "tools": [
      {
        "name": "read_messages",
        "description": "Read messages from a Slack channel",
        "required_scopes": [
          "channels:history",
          "groups:history",
          "im:read"
        ]
      },
      {
        "name": "send_message",
        "description": "Send a message to a Slack channel or user",
        "required_scopes": [
          "chat:write",
          "chat:write.customize"
        ]
      },
      {
        "name": "create_canvas",
        "description": "Create a Slack canvas message with rich content",
        "required_scopes": [
          "chat:write",
          "chat:write.customize"
        ]
      },
      {
        "name": "add_user_to_channel",
        "description": "Add a user to a Slack channel",
        "required_scopes": [
          "channels:manage",
          "groups:write"
        ]
      },
      {
        "name": "upload_file",
        "description": "Upload a file to Slack",
        "required_scopes": [
          "files:write"
        ]
      },
      {
        "name": "react_to_message",
        "description": "Add a reaction to a message",
        "required_scopes": [
          "reactions:write"
        ]
      },
      {
        "name": "delete_message",
        "description": "Delete a Slack message",
        "required_scopes": [
          "chat:write"
        ]
      },
      {
        "name": "get_message_thread",
        "description": "Retrieve a message and its replies",
        "required_scopes": [
          "channels:history",
          "groups:history",
          "im:read"
        ]
      },
      {
        "name": "pin_message",
        "description": "Pin a message in a channel/DM",
        "required_scopes": [
          "pins:write"
        ]
      },
      {
        "name": "unpin_message",
        "description": "Unpin a message",
        "required_scopes": [
          "pins:write"
        ]
      },
      {
        "name": "get_user_presence",
        "description": "Check a user's online status",
        "required_scopes": [
          "users:read"
        ]
      },
      {
        "name": "invite_to_channel",
        "description": "Invite user(s) to a channel",
        "required_scopes": [
          "channels:manage",
          "groups:write"
        ]
      },
      {
        "name": "remove_from_channel",
        "description": "Remove user from a channel",
        "required_scopes": [
          "channels:manage",
          "groups:write"
        ]
      },
      {
        "name": "get_file_info",
        "description": "Get metadata for a specific file",
        "required_scopes": [
          "files:read"
        ]
      },
      {
        "name": "list_pinned_items",
        "description": "List pinned items in a channel/DM",
        "required_scopes": [
          "pins:read"
        ]
      },
      {
        "name": "create_channel",
        "description": "Create a new public or private Slack channel",
        "required_scopes": [
          "channels:manage",
          "groups:write"
        ]
      },
      {
        "name": "delete_channel",
        "description": "Delete (archive) a Slack channel",
        "required_scopes": [
          "channels:manage",
          "groups:write"
        ]
      },
      {
        "name": "update_channel_topic",
        "description": "Update a channel's topic",
        "required_scopes": [
          "channels:manage",
          "groups:write"
        ]
      },
      {
        "name": "update_channel_purpose",
        "description": "Update a channel's purpose",
        "required_scopes": [
          "channels:manage",
          "groups:write"
        ]
      },
      {
        "name": "archive_channel",
        "description": "Archive a Slack channel",
        "required_scopes": [
          "channels:manage",
          "groups:write"
        ]
      },
      {
        "name": "unarchive_channel",
        "description": "Unarchive a Slack channel",
        "required_scopes": [
          "channels:manage",
          "groups:write"
        ]
      }
    ],
    "server_id": "slack",
    "documentation": "slack/README.md",
    "readme_content": "# Slack Server\n\nguMCP server implementation for interacting with Slack.\n\n### Prerequisites\n\n- Python 3.11+\n- A Slack App ([Create Slack App](https://api.slack.com/quickstart#creating)) with the following scopes:\n  - channels:history\n  - channels:read\n  - chat:write\n  - chat:write.customize\n  - groups:read\n  - groups:write\n  - groups:history\n  - pins:read\n  - pins:write\n  - reactions:write\n  - files:read\n  - files:write\n  - im:read\n  - channels:manage\n  - users:read\n\n### Local Authentication\n\nLocal authentication uses a OAuth Configuration JSON file:\n\n```\nlocal_auth/oauth_configs/slack/oauth.json\n```\n\nCreate the following file with the relevant attributes for your app:\n\n```json\n{\n  \"client_id\": \"xxxxxxxxxxxxxxxxxxxxx\",\n  \"client_secret\": \"xxxxxxxxxxxxxxxxxxxxx\",\n  \"redirect_uri\": \"https://xxxxxxxxxxxxx\"\n}\n```\n\n- Note: Slack requires https for the redirect uri, so if running locally, setup an [ngrok redirect](https://ngrok.com/docs/universal-gateway/http/) to port 8080\n\nTo set up and verify authentication, run:\n\n```bash\npython src/servers/slack/main.py auth\n```\n\n### Run\n\n#### Local Development\n\n```bash\npython src/servers/local.py --server slack --user-id local\n```\n"
  },
  "posthog": {
    "name": "PostHog guMCP Server",
    "icon": "assets/icon.png",
    "description": "Interact with PostHog analytics platform for event tracking, feature flags, and user management",
    "tools": [
      {
        "name": "list_actions",
        "description": "List all actions in PostHog"
      },
      {
        "name": "create_action",
        "description": "Create a new action in PostHog"
      },
      {
        "name": "get_action",
        "description": "Get details of a specific action"
      },
      {
        "name": "update_action",
        "description": "Update an existing action"
      },
      {
        "name": "capture_event",
        "description": "Capture a new event in PostHog"
      },
      {
        "name": "identify_user",
        "description": "Identify a user with properties"
      },
      {
        "name": "group_identify",
        "description": "Identify a group with properties"
      },
      {
        "name": "capture_group_event",
        "description": "Capture an event for a group"
      },
      {
        "name": "check_feature_flag",
        "description": "Check if a feature flag is enabled"
      },
      {
        "name": "get_feature_flag_payload",
        "description": "Get the payload for a feature flag"
      },
      {
        "name": "get_all_flags",
        "description": "Get all feature flags"
      },
      {
        "name": "list_annotations",
        "description": "List all annotations"
      },
      {
        "name": "create_annotation",
        "description": "Create a new annotation"
      },
      {
        "name": "get_annotation",
        "description": "Get details of a specific annotation"
      },
      {
        "name": "update_annotation",
        "description": "Update an existing annotation"
      },
      {
        "name": "list_cohorts",
        "description": "List all cohorts"
      },
      {
        "name": "create_cohort",
        "description": "Create a new cohort"
      },
      {
        "name": "get_cohort",
        "description": "Get details of a specific cohort"
      },
      {
        "name": "update_cohort",
        "description": "Update an existing cohort"
      },
      {
        "name": "delete_cohort",
        "description": "Delete a cohort"
      },
      {
        "name": "list_dashboards",
        "description": "List all dashboards"
      },
      {
        "name": "create_dashboard",
        "description": "Create a new dashboard"
      },
      {
        "name": "get_dashboard",
        "description": "Get details of a specific dashboard"
      },
      {
        "name": "update_dashboard",
        "description": "Update an existing dashboard"
      },
      {
        "name": "delete_dashboard",
        "description": "Delete a dashboard"
      },
      {
        "name": "list_dashboard_collaborators",
        "description": "List collaborators for a dashboard"
      },
      {
        "name": "add_dashboard_collaborator",
        "description": "Add a collaborator to a dashboard"
      },
      {
        "name": "get_dashboard_sharing",
        "description": "Get sharing settings for a dashboard"
      },
      {
        "name": "list_persons",
        "description": "List all persons"
      },
      {
        "name": "get_person",
        "description": "Get details of a specific person"
      },
      {
        "name": "list_experiments",
        "description": "List all experiments"
      },
      {
        "name": "create_experiment",
        "description": "Create a new experiment"
      },
      {
        "name": "get_experiment",
        "description": "Get details of a specific experiment"
      },
      {
        "name": "update_experiment",
        "description": "Update an existing experiment"
      },
      {
        "name": "check_experiments_requiring_flag",
        "description": "Check experiments that require a feature flag"
      },
      {
        "name": "list_insights",
        "description": "List all insights"
      },
      {
        "name": "create_insight",
        "description": "Create a new insight"
      },
      {
        "name": "get_insight",
        "description": "Get details of a specific insight"
      },
      {
        "name": "update_insight",
        "description": "Update an existing insight"
      },
      {
        "name": "get_insight_sharing",
        "description": "Get sharing settings for an insight"
      },
      {
        "name": "get_insight_activity",
        "description": "Get activity for a specific insight"
      },
      {
        "name": "mark_insight_viewed",
        "description": "Mark an insight as viewed"
      },
      {
        "name": "get_insights_activity",
        "description": "Get activity for all insights"
      },
      {
        "name": "get_trend_insights",
        "description": "Get trend insights"
      },
      {
        "name": "create_trend_insight",
        "description": "Create a new trend insight"
      }
    ],
    "server_id": "posthog",
    "documentation": "posthog/README.md",
    "readme_content": "# PostHog Server\n\nguMCP server implementation for interacting with PostHog Analytics API.\n\n---\n\n### \ud83d\udce6 Prerequisites\n\n- Python 3.11+\n- A PostHog account with API access\n- PostHog API key with appropriate permissions\n\n---\n\n### \ud83d\udee0\ufe0f Step 1: Create a PostHog Account\n\n1. Go to [PostHog](https://app.posthog.com/signup)\n2. Sign up for a new account or log in to your existing account\n\n---\n\n### \ud83d\udee0\ufe0f Step 2: Set Up Your Organization and Project\n\n1. If you don't have an organization:\n   - Click \"Create Organization\"\n   - Enter your organization name and details\n   - Click \"Create Organization\"\n2. If you don't have a project:\n   - Click \"Create Project\"\n   - Enter your project name and details\n   - Click \"Create Project\"\n\n---\n\n### \ud83d\udee0\ufe0f Step 3: Generate Your API Key\n\n1. Go to Project Settings\n2. Navigate to Access Tokens\n3. Click on \"User\" in the top navigation bar\n4. Select \"Personal API Keys\" from the dropdown\n5. Click \"Create Personal API Key\"\n6. Choose the access level:\n   - Select \"All Access\" for full access\n   - Or select specific organization/project access\n7. Click \"Create Token\"\n8. Copy the generated API key (you won't be able to see it again)\n\n---\n\n### \ud83d\udd10 Step 4: Authenticate Your App\n\n1. Open your terminal\n2. Run this command:\n   ```bash\n   python src/servers/posthog/main.py auth\n   ```\n3. Enter your API key when prompted\n4. You're now authenticated! \ud83c\udf89\n\n> You only need to do this authentication step once, unless your API key changes.\n\n---\n\n### \ud83d\udee0\ufe0f Supported Tools\n\nThis server exposes the following tools for interacting with PostHog:\n\n#### Actions Management Tools\n- `list_actions` \u2013 List all actions in PostHog\n- `create_action` \u2013 Create a new action in PostHog\n- `get_action` \u2013 Get details of a specific action\n- `update_action` \u2013 Update an existing action\n\n#### Event Tracking Tools\n- `capture_event` \u2013 Capture a new event in PostHog\n- `identify_user` \u2013 Identify a user with properties\n- `group_identify` \u2013 Identify a group with properties\n- `capture_group_event` \u2013 Capture an event for a group\n\n#### Feature Flag Tools\n- `check_feature_flag` \u2013 Check if a feature flag is enabled\n- `get_feature_flag_payload` \u2013 Get the payload for a feature flag\n- `get_all_flags` \u2013 Get all feature flags\n\n#### Annotation Management Tools\n- `list_annotations` \u2013 List all annotations\n- `create_annotation` \u2013 Create a new annotation\n- `get_annotation` \u2013 Get details of a specific annotation\n- `update_annotation` \u2013 Update an existing annotation\n\n#### Cohort Management Tools\n- `list_cohorts` \u2013 List all cohorts\n- `create_cohort` \u2013 Create a new cohort\n- `get_cohort` \u2013 Get details of a specific cohort\n- `update_cohort` \u2013 Update an existing cohort\n- `delete_cohort` \u2013 Delete a cohort\n\n#### Dashboard Management Tools\n- `list_dashboards` \u2013 List all dashboards\n- `create_dashboard` \u2013 Create a new dashboard\n- `get_dashboard` \u2013 Get details of a specific dashboard\n- `update_dashboard` \u2013 Update an existing dashboard\n- `delete_dashboard` \u2013 Delete a dashboard\n- `list_dashboard_collaborators` \u2013 List collaborators for a dashboard\n- `add_dashboard_collaborator` \u2013 Add a collaborator to a dashboard\n- `get_dashboard_sharing` \u2013 Get sharing settings for a dashboard\n\n#### Person Management Tools\n- `list_persons` \u2013 List all persons\n- `get_person` \u2013 Get details of a specific person\n\n#### Experiment Management Tools\n- `list_experiments` \u2013 List all experiments\n- `create_experiment` \u2013 Create a new experiment\n- `get_experiment` \u2013 Get details of a specific experiment\n- `update_experiment` \u2013 Update an existing experiment\n- `check_experiments_requiring_flag` \u2013 Check experiments that require a feature flag\n\n#### Insight Management Tools\n- `list_insights` \u2013 List all insights\n- `create_insight` \u2013 Create a new insight\n- `get_insight` \u2013 Get details of a specific insight\n- `update_insight` \u2013 Update an existing insight\n- `get_insight_sharing` \u2013 Get sharing settings for an insight\n- `get_insight_activity` \u2013 Get activity for a specific insight\n- `mark_insight_viewed` \u2013 Mark an insight as viewed\n- `get_insights_activity` \u2013 Get activity for all insights\n- `get_trend_insights` \u2013 Get trend insights\n- `create_trend_insight` \u2013 Create a new trend insight\n\n---\n\n### \u25b6\ufe0f Running the Server\n\n#### Local Development\n\n1. Start the server:\n   ```bash\n   ./start_sse_dev_server.sh\n   ```\n\n2. In a new terminal, start the test client:\n   ```bash\n   python RemoteMCPTestClient.py --endpoint http://localhost:8000/posthog/local\n   ```\n\n---\n\n### \ud83d\udcce Important Notes\n\n- Ensure your PostHog API key has the necessary permissions for the operations you want to perform\n- Event capture and feature flag evaluations use the project API token, which is automatically retrieved during authentication\n- For group analytics, make sure group analytics is enabled in your PostHog instance\n- This server is designed to integrate with guMCP agents for tool-based LLM workflows\n- All API calls include proper error handling and response validation\n\n---\n\n### \ud83d\udcda Resources\n\n- [PostHog API Documentation](https://posthog.com/docs/api)\n- [PostHog Feature Flags](https://posthog.com/docs/feature-flags)\n- [PostHog Event Tracking](https://posthog.com/docs/api/ingest-live-data)\n- [PostHog Cohorts](https://posthog.com/docs/api/cohorts)\n- [PostHog Actions](https://posthog.com/docs/api/actions)\n- [PostHog Annotations](https://posthog.com/docs/api/annotations)\n- [PostHog Dashboards](https://posthog.com/docs/api/dashboards)\n- [PostHog Insights](https://posthog.com/docs/api/insights)\n- [PostHog Experiments](https://posthog.com/docs/api/experiments)\n"
  },
  "serpapi": {
    "name": "SerpAPI guMCP Server",
    "icon": "assets/icon.png",
    "description": "Perform Google searches using SerpAPI",
    "tools": [
      {
        "name": "google_search",
        "description": "Search Google using SerpAPI"
      },
      {
        "name": "google_images_search",
        "description": "Search Google Images using SerpAPI"
      },
      {
        "name": "google_news_search",
        "description": "Search Google News using SerpAPI"
      }
    ],
    "server_id": "serpapi",
    "documentation": "serpapi/README.md",
    "readme_content": "# SerpAPI Server\n\nguMCP server implementation for performing Google searches through SerpAPI.\n\n## Prerequisites\n\n- Python 3.11+\n- A SerpAPI API key (obtain from [SerpAPI](https://serpapi.com/))\n\n## Authentication\n\nTo set up and verify authentication, run:\n\n```bash\npython src/servers/serpapi/main.py auth\n```\n"
  },
  "calendly": {
    "name": "Calendly guMCP Server",
    "icon": "assets/icon.png",
    "description": "Interact with Calendly scheduling and event management",
    "resources": [
      {
        "name": "event_types",
        "description": "Calendly event types and meeting templates that define scheduling options.",
        "required_scopes": [
          "default"
        ]
      },
      {
        "name": "scheduled_events",
        "description": "Scheduled meetings and events in Calendly, including their details and participants.",
        "required_scopes": [
          "default"
        ]
      }
    ],
    "tools": [
      {
        "name": "list_event_types",
        "description": "List all available event types (meeting templates)",
        "required_scopes": [
          "default"
        ]
      },
      {
        "name": "get_availability",
        "description": "Get available time slots for a specific event type",
        "required_scopes": [
          "default"
        ]
      },
      {
        "name": "list_scheduled_events",
        "description": "List scheduled events in a given time range",
        "required_scopes": [
          "default"
        ]
      },
      {
        "name": "cancel_event",
        "description": "Cancel a scheduled event",
        "required_scopes": [
          "default"
        ]
      },
      {
        "name": "create_scheduling_link",
        "description": "Create a single-use scheduling link for a specific event type",
        "required_scopes": [
          "default"
        ]
      }
    ],
    "server_id": "calendly",
    "documentation": "calendly/README.md",
    "readme_content": "# Calendly Server\n\nguMCP server implementation for interacting with Calendly scheduling and event management.\n\n### Prerequisites\n\n- Python 3.11+\n- A Calendly account with API access\n- Calendly OAuth credentials\n\n### Setting Up Calendly Developer Account\n\nTo use this server, you'll need to create a Calendly developer account and set up OAuth credentials:\n\n1. Visit [Calendly Developer Portal](https://developer.calendly.com/create-a-developer-account)\n2. Sign up or log in to your Calendly account\n3. Create a new application in the developer dashboard\n4. Configure the OAuth settings with your redirect URI\n5. Copy the client ID and client secret for use in the OAuth configuration\n\nFor detailed instructions, refer to the [Calendly API documentation](https://developer.calendly.com/create-a-developer-account).\n\n### Local Authentication\n\nLocal authentication uses a OAuth Configuration JSON file:\n\n```json\nlocal_auth/oauth_configs/calendly/oauth.json\n```\n\nCreate the following file with the relevant attributes for your Calendly app:\n\n```json\n{\n  \"client_id\": \"xxxxxxxxxxxxxxxxxxxxx\",\n  \"client_secret\": \"xxxxxxxxxxxxxxxxxxxxx\",\n  \"redirect_uri\": \"xxxxxxxxxxxxxxxxxxxxx\"\n}\n```\n\nWhen authorizing users, the server will automatically:\n\n1. Redirect to Calendly's authorization URL with your configured credentials\n2. Exchange the received code for an access token using Calendly's OAuth endpoints\n\nFor local development, you can authenticate using:\n\n```bash\npython src/servers/calendly/main.py auth\n```\n\nThis will launch a browser-based authentication flow to obtain and save credentials.\n\n### Available Tools\n\nThe Calendly server provides the following functionality:\n\n#### List Event Types\n\nGet all available event types (meeting templates) in your Calendly account.\n\n#### Get Availability\n\nCheck available time slots for a specific event type within a date range.\n\n#### List Scheduled Events\n\nView all scheduled meetings in a given time range with optional status filtering.\n\n#### Cancel Event\n\nCancel a scheduled event with an optional cancellation reason.\n\n#### Create Scheduling Link\n\nGenerate a single-use scheduling link for a specific event type.\n"
  },
  "gdocs": {
    "name": "Google Docs guMCP Server",
    "icon": "assets/icon.png",
    "description": "Create and manage Google Docs documents",
    "tools": [
      {
        "name": "search_docs",
        "description": "Search for Google Docs in Drive"
      },
      {
        "name": "create_doc",
        "description": "Create a new Google Doc"
      },
      {
        "name": "append_to_doc",
        "description": "Append content to an existing Google Doc"
      },
      {
        "name": "update_doc",
        "description": "Update content in an existing Google Doc"
      }
    ],
    "server_id": "gdocs",
    "documentation": "gdocs/README.md",
    "readme_content": "# Google Docs Server\n\nguMCP server implementation for interacting with Google Docs.\n\n### Prerequisites\n\n- Python 3.11+\n- A Google Cloud Project with Google Drive and Google Docs APIs enabled\n- OAuth 2.0 credentials with the following scopes:\n  - https://www.googleapis.com/auth/drive.file\n  - https://www.googleapis.com/auth/documents\n\n### Local Authentication\n\n1. [Create a new Google Cloud project](https://console.cloud.google.com/projectcreate)\n2. [Enable the Google Drive API and Google Docs API](https://console.cloud.google.com/workspace-api/products)\n3. [Configure an OAuth consent screen](https://console.cloud.google.com/apis/credentials/consent) (\"internal\" is fine for testing)\n4. Add OAuth scopes:\n   - https://www.googleapis.com/auth/drive.file\n   - https://www.googleapis.com/auth/documents\n5. [Create an OAuth Client ID](https://console.cloud.google.com/apis/credentials/oauthclient) for application type \"Desktop App\"\n6. Download the JSON file of your client's OAuth keys\n7. Rename the key file to `oauth.json` and place into the `local_auth/oauth_configs/gdocs/oauth.json`\n\nTo authenticate and save credentials:\n\n```bash\npython src/servers/gdocs/main.py auth\n```\n\nThis will launch a browser-based authentication flow to obtain and save credentials.\n"
  },
  "gmeet": {
    "name": "Google Meet guMCP Server",
    "icon": "assets/icon.png",
    "description": "Interact with Google Meet using the Google Calendar API",
    "tools": [
      {
        "name": "create_meeting",
        "description": "Create a new meeting"
      },
      {
        "name": "add_attendees",
        "description": "Add attendees to a meeting."
      },
      {
        "name": "fetch_meetings_by_date",
        "description": "Fetch all meetings for a given date."
      },
      {
        "name": "get_meeting_details",
        "description": "Get details of a meeting by meeting id."
      },
      {
        "name": "update_meeting",
        "description": "Update a meeting by meeting id."
      },
      {
        "name": "delete_meeting",
        "description": "Delete a meeting by meeting id."
      }
    ],
    "server_id": "gmeet",
    "documentation": "gmeet/README.md",
    "readme_content": "# Google Meet Server\n\nguMCP server implementation for interacting with the **Google Calendar API** to manage Google Meet meetings.\n\n---\n\n### \ud83d\udce6 Prerequisites\n\n- Python 3.11+\n- A Google Cloud project with the **Google Calendar API enabled**\n- OAuth 2.0 credentials configured for desktop application access\n\n---\n\n### \ud83d\udd10 Local Authentication\n\nLocal authentication uses a Google OAuth Configuration JSON file located at:\n\n```\nlocal_auth/oauth_configs/gmeet/oauth.json\n```\n\nThis file can be downloaded when creating an OAuth client from the Google Cloud Console.\n\nTo authenticate and save credentials for local testing, run:\n\n```bash\npython src/servers/gmeet/main.py auth\n```\n\nAfter successful authentication, your credentials will be stored securely for reuse.\n\n---\n\n### \ud83d\udee0\ufe0f Supported Tools\n\nThis server exposes the following tools for interacting with Google Meet:\n\n- `create_meeting` \u2013 Create a new meeting with title, description, time, and attendees\n- `add_attendees` \u2013 Add attendees to an existing meeting\n- `fetch_meetings_by_date` \u2013 Get all meetings scheduled for a specific date\n- `get_meeting_details` \u2013 Retrieve detailed information about a specific meeting\n- `update_meeting` \u2013 Modify meeting details (title, description, time)\n- `delete_meeting` \u2013 Remove a meeting from the calendar\n\n---\n\n### \u25b6\ufe0f Run\n\n#### Local Development\n\nYou can launch the server for local development using:\n\n```bash\n./start_sse_dev_server.sh\n```\n\nThis will start the Google Meet MCP server and make it available for integration and testing.\n\nYou can also start the local client using the following:\n\n```bash\npython RemoteMCPTestClient.py --endpoint http://localhost:8000/gmeet/local\n```\n\n---\n\n### \ud83d\udcce Notes\n\n- Ensure your OAuth app has **Google Calendar API** access enabled in the Google Cloud console\n- If you're testing with multiple users or environments, use different `user_id` values\n- Make sure your `.env` file contains the appropriate API keys if you're using external LLM services like Anthropic\n- All meeting times should be provided in ISO format (YYYY-MM-DDTHH:MM:SS)\n\n---\n\n### \ud83d\udcda Resources\n\n- [Google Calendar API Documentation](https://developers.google.com/calendar/api)\n- [OAuth 2.0 in Google APIs](https://developers.google.com/identity/protocols/oauth2)\n"
  },
  "x": {
    "name": "X guMCP Server",
    "icon": "assets/icon.png",
    "description": "Interact with X (formerly Twitter) for searching tweets, posting, and user information",
    "tools": [
      {
        "name": "search_recent_tweet",
        "description": "Search for recent tweets (last 7 days) matching a query"
      },
      {
        "name": "get_user_profile",
        "description": "Get an X user's profile information"
      },
      {
        "name": "get_user_posts",
        "description": "Get a user's posts (tweets created by the user)"
      },
      {
        "name": "get_user_home_timeline",
        "description": "Get a user's home timeline (tweets from users they follow)"
      },
      {
        "name": "get_user_mentions",
        "description": "Get tweets that mention a specific user"
      },
      {
        "name": "get_tweet_by_id",
        "description": "Look up a specific tweet by its ID"
      },
      {
        "name": "create_tweet",
        "description": "Create a new tweet on behalf of the authenticated user"
      },
      {
        "name": "delete_tweet",
        "description": "Delete a tweet by ID"
      }
    ],
    "server_id": "x",
    "documentation": "x/README.md",
    "readme_content": "# X Server\n\nguMCP server implementation for interacting with X (formerly Twitter).\n\n### Prerequisites\n\n- Python 3.11+\n- An X Developer Account with API access ([X Developer Portal](https://developer.twitter.com/en))\n- A Project and App with OAuth 2.0 authentication\n\n### Local Authentication\n\nLocal authentication uses an OAuth Configuration JSON file:\n\n```\nlocal_auth/oauth_configs/x/oauth.json\n```\n\nCreate the following file with the relevant attributes for your app:\n\n```json\n{\n  \"client_id\": \"xxxxxxxxxxxxxxxxxxxxx\",\n  \"client_secret\": \"xxxxxxxxxxxxxxxxxxxxx\",\n  \"redirect_uri\": \"https://xxxxxxxxxxxxx\"\n}\n```\n\nTo set up and verify authentication, run:\n\n```bash\npython src/servers/x/main.py auth\n```\n"
  },
  "apify": {
    "name": "Apify GuMCP Server",
    "icon": "assets/icon.png",
    "description": "Server for interacting with the Apify API",
    "tools": [
      {
        "name": "create_actor",
        "description": "Create a new Actor"
      },
      {
        "name": "build_actor",
        "description": "Build an Actor from source code"
      },
      {
        "name": "list_actors",
        "description": "List all Actors"
      },
      {
        "name": "get_actor",
        "description": "Get metadata for one Actor"
      },
      {
        "name": "delete_actor",
        "description": "Delete an Actor"
      },
      {
        "name": "run_actor",
        "description": "Start an Actor run asynchronously"
      },
      {
        "name": "list_actor_runs",
        "description": "List runs for an Actor"
      },
      {
        "name": "list_tasks",
        "description": "List all Tasks"
      },
      {
        "name": "get_task",
        "description": "Get a Task"
      },
      {
        "name": "create_task",
        "description": "Create a new Task"
      },
      {
        "name": "update_task",
        "description": "Update an existing Task"
      },
      {
        "name": "delete_task",
        "description": "Delete a Task"
      },
      {
        "name": "update_task_input",
        "description": "Update input for a Task"
      },
      {
        "name": "run_task",
        "description": "Run a Task"
      },
      {
        "name": "list_task_runs",
        "description": "List runs for a Task"
      },
      {
        "name": "list_datasets",
        "description": "List all Datasets"
      },
      {
        "name": "delete_dataset",
        "description": "Delete a Dataset"
      }
    ],
    "server_id": "apify",
    "documentation": "apify/README.md",
    "readme_content": "# Apify GuMCP Server\n\nGuMCP server implementation for interacting with the Apify API using token-based authentication.\n\n## \ud83d\udce6 Prerequisites\n\n- Python 3.11+\n- An Apify account ([Sign up here](https://apify.com/))\n- Apify API token (found in your Apify account settings)\n\n## \ud83d\udd11 API Token Generation\n\nTo generate your Apify API token, follow these steps:\n\n1. Log in to your [Apify Console](https://console.apify.com/)\n2. Navigate to Settings > API & Integrations [API & Integrations](https://console.apify.com/settings/integrations)\n3. Create a new API token if not already created by clicking the \"Create a new token\" button.\n4. Copy the token value - you will need it for authentication\n\n> \u26a0\ufe0f **Important**: Your API token provides access to your Apify account and resources. Store it securely and never share it publicly!\n\n## \ud83d\udd10 Local Authentication\n\nTo authenticate and save your Apify credentials for local testing, run:\n\n```bash\npython src/servers/apify/main.py auth\n```\n\nThis will:\n1. Prompt you to enter your Apify API token\n2. Store your credentials securely for future use\n\n## \ud83d\udee0\ufe0f Features\n\nThe Apify server supports the following operations grouped by resource type:\n\n### Actor Tools:\n\n- `create_actor` \u2013 Create a new Actor\n- `build_actor` \u2013 Build an Actor from source code\n- `list_actors` \u2013 List all Actors\n- `get_actor` \u2013 Get metadata for one Actor\n- `delete_actor` \u2013 Delete an Actor\n- `run_actor` \u2013 Start an Actor run asynchronously\n- `list_actor_runs` \u2013 List runs for an Actor\n\n### Task Tools:\n\n- `list_tasks` \u2013 List all Tasks\n- `get_task` \u2013 Get a Task\n- `create_task` \u2013 Create a new Task\n- `update_task` \u2013 Update an existing Task\n- `delete_task` \u2013 Delete a Task\n- `update_task_input` \u2013 Update input for a Task\n- `run_task` \u2013 Run a Task\n- `list_task_runs` \u2013 List runs for a Task\n\n### Dataset Tools:\n\n- `list_datasets` \u2013 List all Datasets\n- `delete_dataset` \u2013 Delete a Dataset\n\n## \ud83d\udd04 Actor Build and Run Workflow\n\nWhen working with custom actors, you must follow this workflow:\n\n1. **Create the actor** - Use the `create_actor` tool to set up a new actor with source code\n2. **Build the actor** - Use the `build_actor` tool to compile the actor's code\n3. **Run the actor** - Only after a successful build can you use the `run_actor` tool\n\nIf you try to run an actor that hasn't been built yet, you'll receive an error message prompting you to build it first.\n\n## \u25b6\ufe0f Running the Server and Client\n\n### 1. Start the Server\n\nLaunch the server for local development using:\n\n```bash\n./start_sse_dev_server.sh\n```\n\n### 2. Connect with the Client\n\nOnce the server is running, connect to it using the test client:\n\n```bash\npython tests/clients/RemoteMCPTestClient.py --endpoint=http://localhost:8000/apify/local\n```\n\n\n## \ud83d\udcce Notes\n\n- All requests to the Apify API require authentication\n- The free plan has usage limits - check the [Apify pricing page](https://apify.com/pricing) for details\n- Some operations may take time to complete, especially actor runs\n\n## \ud83d\udcda Resources\n\n- [Apify API Documentation](https://docs.apify.com/api/v2)\n- [Apify Platform Documentation](https://docs.apify.com/platform)\n- [Apify Console](https://console.apify.com/)\n- [Apify SDK Documentation](https://sdk.apify.com/)\n- [Apify Actors Documentation](https://docs.apify.com/platform/actors)"
  },
  "gmail": {
    "name": "Gmail guMCP Server",
    "icon": "assets/icon.png",
    "description": "Interact with Gmail emails and messages",
    "tools": [
      {
        "name": "read_emails",
        "description": "Search and read emails in Gmail"
      },
      {
        "name": "send_email",
        "description": "Send an email through Gmail"
      },
      {
        "name": "update_email",
        "description": "Update email labels (mark as read/unread, move to folders)"
      }
    ],
    "server_id": "gmail",
    "documentation": "gmail/README.md",
    "readme_content": "# Gmail Server\n\nguMCP server implementation for interacting with Gmail.\n\n### Prerequisites\n\n- Python 3.11+\n- A Google Cloud Project with Gmail API enabled\n- OAuth 2.0 credentials with the following scopes:\n  - https://www.googleapis.com/auth/gmail.modify\n\n### Local Authentication\n\n1. [Create a new Google Cloud project](https://console.cloud.google.com/projectcreate)\n2. [Enable the Gmail API](https://console.cloud.google.com/workspace-api/products)\n3. [Configure an OAuth consent screen](https://console.cloud.google.com/apis/credentials/consent) (\"internal\" is fine for testing)\n4. Add OAuth scope `https://www.googleapis.com/auth/gmail.modify`\n5. [Create an OAuth Client ID](https://console.cloud.google.com/apis/credentials/oauthclient) for application type \"Desktop App\"\n6. Download the JSON file of your client's OAuth keys\n7. Rename the key file to `oauth.json` and place into the `local_auth/oauth_configs/gmail/oauth.json`\n\nTo authenticate and save credentials:\n\n```bash\npython src/servers/gmail/main.py auth\n```\n\nThis will launch a browser-based authentication flow to obtain and save credentials.\n"
  },
  "twilio": {
    "name": "Twilio guMCP Server",
    "icon": "assets/icon.png",
    "description": "Interact with Twilio's messaging, voice, verification, and communication APIs",
    "tools": [
      {
        "name": "send_message",
        "description": "Send SMS, MMS, or WhatsApp messages"
      },
      {
        "name": "list_messages",
        "description": "List message history"
      },
      {
        "name": "fetch_message",
        "description": "Fetch a message by SID"
      },
      {
        "name": "delete_message",
        "description": "Delete a message by SID"
      },
      {
        "name": "make_call",
        "description": "Make an outbound voice call with TwiML or text-to-speech"
      },
      {
        "name": "list_calls",
        "description": "List recent calls"
      },
      {
        "name": "fetch_call",
        "description": "Fetch a call by SID"
      },
      {
        "name": "list_verify_services",
        "description": "List all Twilio Verify services"
      },
      {
        "name": "create_verify_service",
        "description": "Create a new Twilio Verify service"
      },
      {
        "name": "start_verification",
        "description": "Send a verification code via SMS, call, etc."
      },
      {
        "name": "check_verification",
        "description": "Check a verification code"
      },
      {
        "name": "lookup_phone_number",
        "description": "Lookup phone number information and carrier data"
      },
      {
        "name": "list_conversation_services",
        "description": "List all conversation services"
      },
      {
        "name": "create_conversation_service",
        "description": "Create a new conversation service"
      },
      {
        "name": "list_conversations",
        "description": "List conversations in a service"
      },
      {
        "name": "create_conversation",
        "description": "Create a new conversation"
      },
      {
        "name": "add_conversation_participant",
        "description": "Add a participant to a conversation"
      },
      {
        "name": "send_conversation_message",
        "description": "Send a message in a conversation"
      },
      {
        "name": "list_video_rooms",
        "description": "List all video rooms"
      },
      {
        "name": "create_video_room",
        "description": "Create a new video room"
      },
      {
        "name": "fetch_video_room",
        "description": "Fetch details about a video room"
      },
      {
        "name": "complete_video_room",
        "description": "Complete (end) a video room"
      }
    ],
    "server_id": "twilio",
    "documentation": "twilio/README.md",
    "readme_content": "# Twilio Server\n\nguMCP server implementation for interacting with Twilio's messaging, voice, verification, and communication APIs.\n\n## \ud83d\udce6 Prerequisites\n\n- Python 3.11+\n- A Twilio account ([Sign up here](https://www.twilio.com/try-twilio))\n- Twilio Account SID (found in your Twilio Console Dashboard)\n- Twilio API Key SID (created in the Twilio Console)\n- Twilio API Key Secret (provided when creating an API key)\n\n## \ud83d\udd11 API Key Generation\n\nTo generate Twilio API keys, follow these steps:\n\n1. Log in to your [Twilio Console](https://www.twilio.com/console)\n2. Navigate to Account (Create Account if you don't have one)\n3. Navigate to API Keys & Tokens [API Keys & Tokens](https://console.twilio.com/us1/account/keys-credentials/api-keys)\n4. Click \"Create API Key\"\n5. Enter a friendly name for your API key\n6. Select the appropriate key type:\n   - Standard: Most common, good for most applications\n   - Main: Has full account access, use with caution\n7. Copy both the API Key SID and API Key Secret\n8. You will also require your Account SID which can be found in your Account Dashboard\n   \n> \u26a0\ufe0f **Important**: Your API Key Secret will only be shown once. Store it securely!\n\n## \ud83d\udd10 Local Authentication\n\nTo authenticate and save your Twilio credentials for local testing, run:\n\n```bash\npython src/servers/twilio/main.py auth\n```\n\nThis will:\n1. Prompt you to enter your:\n   - Account SID (found in your Twilio Console Dashboard)\n   - API Key SID\n   - API Key Secret\n2. Validate your credentials with Twilio\n3. Store your credentials securely\n\n## \ud83d\udee0\ufe0f Features\n\nThe Twilio server supports a comprehensive set of operations grouped into categories:\n\n### Messaging Tools:\n\n- `send_message`: Send SMS, MMS, or WhatsApp messages\n- `list_messages`: List message history \n- `fetch_message`: Fetch a message by SID\n- `delete_message`: Delete a message by SID\n\n### Voice Tools:\n\n- `make_call`: Make an outbound voice call with TwiML or text-to-speech\n- `list_calls`: List recent calls\n- `fetch_call`: Fetch a call by SID\n\n### Verify Tools:\n\n- `list_verify_services`: List all Twilio Verify services\n- `create_verify_service`: Create a new Twilio Verify service\n- `start_verification`: Send a verification code via SMS, call, etc.\n- `check_verification`: Check a verification code\n\n### Lookup Tools:\n\n- `lookup_phone_number`: Lookup phone number information and carrier data\n\n### Conversations Tools:\n\n- `list_conversation_services`: List all conversation services\n- `create_conversation_service`: Create a new conversation service\n- `list_conversations`: List conversations in a service\n- `create_conversation`: Create a new conversation\n- `add_conversation_participant`: Add a participant to a conversation\n- `send_conversation_message`: Send a message in a conversation\n\n### Video Tools:\n\n- `list_video_rooms`: List all video rooms\n- `create_video_room`: Create a new video room\n- `fetch_video_room`: Fetch details about a video room\n- `complete_video_room`: Complete (end) a video room\n\n## \u25b6\ufe0f Running the Server and Client\n\n### 1. Start the Server\n\nYou can launch the server for local development using:\n\n```bash\n./start_sse_dev_server.sh\n```\n\n### 2. Connect with the Client\n\nOnce the server is running, connect to it using the test client:\n\n```bash\npython tests/clients/RemoteMCPTestClient.py --endpoint=http://localhost:8000/twilio/local\n```\n\n## \ud83d\udcce Notes\n\n### API Key Security:\n- API Keys provide better security than using your primary auth token\n- Store API keys securely and never commit them to source control\n- Rotate your keys periodically for enhanced security\n\n### Phone Number Verification:\n- During testing, you can only send messages to verified numbers unless your account is upgraded\n- Voice calls to unverified numbers may be restricted based on your account status\n\n### Rate Limiting:\n- Twilio API has rate limits that vary by endpoint\n- The server handles rate limiting gracefully with appropriate error messages\n\n### Costs and Billing:\n- SMS, voice calls, and other Twilio services incur charges\n- Monitor your usage through the [Twilio Console](https://www.twilio.com/console)\n- Set up spending alerts to avoid unexpected charges\n\n## \ud83d\udcda Resources\n\n- [Twilio API Documentation](https://www.twilio.com/docs/api)\n- [Twilio Python SDK Documentation](https://www.twilio.com/docs/libraries/python)\n- [Twilio Console](https://www.twilio.com/console)\n- [Twilio API Keys Documentation](https://www.twilio.com/docs/iam/keys/api-key)\n- [Twilio Rate Limits](https://www.twilio.com/docs/usage/api/rate-limits) "
  },
  "stripe": {
    "name": "Stripe guMCP Server",
    "icon": "assets/icon.png",
    "description": "Interact with Stripe for customer management, subscriptions, payments, invoices, and more.",
    "tools": [
      {
        "name": "list_customers",
        "description": "List all Stripe customers"
      },
      {
        "name": "retrieve_balance",
        "description": "Retrieve the current Stripe account balance"
      },
      {
        "name": "list_subscriptions",
        "description": "List all subscriptions in the Stripe account"
      },
      {
        "name": "create_payment_intent",
        "description": "Create a new payment intent with specified amount and currency"
      },
      {
        "name": "update_subscription",
        "description": "Update metadata or attributes of a Stripe subscription"
      },
      {
        "name": "list_payment_intents",
        "description": "List all payment intents"
      },
      {
        "name": "list_charges",
        "description": "List all charges processed by the Stripe account"
      },
      {
        "name": "create_customer",
        "description": "Create a new customer in Stripe"
      },
      {
        "name": "create_invoice",
        "description": "Create a new draft invoice for a specified customer"
      },
      {
        "name": "list_invoices",
        "description": "List all invoices created in Stripe"
      },
      {
        "name": "retrieve_customer",
        "description": "Retrieve details of a specific customer by ID"
      },
      {
        "name": "create_product",
        "description": "Create a new product to be sold or subscribed to"
      },
      {
        "name": "confirm_payment_intent",
        "description": "Confirm a payment intent with a given ID"
      },
      {
        "name": "list_products",
        "description": "List all available products in Stripe"
      },
      {
        "name": "cancel_subscription",
        "description": "Cancel a subscription by ID"
      },
      {
        "name": "retrieve_subscription",
        "description": "Retrieve a subscription by its ID"
      },
      {
        "name": "create_price",
        "description": "Create a price object for a product, recurring or one-time"
      },
      {
        "name": "create_subscription",
        "description": "Create a subscription for a customer with a price"
      },
      {
        "name": "update_customer",
        "description": "Update customer attributes such as name, email, etc."
      }
    ],
    "server_id": "stripe",
    "documentation": "stripe/README.md",
    "readme_content": "# Stripe Server\n\nguMCP server implementation for interacting with Stripe API.\n\n---\n\n### \ud83d\udce6 Prerequisites\n\n- Python 3.11+\n- A Stripe account with API access\n- OAuth 2.0 credentials configured for standard accounts\n\n---\n\n### \ud83d\udd10 Local Authentication\n\nLocal authentication uses a Stripe OAuth Configuration JSON file located at:\n\n```\nlocal_auth/oauth_configs/stripe/oauth.json\n```\n\nCreate the following file with the relevant attributes for your app:\n\n```json\n{\n  \"client_id\": \"xxxxxxxxxxxxxxxxxxxxx\",\n  \"client_secret\": \"xxxxxxxxxxxxxxxxxxxxx\", // The client_secret is your secret API key, see the Reference guides below\n  \"redirect_uri\": \"http://localhost:8080\"\n}\n```\n\nTo set this up properly, refer to Stripe's official documentation for creating and managing OAuth applications:\n\n\u27a1\ufe0f [Stripe OAuth Standard Accounts Guide](https://docs.stripe.com/connect/oauth-standard-accounts#integrating-oauth)\n\u27a1\ufe0f [Stripe OAuth Reference](https://docs.stripe.com/connect/oauth-reference)\n\nTo authenticate and save credentials for local testing, run:\n\n```bash\npython src/servers/stripe/main.py auth\n```\n\nAfter successful authentication, your credentials will be stored securely for reuse.\n\n---\n\n### \ud83d\udee0\ufe0f Supported Tools\n\nThis server exposes the following tools for interacting with Stripe:\n\n- `list_customers` \u2013 List all customers\n- `retrieve_balance` \u2013 Retrieve current account balance\n- `list_subscriptions` \u2013 List all subscriptions\n- `create_payment_intent` \u2013 Create a new payment intent\n- `update_subscription` \u2013 Update subscription metadata or settings\n- `list_payment_intents` \u2013 List all payment intents\n- `list_charges` \u2013 List charges made to customers\n- `create_customer` \u2013 Create a new customer\n- `create_invoice` \u2013 Create a draft invoice for a customer\n- `list_invoices` \u2013 List all invoices\n- `retrieve_customer` \u2013 Get detailed information of a customer\n- `create_product` \u2013 Create a product\n- `confirm_payment_intent` \u2013 Confirm a payment intent\n- `list_products` \u2013 List all products\n- `cancel_subscription` \u2013 Cancel a subscription\n- `retrieve_subscription` \u2013 Retrieve subscription details\n- `create_price` \u2013 Create a recurring or one-time price for a product\n- `create_subscription` \u2013 Create a subscription with a customer and price\n- `update_customer` \u2013 Update customer fields\n\n---\n\n### \u25b6\ufe0f Run\n\n#### Local Development\n\nYou can launch the server for local development using:\n\n```bash\n./start_sse_dev_server.sh\n```\n\nThis will start the MCP server and make it available for integration and testing.\n\nYou can also start the local client using the following:\n\n```bash\npython RemoteMCPTestClient.py --endpoint http://localhost:8000/stripe/local\n```\n\n---\n\n### \ud83d\udcce Notes\n\n- Ensure your Stripe app has the required permissions enabled in the dashboard.\n- Use different `user_id` values if you're testing with multiple environments.\n- This server is designed to integrate with guMCP agents for tool-based LLM workflows.\n- Make sure you have provided your Anthropic API key in the `.env` file.\n\n---\n\n### \ud83d\udcda Resources\n\n- [Stripe API Documentation](https://stripe.com/docs/api)\n- [Stripe OAuth Guide](https://docs.stripe.com/connect/oauth-standard-accounts#connect-users)\n"
  },
  "outlook": {
    "name": "Outlook guMCP Server",
    "icon": "assets/icon.png",
    "description": "Read and send emails through Microsoft Outlook",
    "tools": [
      {
        "name": "read_emails",
        "description": "Read emails from Outlook. Fetches emails based on specified filters."
      },
      {
        "name": "send_email",
        "description": "Send an email using Outlook"
      }
    ],
    "server_id": "outlook",
    "documentation": "outlook/README.md",
    "readme_content": "# Outlook Server\n\nguMCP server implementation for interacting with Microsoft Outlook.\n\n### Prerequisites\n\n- Python 3.11+\n- A Microsoft Entra ID (formerly Azure AD) application registration\n- OAuth 2.0 credentials with the following scopes:\n  - https://graph.microsoft.com/Mail.ReadWrite\n  - https://graph.microsoft.com/Mail.Send\n  - offline_access\n\n### Local Authentication\n\n1. [Register a new application in Microsoft Entra ID](https://learn.microsoft.com/en-us/entra/identity-platform/quickstart-register-app?tabs=certificate%2Cexpose-a-web-api)\n2. Add the required Microsoft Graph API permissions (Mail.ReadWrite, Mail.Send)\n3. Configure a redirect URI for your application (e.g., http://localhost:8080)\n4. Get your application's client ID and client secret\n5. Create an `oauth.json` file:\n\n```\nlocal_auth/oauth_configs/outlook/oauth.json\n```\n\nCreate the following file with the relevant attributes for your app:\n\n```json\n{\n  \"client_id\": \"xxxxxxxxxxxxxxxxxxxxx\",\n  \"client_secret\": \"xxxxxxxxxxxxxxxxxxxxx\",\n  \"redirect_uri\": \"https://xxxxxxxxxxxxx\"\n}\n```\n\n6. To set up and verify authentication, run:\n\n```bash\npython src/servers/outlook/main.py auth\n```\n\n### Run\n\n#### Local Development\n\n```bash\npython src/servers/local.py --server outlook --user-id local\n```\n"
  }
}